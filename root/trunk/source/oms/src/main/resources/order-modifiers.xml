<?xml version="1.0" encoding="UTF-8"?>

<!-- START SNIPPET: spring -->
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

    <!-- Order modifiers can be in the following format:
    Which makes the following examples valid property names.
 The syntax of the Regular Expression for the property name is as follows:
([0-9]+)(\((\*|[0-9a-z]|admin|app)\))?
   
Field name examples:
87
87(*)
(D)
87(app)
87(admin)

The first example '87' works exactly as described above, the rest of the examples have a 'predicate' in parenthesis.
Predicate values break down as follows:

   1. * - insert field into all messages, the default
   2. <single letter or digit> - insert field into messages matching this MsgType
   3. app - insert field into app messages
   4. admin - insert field into admin messages

So the sample map entries can look like this:
  <map>
    <entry key="12" value="0.005"/>
    <entry key="87(admin)" value="bob"/>
    <entry key="32(app)" value="fred"/>
    <entry key="87(*)" value="bar"/>
  </map>
   -->

    <bean id="defaultOrderModifier" class="org.marketcetera.quickfix.DefaultOrderModifier">
        <property name="headerFields">
            <map>
<!--
 Example:
                <entry key="57" value="CERT"/>
-->
            </map>
        </property>
        <property name="msgFields">
            <map>
            </map>
        </property>
        <property name="trailerFields">
            <map>
            </map>
        </property>
    </bean>

    <bean id="orderRouting" class="org.marketcetera.quickfix.OrderRouteManager">
        <property name="separateSuffix" value="true"/>
        <property name="routeMethod" value="field:57"/>
        <property name="routes">
            <map>
<!--
 Example:
                <entry key="N" value="SIGMA"/>
                <entry key="IM" value="Milan"/>
                <entry key="A" value="B"/>
-->
            </map>
        </property>
    </bean>

</beans>
<!-- END SNIPPET: spring -->
