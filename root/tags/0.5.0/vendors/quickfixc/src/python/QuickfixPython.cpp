/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Python.h has to appear first */
#include <Python.h>

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif
/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif


/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif


/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif


/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);
    PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_Format(PyExc_RuntimeError, mesg);
  }
}



#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         PySwigClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, int min, int max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register int l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), min, l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), max, l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue("");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* PySwigClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} PySwigClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  PySwigClientData *data = (PySwigClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  PySwigClientData *data = desc ? (PySwigClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME PySwigClientData * 
PySwigClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    PySwigClientData *data = (PySwigClientData *)malloc(sizeof(PySwigClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
PySwigClientData_Del(PySwigClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== PySwigObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} PySwigObject;

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0) {
      PyObject *ofmt = PyString_FromString(fmt);
      if (ofmt) {
	res = PyString_Format(ofmt,args);
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
PySwigObject_repr(PySwigObject *v)
#else
PySwigObject_repr(PySwigObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *hex = PySwigObject_hex(v);    
  PyObject *repr = PyString_FromFormat("<Swig Object of type '%s' at 0x%s>", name, PyString_AsString(hex));
  Py_DECREF(hex);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next);
#else
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next, args);
#endif
    PyString_ConcatAndDel(&repr,nrep);
  }
  return repr;  
}

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
#ifdef METH_NOARGS
  PyObject *repr = PySwigObject_repr(v);
#else
  PyObject *repr = PySwigObject_repr(v, NULL);
#endif
  if (repr) {
    fputs(PyString_AsString(repr), fp);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type())
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
PySwigObject_dealloc(PyObject *v)
{
  PySwigObject *sobj = (PySwigObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own) {
    swig_type_info *ty = sobj->ty;
    PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporal object to carry the destroy operation */
	PyObject *tmp = PySwigObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } else {
      const char *name = SWIG_TypePrettyName(ty);
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", name);
#endif
    }
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
PySwigObject_append(PyObject* v, PyObject* next)
{
  PySwigObject *sobj = (PySwigObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!PySwigObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
PySwigObject_next(PyObject* v)
#else
PySwigObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_disown(PyObject *v)
#else
PySwigObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_acquire(PyObject *v)
#else
PySwigObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
PySwigObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      PySwigObject *sobj = (PySwigObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v);
	} else {
	  PySwigObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v,args);
	} else {
	  PySwigObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
PySwigObject_getattr(PySwigObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#elif PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
	(char *)"PySwigObject",		    /* tp_name */
	sizeof(PySwigObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)PySwigObject_dealloc,   /* tp_dealloc */
	(printfunc)PySwigObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)PySwigObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
	(cmpfunc)PySwigObject_compare,	    /* tp_compare */ 
	(reprfunc)PySwigObject_repr,	    /* tp_repr */    
	&PySwigObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)PySwigObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigobject_type = tmp;
    pyswigobject_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own)
{
  PySwigObject *sobj = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->ty->name);
  } else {
    return PyString_FromString(v->ty->name);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

SWIGRUNTIME void
PySwigPacked_dealloc(PyObject *v)
{
  if (PySwigPacked_Check(v)) {
    PySwigPacked *sobj = (PySwigPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */	
	(char *)"PySwigPacked",		    /* tp_name */	
	sizeof(PySwigPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)PySwigPacked_dealloc,   /* tp_dealloc */	
	(printfunc)PySwigPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
	(cmpfunc)PySwigPacked_compare,	    /* tp_compare */ 	
	(reprfunc)PySwigPacked_repr,	    /* tp_repr */    	
	0,	                            /* tp_as_number */	
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */	
	(hashfunc)0,			    /* tp_hash */	
	(ternaryfunc)0,			    /* tp_call */	
	(reprfunc)PySwigPacked_str,	    /* tp_str */	
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigpacked_type = tmp;
    pyswigpacked_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  PySwigPacked *sobj = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (PySwigPacked_Check(obj)) {
    PySwigPacked *sobj = (PySwigPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
  return PyString_FromString("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

SWIGRUNTIME PySwigObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (PySwigObject_Check(pyobj)) {
    return (PySwigObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !PySwigObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 PySwigObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (PySwigObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own) {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (PySwigObject *)sobj->next;
	  } else {
	    if (ptr) *ptr = SWIG_TypeCast(tc,vptr);
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own) *own = sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      PySwigObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc) {
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
      if (!desc) return SWIG_ERROR;
    }
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (!tc) return SWIG_ERROR;
      *ptr = SWIG_TypeCast(tc,vptr);
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = PySwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, whitout calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(PySwigClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, "__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    PySwigObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      PySwigObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = PySwigObject_New(ptr, type, own);
    PySwigClientData *clientdata = type ? (PySwigClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? PySwigPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      PySwigClientData *data = (PySwigClientData *) ty->clientdata;
      if (data) PySwigClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache() {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = PyString_FromString(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  PySwigObject *v = (PySwigObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Application swig_types[0]
#define SWIGTYPE_p_BeginString swig_types[1]
#define SWIGTYPE_p_DOMDocumentPtr swig_types[2]
#define SWIGTYPE_p_Data swig_types[3]
#define SWIGTYPE_p_DataDictionary swig_types[4]
#define SWIGTYPE_p_Dictionaries swig_types[5]
#define SWIGTYPE_p_DoubleField swig_types[6]
#define SWIGTYPE_p_FIELD__Field swig_types[7]
#define SWIGTYPE_p_FIX_CHAR swig_types[8]
#define SWIGTYPE_p_FIX_DAYOFMONTH swig_types[9]
#define SWIGTYPE_p_FIX_INT swig_types[10]
#define SWIGTYPE_p_FIX_LOCALMKTDATE swig_types[11]
#define SWIGTYPE_p_FIX_PRICEOFFSET swig_types[12]
#define SWIGTYPE_p_FIX_QTY swig_types[13]
#define SWIGTYPE_p_FIX_STRING swig_types[14]
#define SWIGTYPE_p_FIX_UTCDATE swig_types[15]
#define SWIGTYPE_p_FIX_UTCTIMEONLY swig_types[16]
#define SWIGTYPE_p_FIX_UTCTIMESTAMP swig_types[17]
#define SWIGTYPE_p_FIX__Acceptor swig_types[18]
#define SWIGTYPE_p_FIX__AllocShares swig_types[19]
#define SWIGTYPE_p_FIX__Application swig_types[20]
#define SWIGTYPE_p_FIX__AvgPrxPrecision swig_types[21]
#define SWIGTYPE_p_FIX__Benchmark swig_types[22]
#define SWIGTYPE_p_FIX__BoolField swig_types[23]
#define SWIGTYPE_p_FIX__BrokerOfCredit swig_types[24]
#define SWIGTYPE_p_FIX__CardIssNo swig_types[25]
#define SWIGTYPE_p_FIX__CashSettlAgentAcctName swig_types[26]
#define SWIGTYPE_p_FIX__CashSettlAgentAcctNum swig_types[27]
#define SWIGTYPE_p_FIX__CashSettlAgentCode swig_types[28]
#define SWIGTYPE_p_FIX__CashSettlAgentContactName swig_types[29]
#define SWIGTYPE_p_FIX__CashSettlAgentContactPhone swig_types[30]
#define SWIGTYPE_p_FIX__CashSettlAgentName swig_types[31]
#define SWIGTYPE_p_FIX__CharField swig_types[32]
#define SWIGTYPE_p_FIX__CheckSumField swig_types[33]
#define SWIGTYPE_p_FIX__ClearingAccount swig_types[34]
#define SWIGTYPE_p_FIX__ClearingFirm swig_types[35]
#define SWIGTYPE_p_FIX__ClientID swig_types[36]
#define SWIGTYPE_p_FIX__ConfigError swig_types[37]
#define SWIGTYPE_p_FIX__CustomerOrFirm swig_types[38]
#define SWIGTYPE_p_FIX__CxlType swig_types[39]
#define SWIGTYPE_p_FIX__DataDictionary swig_types[40]
#define SWIGTYPE_p_FIX__Dictionary swig_types[41]
#define SWIGTYPE_p_FIX__Dictionary__Data__const_iterator swig_types[42]
#define SWIGTYPE_p_FIX__DiscretionOffset swig_types[43]
#define SWIGTYPE_p_FIX__DlvyInst swig_types[44]
#define SWIGTYPE_p_FIX__DoNotSend swig_types[45]
#define SWIGTYPE_p_FIX__DoubleField swig_types[46]
#define SWIGTYPE_p_FIX__DuplicateFieldNumber swig_types[47]
#define SWIGTYPE_p_FIX__Exception swig_types[48]
#define SWIGTYPE_p_FIX__ExecBroker swig_types[49]
#define SWIGTYPE_p_FIX__ExecTransType swig_types[50]
#define SWIGTYPE_p_FIX__FieldBase swig_types[51]
#define SWIGTYPE_p_FIX__FieldConvertError swig_types[52]
#define SWIGTYPE_p_FIX__FieldMap swig_types[53]
#define SWIGTYPE_p_FIX__FieldMap__Fields__const_iterator swig_types[54]
#define SWIGTYPE_p_FIX__FieldMap__Groups__const_iterator swig_types[55]
#define SWIGTYPE_p_FIX__FieldNotFound swig_types[56]
#define SWIGTYPE_p_FIX__FileLog swig_types[57]
#define SWIGTYPE_p_FIX__FileLogFactory swig_types[58]
#define SWIGTYPE_p_FIX__FileStore swig_types[59]
#define SWIGTYPE_p_FIX__FileStoreFactory swig_types[60]
#define SWIGTYPE_p_FIX__FutSettDate swig_types[61]
#define SWIGTYPE_p_FIX__FutSettDate2 swig_types[62]
#define SWIGTYPE_p_FIX__Group swig_types[63]
#define SWIGTYPE_p_FIX__IDSource swig_types[64]
#define SWIGTYPE_p_FIX__IOException swig_types[65]
#define SWIGTYPE_p_FIX__IOIOthSvc swig_types[66]
#define SWIGTYPE_p_FIX__IOIShares swig_types[67]
#define SWIGTYPE_p_FIX__IncorrectDataFormat swig_types[68]
#define SWIGTYPE_p_FIX__IncorrectMessageStructure swig_types[69]
#define SWIGTYPE_p_FIX__IncorrectTagValue swig_types[70]
#define SWIGTYPE_p_FIX__Initiator swig_types[71]
#define SWIGTYPE_p_FIX__IntField swig_types[72]
#define SWIGTYPE_p_FIX__InvalidMessage swig_types[73]
#define SWIGTYPE_p_FIX__InvalidMessageType swig_types[74]
#define SWIGTYPE_p_FIX__InvalidTagNumber swig_types[75]
#define SWIGTYPE_p_FIX__LastShares swig_types[76]
#define SWIGTYPE_p_FIX__LegFutSettDate swig_types[77]
#define SWIGTYPE_p_FIX__LegSettlmntTyp swig_types[78]
#define SWIGTYPE_p_FIX__Log swig_types[79]
#define SWIGTYPE_p_FIX__LogFactory swig_types[80]
#define SWIGTYPE_p_FIX__MaturityDay swig_types[81]
#define SWIGTYPE_p_FIX__MemoryStore swig_types[82]
#define SWIGTYPE_p_FIX__MemoryStoreFactory swig_types[83]
#define SWIGTYPE_p_FIX__Message swig_types[84]
#define SWIGTYPE_p_FIX__MessageParseError swig_types[85]
#define SWIGTYPE_p_FIX__MessageStore swig_types[86]
#define SWIGTYPE_p_FIX__MessageStoreExceptionWrapper swig_types[87]
#define SWIGTYPE_p_FIX__MessageStoreFactory swig_types[88]
#define SWIGTYPE_p_FIX__MessageStoreFactoryExceptionWrapper swig_types[89]
#define SWIGTYPE_p_FIX__NoTagValue swig_types[90]
#define SWIGTYPE_p_FIX__NullApplication swig_types[91]
#define SWIGTYPE_p_FIX__OnBehalfOfSendingTime swig_types[92]
#define SWIGTYPE_p_FIX__OpenClose swig_types[93]
#define SWIGTYPE_p_FIX__OpenCloseSettleFlag swig_types[94]
#define SWIGTYPE_p_FIX__PegDifference swig_types[95]
#define SWIGTYPE_p_FIX__PutOrCall swig_types[96]
#define SWIGTYPE_p_FIX__QuoteAckStatus swig_types[97]
#define SWIGTYPE_p_FIX__RatioQty swig_types[98]
#define SWIGTYPE_p_FIX__RegistDetls swig_types[99]
#define SWIGTYPE_p_FIX__RejectLogon swig_types[100]
#define SWIGTYPE_p_FIX__RelatdSym swig_types[101]
#define SWIGTYPE_p_FIX__RepeatedTag swig_types[102]
#define SWIGTYPE_p_FIX__RepeatingGroupCountMismatch swig_types[103]
#define SWIGTYPE_p_FIX__RequiredTagMissing swig_types[104]
#define SWIGTYPE_p_FIX__Rule80A swig_types[105]
#define SWIGTYPE_p_FIX__RuntimeError swig_types[106]
#define SWIGTYPE_p_FIX__ScreenLog swig_types[107]
#define SWIGTYPE_p_FIX__ScreenLogFactory swig_types[108]
#define SWIGTYPE_p_FIX__SecuritySettlAgentAcctName swig_types[109]
#define SWIGTYPE_p_FIX__SecuritySettlAgentAcctNum swig_types[110]
#define SWIGTYPE_p_FIX__SecuritySettlAgentCode swig_types[111]
#define SWIGTYPE_p_FIX__SecuritySettlAgentContactName swig_types[112]
#define SWIGTYPE_p_FIX__SecuritySettlAgentContactPhone swig_types[113]
#define SWIGTYPE_p_FIX__SecuritySettlAgentName swig_types[114]
#define SWIGTYPE_p_FIX__Session swig_types[115]
#define SWIGTYPE_p_FIX__SessionID swig_types[116]
#define SWIGTYPE_p_FIX__SessionNotFound swig_types[117]
#define SWIGTYPE_p_FIX__SessionSettings swig_types[118]
#define SWIGTYPE_p_FIX__SettlBrkrCode swig_types[119]
#define SWIGTYPE_p_FIX__SettlDepositoryCode swig_types[120]
#define SWIGTYPE_p_FIX__SettlInstCode swig_types[121]
#define SWIGTYPE_p_FIX__SettlLocation swig_types[122]
#define SWIGTYPE_p_FIX__SettlmntTyp swig_types[123]
#define SWIGTYPE_p_FIX__Shares swig_types[124]
#define SWIGTYPE_p_FIX__SocketAcceptor swig_types[125]
#define SWIGTYPE_p_FIX__SocketCloseFailed swig_types[126]
#define SWIGTYPE_p_FIX__SocketException swig_types[127]
#define SWIGTYPE_p_FIX__SocketInitiator swig_types[128]
#define SWIGTYPE_p_FIX__SocketRecvFailed swig_types[129]
#define SWIGTYPE_p_FIX__SocketSendFailed swig_types[130]
#define SWIGTYPE_p_FIX__SpreadToBenchmark swig_types[131]
#define SWIGTYPE_p_FIX__StringField swig_types[132]
#define SWIGTYPE_p_FIX__SynchronizedApplication swig_types[133]
#define SWIGTYPE_p_FIX__TagNotDefinedForMessage swig_types[134]
#define SWIGTYPE_p_FIX__TagOutOfOrder swig_types[135]
#define SWIGTYPE_p_FIX__TotQuoteEntries swig_types[136]
#define SWIGTYPE_p_FIX__TotalNumSecurities swig_types[137]
#define SWIGTYPE_p_FIX__TotalNumSecurityTypes swig_types[138]
#define SWIGTYPE_p_FIX__TotalVolumeTradedDate swig_types[139]
#define SWIGTYPE_p_FIX__TotalVolumeTradedTime swig_types[140]
#define SWIGTYPE_p_FIX__TradeType swig_types[141]
#define SWIGTYPE_p_FIX__UnderlyingIDSource swig_types[142]
#define SWIGTYPE_p_FIX__UnderlyingMaturityDay swig_types[143]
#define SWIGTYPE_p_FIX__UnderlyingPutOrCall swig_types[144]
#define SWIGTYPE_p_FIX__UnsupportedMessageType swig_types[145]
#define SWIGTYPE_p_FIX__UnsupportedVersion swig_types[146]
#define SWIGTYPE_p_FIX__UtcDateField swig_types[147]
#define SWIGTYPE_p_FIX__UtcTimeOnlyField swig_types[148]
#define SWIGTYPE_p_FIX__UtcTimeStampField swig_types[149]
#define SWIGTYPE_p_Fields swig_types[150]
#define SWIGTYPE_p_Group swig_types[151]
#define SWIGTYPE_p_Groups swig_types[152]
#define SWIGTYPE_p_IntArray swig_types[153]
#define SWIGTYPE_p_IntField swig_types[154]
#define SWIGTYPE_p_Log swig_types[155]
#define SWIGTYPE_p_LogFactory swig_types[156]
#define SWIGTYPE_p_MessageStore swig_types[157]
#define SWIGTYPE_p_MessageStoreFactory swig_types[158]
#define SWIGTYPE_p_MsgType swig_types[159]
#define SWIGTYPE_p_Mutex swig_types[160]
#define SWIGTYPE_p_Responder swig_types[161]
#define SWIGTYPE_p_SenderCompID swig_types[162]
#define SWIGTYPE_p_SessionID swig_types[163]
#define SWIGTYPE_p_SessionTime swig_types[164]
#define SWIGTYPE_p_StringField swig_types[165]
#define SWIGTYPE_p_TYPE__Type swig_types[166]
#define SWIGTYPE_p_TargetCompID swig_types[167]
#define SWIGTYPE_p_UtcDate swig_types[168]
#define SWIGTYPE_p_UtcDateField swig_types[169]
#define SWIGTYPE_p_UtcDateOnly swig_types[170]
#define SWIGTYPE_p_UtcTimeOnly swig_types[171]
#define SWIGTYPE_p_UtcTimeStamp swig_types[172]
#define SWIGTYPE_p_bool swig_types[173]
#define SWIGTYPE_p_char swig_types[174]
#define SWIGTYPE_p_const_iterator swig_types[175]
#define SWIGTYPE_p_double swig_types[176]
#define SWIGTYPE_p_g_const_iterator swig_types[177]
#define SWIGTYPE_p_g_iterator swig_types[178]
#define SWIGTYPE_p_int swig_types[179]
#define SWIGTYPE_p_iterator swig_types[180]
#define SWIGTYPE_p_message_order swig_types[181]
#define SWIGTYPE_p_p_FIX__DataDictionary swig_types[182]
#define SWIGTYPE_p_std__istream swig_types[183]
#define SWIGTYPE_p_std__ostream swig_types[184]
#define SWIGTYPE_p_std__setTFIX__SessionID_t swig_types[185]
#define SWIGTYPE_p_std__string swig_types[186]
#define SWIGTYPE_p_std__string__size_type swig_types[187]
#define SWIGTYPE_p_std__vectorTstd__string_t swig_types[188]
static swig_type_info *swig_types[190];
static swig_module_info swig_module = {swig_types, 189, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires to use swig with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _quickfix.so
  ------------------------------------------------*/
#define SWIG_init    init_quickfix

#define SWIG_name    "_quickfix"

#define SWIGVERSION 0x010329 


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class PyObject_ptr {
  protected:
    PyObject *_obj;

  public:
    PyObject_ptr() :_obj(0)
    {
    }

    PyObject_ptr(const PyObject_ptr& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    PyObject_ptr(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) Py_XINCREF(_obj);
    }
    
    PyObject_ptr & operator=(const PyObject_ptr& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~PyObject_ptr() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct PyObject_var : PyObject_ptr {
    PyObject_var(PyObject* obj = 0) : PyObject_ptr(obj, false) { }
    
    PyObject_var & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


typedef int IntArray;


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}

SWIGINTERN IntArray *new_IntArray(size_t nelements){
    return (new int[nelements]);
  }
SWIGINTERN void delete_IntArray(IntArray *self){
    delete[] self;
  }
SWIGINTERN int IntArray___getitem__(IntArray *self,size_t index){
    return self[index];
  }

  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#ifndef LLONG_MIN
# define LLONG_MIN	LONG_LONG_MIN
#endif
#ifndef LLONG_MAX
# define LLONG_MAX	LONG_LONG_MAX
#endif
#ifndef ULLONG_MAX
# define ULLONG_MAX	ULONG_LONG_MAX
#endif


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN void IntArray___setitem__(IntArray *self,size_t index,int value){
    self[index] = value;
  }
SWIGINTERN int *IntArray_cast(IntArray *self){
    return self;
  }
SWIGINTERN IntArray *IntArray_frompointer(int *t){
    return static_cast< IntArray * >(t);
  }

#include <config.h>
#include "../C++/Exceptions.h"
#include "../C++/Field.h"
#include "../C++/Message.h"
#include "../C++/Group.h"
#include "../C++/DeprecatedFields.h"
#include "../C++/Values.h"
#include "../C++/DeprecatedValues.h"
#include "../C++/SessionID.h"
#include "../C++/Dictionary.h"
#include "../C++/SessionSettings.h"
#include "../C++/Session.h"
#include "../C++/Log.h"
#include "../C++/FileLog.h"
#include "../C++/MessageStore.h"
#include "../C++/FileStore.h"
#include "../C++/Application.h"
#include "../C++/Initiator.h"
#include "../C++/SocketInitiator.h"
#include "../C++/Acceptor.h"
#include "../C++/SocketAcceptor.h"
#include "../C++/DataDictionary.h"
using namespace FIX;


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor()
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
  if (PyString_Check(obj)) {
    char *cstr; int len;
    PyString_AsStringAndSize(obj, &cstr, &len);
    if (cptr)  {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
	*cptr = PyString_AsString(obj);
      }
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN std::string FIX_Exception___str__(FIX::Exception *self){
    return self->what();
  }

SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}

SWIGINTERN std::string FIX_FieldBase___str__(FIX::FieldBase *self){
    return self->getValue();
  }




SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Py_False) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    long v = 0;
    int res = SWIG_AddCast(SWIG_AsVal_long (obj, val ? &v : 0));
    if (SWIG_IsOK(res) && val) *val = v ? true : false;
    return res;
  }
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN std::string FIX_Message___str__(FIX::Message *self){
    return self->toString();
  }

SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN std::string FIX_SessionID___str__(FIX::SessionID *self){
    return self->toString();
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "QuickfixPython.h"

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Python extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

namespace Swig {

  GCItem::~GCItem()
  {
  }
  
  /* simple thread abstraction for pthreads on win32 */
  Director::~Director() {
    swig_decref(); 
  }

  /* wrap a python object, optionally taking ownership */
  Director::Director(PyObject* self) : swig_self(self), swig_disown_flag(false) {
    swig_incref();
  }



  bool Director::swig_up = false;

#ifdef __PTHREAD__
  pthread_mutex_t SWIG_MUTEX_INIT(Director::swig_mutex_up);
  pthread_mutex_t SWIG_MUTEX_INIT(Director::swig_mutex_own);
  pthread_t Director::swig_mutex_thread;
  bool Director::swig_mutex_active = false;
#endif


  void UnknownExceptionHandler::handler()  {
    try {
      throw;
    } catch (DirectorException& e) {
      std::cerr << "Swig Director exception caught:" << std::endl
                << e.getMessage() << std::endl;
    } catch (std::exception& e) {
      std::cerr << "std::exception caught: "<< e.what() << std::endl;
    } catch (...) {
      std::cerr << "Unknown exception caught." << std::endl;
    }

    std::cerr << std::endl
    	      << "Python interpreter traceback:" << std::endl;
    PyErr_Print();
    std::cerr << std::endl;

    std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
              << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
	      << std::endl
              << "Exception is being re-thrown, program will like abort/terminate." << std::endl;
    throw;
  }

}

#endif /* __cplusplus */

SwigDirector_Application::SwigDirector_Application(PyObject *self): FIX::Application(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((FIX::Application *)this, this); 
}




void SwigDirector_Application::onCreate(FIX::SessionID const &arg0) {
  if (swig_get_up()) {
    Swig::DirectorPureVirtualException::raise("FIX::Application::onCreate(arg0).");
  }
  swig::PyObject_var obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_FIX__SessionID,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call Application.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "onCreate";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"onCreate", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    {
      if( error != NULL ) {
        PyObject *ptype, *pvalue, *ptraceback;
        PyErr_Fetch( &ptype, &pvalue, &ptraceback );
        PyErr_Restore( ptype, pvalue, ptraceback );
        PyErr_Print();
        Py_Exit(1);
      }
      
    }
  }
}


void SwigDirector_Application::onLogon(FIX::SessionID const &arg0) {
  if (swig_get_up()) {
    Swig::DirectorPureVirtualException::raise("FIX::Application::onLogon(arg0).");
  }
  swig::PyObject_var obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_FIX__SessionID,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call Application.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char * const swig_method_name = "onLogon";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"onLogon", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    {
      if( error != NULL ) {
        PyObject *ptype, *pvalue, *ptraceback;
        PyErr_Fetch( &ptype, &pvalue, &ptraceback );
        PyErr_Restore( ptype, pvalue, ptraceback );
        PyErr_Print();
        Py_Exit(1);
      }
      
    }
  }
}


void SwigDirector_Application::onLogout(FIX::SessionID const &arg0) {
  if (swig_get_up()) {
    Swig::DirectorPureVirtualException::raise("FIX::Application::onLogout(arg0).");
  }
  swig::PyObject_var obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_FIX__SessionID,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call Application.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char * const swig_method_name = "onLogout";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"onLogout", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    {
      if( error != NULL ) {
        PyObject *ptype, *pvalue, *ptraceback;
        PyErr_Fetch( &ptype, &pvalue, &ptraceback );
        PyErr_Restore( ptype, pvalue, ptraceback );
        PyErr_Print();
        Py_Exit(1);
      }
      
    }
  }
}


void SwigDirector_Application::toApp(FIX::Message &arg0, FIX::SessionID const &arg1) throw(FIX::DoNotSend) {
  if (swig_get_up()) {
    Swig::DirectorPureVirtualException::raise("FIX::Application::toApp(arg0,arg1).");
  }
  swig::PyObject_var obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_FIX__Message,  0 );
  swig::PyObject_var obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg1), SWIGTYPE_p_FIX__SessionID,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call Application.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char * const swig_method_name = "toApp";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"toApp", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    {
      if( error != NULL ) {
        PyObject *ptype, *pvalue, *ptraceback;
        PyErr_Fetch( &ptype, &pvalue, &ptraceback );
        void *result;
        
        try {
          if( SWIG_ConvertPtr(pvalue, &result, SWIGTYPE_p_FIX__DoNotSend, 0 ) != -1 ) {
            throw *((DoNotSend*)result);
          } else {
            PyErr_Restore( ptype, pvalue, ptraceback );
            PyErr_Print();
            Py_Exit(1);
          }
        } catch( std::exception& e ) {
          std::cout << e.what() << std::endl;
          Py_XDECREF( ptype );
          Py_XDECREF( pvalue );
          Py_XDECREF( ptraceback );
          throw;
        } catch( ... ) {
          std::cout << "Fatal exception" << std::endl;
          Py_XDECREF( ptype );
          Py_XDECREF( pvalue );
          Py_XDECREF( ptraceback );
          throw;
        }
      }
      
    }
  }
}


void SwigDirector_Application::fromAdmin(FIX::Message const &arg0, FIX::SessionID const &arg1) throw(FIX::FieldNotFound, FIX::IncorrectDataFormat, FIX::IncorrectTagValue, FIX::RejectLogon) {
  if (swig_get_up()) {
    Swig::DirectorPureVirtualException::raise("FIX::Application::fromAdmin(arg0,arg1).");
  }
  swig::PyObject_var obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_FIX__Message,  0 );
  swig::PyObject_var obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg1), SWIGTYPE_p_FIX__SessionID,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call Application.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char * const swig_method_name = "fromAdmin";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"fromAdmin", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    {
      if( error != NULL ) {
        PyObject *ptype, *pvalue, *ptraceback;
        PyErr_Fetch( &ptype, &pvalue, &ptraceback );
        void *result;
        
        try {
          if( SWIG_ConvertPtr(pvalue, &result, SWIGTYPE_p_FIX__FieldNotFound, 0 ) != -1 ) {
            throw *((FieldNotFound*)result);
          } else if( SWIG_ConvertPtr(pvalue, &result, SWIGTYPE_p_FIX__IncorrectDataFormat, 0 ) != -1 ) {
            throw *((IncorrectDataFormat*)result);
          } else if( SWIG_ConvertPtr(pvalue, &result, SWIGTYPE_p_FIX__IncorrectTagValue, 0 ) != -1 ) {
            throw *((IncorrectTagValue*)result);
          } else if( SWIG_ConvertPtr(pvalue, &result, SWIGTYPE_p_FIX__RejectLogon, 0 ) != -1 ) {
            throw *((RejectLogon*)result);
          } else {
            PyErr_Restore( ptype, pvalue, ptraceback );
            PyErr_Print();
            Py_Exit(1);
          }
        } catch( std::exception& e ) {
          std::cout << e.what() << std::endl;
          Py_XDECREF( ptype );
          Py_XDECREF( pvalue );
          Py_XDECREF( ptraceback );
          throw;
        } catch( ... ) {
          std::cout << "Fatal exception" << std::endl;
          Py_XDECREF( ptype );
          Py_XDECREF( pvalue );
          Py_XDECREF( ptraceback );
          throw;
        }
      }
      
    }
  }
}


void SwigDirector_Application::fromApp(FIX::Message const &arg0, FIX::SessionID const &arg1) throw(FIX::FieldNotFound, FIX::IncorrectDataFormat, FIX::IncorrectTagValue, FIX::UnsupportedMessageType) {
  if (swig_get_up()) {
    Swig::DirectorPureVirtualException::raise("FIX::Application::fromApp(arg0,arg1).");
  }
  swig::PyObject_var obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_FIX__Message,  0 );
  swig::PyObject_var obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg1), SWIGTYPE_p_FIX__SessionID,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call Application.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char * const swig_method_name = "fromApp";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"fromApp", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    {
      if( error != NULL ) {
        PyObject *ptype, *pvalue, *ptraceback;
        PyErr_Fetch( &ptype, &pvalue, &ptraceback );
        void *result;
        
        try {
          if( SWIG_ConvertPtr(pvalue, &result, SWIGTYPE_p_FIX__FieldNotFound, 0 ) != -1 ) {
            throw *((FieldNotFound*)result);
          } else if( SWIG_ConvertPtr(pvalue, &result, SWIGTYPE_p_FIX__IncorrectDataFormat, 0 ) != -1 ) {
            throw *((IncorrectDataFormat*)result);
          } else if( SWIG_ConvertPtr(pvalue, &result, SWIGTYPE_p_FIX__IncorrectTagValue, 0 ) != -1 ) {
            throw *((IncorrectTagValue*)result);
          } else if( SWIG_ConvertPtr(pvalue, &result, SWIGTYPE_p_FIX__UnsupportedMessageType, 0 ) != -1 ) {
            throw *((UnsupportedMessageType*)result);
          } else {
            PyErr_Restore( ptype, pvalue, ptraceback );
            PyErr_Print();
            Py_Exit(1);
          }
        } catch( std::exception& e ) {
          std::cout << e.what() << std::endl;
          Py_XDECREF( ptype );
          Py_XDECREF( pvalue );
          Py_XDECREF( ptraceback );
          throw;
        } catch( ... ) {
          std::cout << "Fatal exception" << std::endl;
          Py_XDECREF( ptype );
          Py_XDECREF( pvalue );
          Py_XDECREF( ptraceback );
          throw;
        }
      }
      
    }
  }
}


SwigDirector_Application::~SwigDirector_Application() {
}

void SwigDirector_Application::toAdmin(FIX::Message &arg0, FIX::SessionID const &arg1) {
  if (swig_get_up()) {
    Swig::DirectorPureVirtualException::raise("FIX::Application::toAdmin(arg0,arg1).");
  }
  swig::PyObject_var obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg0), SWIGTYPE_p_FIX__Message,  0 );
  swig::PyObject_var obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(&arg1), SWIGTYPE_p_FIX__SessionID,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' unitialized, maybe you forgot to call Application.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char * const swig_method_name = "toAdmin";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::PyObject_var result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::PyObject_var result = PyObject_CallMethod(swig_get_self(), (char *)"toAdmin", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    {
      if( error != NULL ) {
        PyObject *ptype, *pvalue, *ptraceback;
        PyErr_Fetch( &ptype, &pvalue, &ptraceback );
        PyErr_Restore( ptype, pvalue, ptraceback );
        PyErr_Print();
        Py_Exit(1);
      }
      
    }
  }
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_new_IntArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  IntArray *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntArray",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  result = (IntArray *)new_IntArray(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntArray" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  delete_IntArray(arg1);
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  size_t arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntArray___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray___getitem__" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntArray___getitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (int)IntArray___getitem__(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  size_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntArray___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray___setitem__" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntArray___setitem__" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntArray___setitem__" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  IntArray___setitem__(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IntArray *arg1 = (IntArray *) 0 ;
  int *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntArray_cast",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IntArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray_cast" "', argument " "1"" of type '" "IntArray *""'"); 
  }
  arg1 = reinterpret_cast< IntArray * >(argp1);
  result = (int *)IntArray_cast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntArray_frompointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  IntArray *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntArray_frompointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntArray_frompointer" "', argument " "1"" of type '" "int *""'"); 
  }
  arg1 = reinterpret_cast< int * >(argp1);
  result = (IntArray *)IntArray_frompointer(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IntArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntArray_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IntArray, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Exception(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  FIX::Exception *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Exception",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Exception" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Exception" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Exception" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Exception" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::Exception *)new FIX::Exception((std::string const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Exception, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Exception(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Exception *arg1 = (FIX::Exception *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Exception",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Exception, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Exception" "', argument " "1"" of type '" "FIX::Exception *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Exception * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Exception *arg1 = (FIX::Exception *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Exception_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exception_type_set" "', argument " "1"" of type '" "FIX::Exception *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Exception * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Exception_type_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Exception_type_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->type = *arg2;
  
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Exception *arg1 = (FIX::Exception *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Exception_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exception_type_get" "', argument " "1"" of type '" "FIX::Exception *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Exception * >(argp1);
  {
    std::string const &_result_ref =  ((arg1)->type);
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_detail_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Exception *arg1 = (FIX::Exception *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Exception_detail_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exception_detail_set" "', argument " "1"" of type '" "FIX::Exception *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Exception * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Exception_detail_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Exception_detail_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->detail = *arg2;
  
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception_detail_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Exception *arg1 = (FIX::Exception *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Exception_detail_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exception_detail_get" "', argument " "1"" of type '" "FIX::Exception *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Exception * >(argp1);
  {
    std::string const &_result_ref =  ((arg1)->detail);
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exception___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Exception *arg1 = (FIX::Exception *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Exception___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Exception, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exception___str__" "', argument " "1"" of type '" "FIX::Exception *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Exception * >(argp1);
  result = FIX_Exception___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Exception_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Exception, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FieldNotFound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::FieldNotFound *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FieldNotFound",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FieldNotFound" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FieldNotFound" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FieldNotFound" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::FieldNotFound *)new FIX::FieldNotFound(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldNotFound, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldNotFound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::FieldNotFound *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FieldNotFound",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FieldNotFound" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::FieldNotFound *)new FIX::FieldNotFound(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldNotFound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldNotFound__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldNotFound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FieldNotFound")) SWIG_fail;
  result = (FIX::FieldNotFound *)new FIX::FieldNotFound();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldNotFound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldNotFound(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FieldNotFound__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FieldNotFound__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FieldNotFound__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_FieldNotFound'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldNotFound_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldNotFound *arg1 = (FIX::FieldNotFound *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldNotFound_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldNotFound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldNotFound_field_set" "', argument " "1"" of type '" "FIX::FieldNotFound *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldNotFound * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldNotFound_field_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->field = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldNotFound_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldNotFound *arg1 = (FIX::FieldNotFound *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldNotFound_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldNotFound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldNotFound_field_get" "', argument " "1"" of type '" "FIX::FieldNotFound *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldNotFound * >(argp1);
  result = (int) ((arg1)->field);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FieldNotFound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldNotFound *arg1 = (FIX::FieldNotFound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FieldNotFound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldNotFound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FieldNotFound" "', argument " "1"" of type '" "FIX::FieldNotFound *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldNotFound * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FieldNotFound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__FieldNotFound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FieldConvertError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::FieldConvertError *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FieldConvertError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FieldConvertError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FieldConvertError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::FieldConvertError *)new FIX::FieldConvertError((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldConvertError, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldConvertError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldConvertError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FieldConvertError")) SWIG_fail;
  result = (FIX::FieldConvertError *)new FIX::FieldConvertError();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldConvertError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldConvertError(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FieldConvertError__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FieldConvertError__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_FieldConvertError'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FieldConvertError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldConvertError *arg1 = (FIX::FieldConvertError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FieldConvertError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldConvertError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FieldConvertError" "', argument " "1"" of type '" "FIX::FieldConvertError *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldConvertError * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FieldConvertError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__FieldConvertError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MessageParseError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::MessageParseError *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MessageParseError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MessageParseError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MessageParseError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::MessageParseError *)new FIX::MessageParseError((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MessageParseError, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MessageParseError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageParseError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MessageParseError")) SWIG_fail;
  result = (FIX::MessageParseError *)new FIX::MessageParseError();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MessageParseError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MessageParseError(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MessageParseError__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MessageParseError__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_MessageParseError'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MessageParseError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageParseError *arg1 = (FIX::MessageParseError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MessageParseError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageParseError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MessageParseError" "', argument " "1"" of type '" "FIX::MessageParseError *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageParseError * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MessageParseError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__MessageParseError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InvalidMessage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::InvalidMessage *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InvalidMessage",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InvalidMessage" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InvalidMessage" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::InvalidMessage *)new FIX::InvalidMessage((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__InvalidMessage, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidMessage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::InvalidMessage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InvalidMessage")) SWIG_fail;
  result = (FIX::InvalidMessage *)new FIX::InvalidMessage();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__InvalidMessage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidMessage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InvalidMessage__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InvalidMessage__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_InvalidMessage'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InvalidMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::InvalidMessage *arg1 = (FIX::InvalidMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InvalidMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__InvalidMessage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InvalidMessage" "', argument " "1"" of type '" "FIX::InvalidMessage *""'"); 
  }
  arg1 = reinterpret_cast< FIX::InvalidMessage * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InvalidMessage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__InvalidMessage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ConfigError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::ConfigError *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ConfigError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConfigError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConfigError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::ConfigError *)new FIX::ConfigError((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ConfigError, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConfigError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ConfigError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ConfigError")) SWIG_fail;
  result = (FIX::ConfigError *)new FIX::ConfigError();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ConfigError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConfigError(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ConfigError__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ConfigError__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_ConfigError'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConfigError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ConfigError *arg1 = (FIX::ConfigError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ConfigError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ConfigError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConfigError" "', argument " "1"" of type '" "FIX::ConfigError *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ConfigError * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConfigError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__ConfigError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RuntimeError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::RuntimeError *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RuntimeError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RuntimeError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RuntimeError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::RuntimeError *)new FIX::RuntimeError((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RuntimeError, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RuntimeError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RuntimeError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RuntimeError")) SWIG_fail;
  result = (FIX::RuntimeError *)new FIX::RuntimeError();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RuntimeError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RuntimeError(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RuntimeError__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RuntimeError__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_RuntimeError'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RuntimeError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RuntimeError *arg1 = (FIX::RuntimeError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RuntimeError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RuntimeError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RuntimeError" "', argument " "1"" of type '" "FIX::RuntimeError *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RuntimeError * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RuntimeError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__RuntimeError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InvalidTagNumber__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::InvalidTagNumber *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_InvalidTagNumber",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InvalidTagNumber" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_InvalidTagNumber" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InvalidTagNumber" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::InvalidTagNumber *)new FIX::InvalidTagNumber(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__InvalidTagNumber, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidTagNumber__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::InvalidTagNumber *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InvalidTagNumber",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InvalidTagNumber" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::InvalidTagNumber *)new FIX::InvalidTagNumber(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__InvalidTagNumber, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidTagNumber__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::InvalidTagNumber *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InvalidTagNumber")) SWIG_fail;
  result = (FIX::InvalidTagNumber *)new FIX::InvalidTagNumber();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__InvalidTagNumber, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidTagNumber(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InvalidTagNumber__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InvalidTagNumber__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_InvalidTagNumber__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_InvalidTagNumber'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_InvalidTagNumber_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::InvalidTagNumber *arg1 = (FIX::InvalidTagNumber *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InvalidTagNumber_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__InvalidTagNumber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InvalidTagNumber_field_set" "', argument " "1"" of type '" "FIX::InvalidTagNumber *""'"); 
  }
  arg1 = reinterpret_cast< FIX::InvalidTagNumber * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InvalidTagNumber_field_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->field = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InvalidTagNumber_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::InvalidTagNumber *arg1 = (FIX::InvalidTagNumber *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:InvalidTagNumber_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__InvalidTagNumber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InvalidTagNumber_field_get" "', argument " "1"" of type '" "FIX::InvalidTagNumber *""'"); 
  }
  arg1 = reinterpret_cast< FIX::InvalidTagNumber * >(argp1);
  result = (int) ((arg1)->field);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InvalidTagNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::InvalidTagNumber *arg1 = (FIX::InvalidTagNumber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InvalidTagNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__InvalidTagNumber, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InvalidTagNumber" "', argument " "1"" of type '" "FIX::InvalidTagNumber *""'"); 
  }
  arg1 = reinterpret_cast< FIX::InvalidTagNumber * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InvalidTagNumber_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__InvalidTagNumber, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RequiredTagMissing__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::RequiredTagMissing *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RequiredTagMissing",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RequiredTagMissing" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RequiredTagMissing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RequiredTagMissing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::RequiredTagMissing *)new FIX::RequiredTagMissing(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RequiredTagMissing, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RequiredTagMissing__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::RequiredTagMissing *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RequiredTagMissing",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RequiredTagMissing" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::RequiredTagMissing *)new FIX::RequiredTagMissing(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RequiredTagMissing, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RequiredTagMissing__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RequiredTagMissing *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RequiredTagMissing")) SWIG_fail;
  result = (FIX::RequiredTagMissing *)new FIX::RequiredTagMissing();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RequiredTagMissing, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RequiredTagMissing(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RequiredTagMissing__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RequiredTagMissing__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RequiredTagMissing__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_RequiredTagMissing'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RequiredTagMissing_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RequiredTagMissing *arg1 = (FIX::RequiredTagMissing *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RequiredTagMissing_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RequiredTagMissing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RequiredTagMissing_field_set" "', argument " "1"" of type '" "FIX::RequiredTagMissing *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RequiredTagMissing * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RequiredTagMissing_field_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->field = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RequiredTagMissing_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RequiredTagMissing *arg1 = (FIX::RequiredTagMissing *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RequiredTagMissing_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RequiredTagMissing, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RequiredTagMissing_field_get" "', argument " "1"" of type '" "FIX::RequiredTagMissing *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RequiredTagMissing * >(argp1);
  result = (int) ((arg1)->field);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RequiredTagMissing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RequiredTagMissing *arg1 = (FIX::RequiredTagMissing *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RequiredTagMissing",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RequiredTagMissing, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RequiredTagMissing" "', argument " "1"" of type '" "FIX::RequiredTagMissing *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RequiredTagMissing * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RequiredTagMissing_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__RequiredTagMissing, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TagNotDefinedForMessage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::TagNotDefinedForMessage *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TagNotDefinedForMessage",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TagNotDefinedForMessage" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TagNotDefinedForMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TagNotDefinedForMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::TagNotDefinedForMessage *)new FIX::TagNotDefinedForMessage(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TagNotDefinedForMessage, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagNotDefinedForMessage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::TagNotDefinedForMessage *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TagNotDefinedForMessage",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TagNotDefinedForMessage" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::TagNotDefinedForMessage *)new FIX::TagNotDefinedForMessage(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TagNotDefinedForMessage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagNotDefinedForMessage__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TagNotDefinedForMessage *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TagNotDefinedForMessage")) SWIG_fail;
  result = (FIX::TagNotDefinedForMessage *)new FIX::TagNotDefinedForMessage();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TagNotDefinedForMessage, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagNotDefinedForMessage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TagNotDefinedForMessage__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TagNotDefinedForMessage__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TagNotDefinedForMessage__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_TagNotDefinedForMessage'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagNotDefinedForMessage_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TagNotDefinedForMessage *arg1 = (FIX::TagNotDefinedForMessage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagNotDefinedForMessage_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TagNotDefinedForMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagNotDefinedForMessage_field_set" "', argument " "1"" of type '" "FIX::TagNotDefinedForMessage *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TagNotDefinedForMessage * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagNotDefinedForMessage_field_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->field = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagNotDefinedForMessage_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TagNotDefinedForMessage *arg1 = (FIX::TagNotDefinedForMessage *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagNotDefinedForMessage_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TagNotDefinedForMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagNotDefinedForMessage_field_get" "', argument " "1"" of type '" "FIX::TagNotDefinedForMessage *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TagNotDefinedForMessage * >(argp1);
  result = (int) ((arg1)->field);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TagNotDefinedForMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TagNotDefinedForMessage *arg1 = (FIX::TagNotDefinedForMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TagNotDefinedForMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TagNotDefinedForMessage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TagNotDefinedForMessage" "', argument " "1"" of type '" "FIX::TagNotDefinedForMessage *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TagNotDefinedForMessage * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TagNotDefinedForMessage_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__TagNotDefinedForMessage, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NoTagValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::NoTagValue *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NoTagValue",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NoTagValue" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NoTagValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NoTagValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::NoTagValue *)new FIX::NoTagValue(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__NoTagValue, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NoTagValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::NoTagValue *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NoTagValue",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NoTagValue" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::NoTagValue *)new FIX::NoTagValue(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__NoTagValue, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NoTagValue__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::NoTagValue *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NoTagValue")) SWIG_fail;
  result = (FIX::NoTagValue *)new FIX::NoTagValue();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__NoTagValue, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NoTagValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NoTagValue__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_NoTagValue__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NoTagValue__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_NoTagValue'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NoTagValue_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::NoTagValue *arg1 = (FIX::NoTagValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NoTagValue_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__NoTagValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoTagValue_field_set" "', argument " "1"" of type '" "FIX::NoTagValue *""'"); 
  }
  arg1 = reinterpret_cast< FIX::NoTagValue * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NoTagValue_field_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->field = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NoTagValue_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::NoTagValue *arg1 = (FIX::NoTagValue *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NoTagValue_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__NoTagValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NoTagValue_field_get" "', argument " "1"" of type '" "FIX::NoTagValue *""'"); 
  }
  arg1 = reinterpret_cast< FIX::NoTagValue * >(argp1);
  result = (int) ((arg1)->field);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NoTagValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::NoTagValue *arg1 = (FIX::NoTagValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NoTagValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__NoTagValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NoTagValue" "', argument " "1"" of type '" "FIX::NoTagValue *""'"); 
  }
  arg1 = reinterpret_cast< FIX::NoTagValue * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NoTagValue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__NoTagValue, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IncorrectTagValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::IncorrectTagValue *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IncorrectTagValue",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IncorrectTagValue" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IncorrectTagValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IncorrectTagValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::IncorrectTagValue *)new FIX::IncorrectTagValue(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IncorrectTagValue, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncorrectTagValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::IncorrectTagValue *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IncorrectTagValue",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IncorrectTagValue" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::IncorrectTagValue *)new FIX::IncorrectTagValue(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IncorrectTagValue, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncorrectTagValue__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IncorrectTagValue *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IncorrectTagValue")) SWIG_fail;
  result = (FIX::IncorrectTagValue *)new FIX::IncorrectTagValue();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IncorrectTagValue, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncorrectTagValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IncorrectTagValue__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IncorrectTagValue__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IncorrectTagValue__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_IncorrectTagValue'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncorrectTagValue_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IncorrectTagValue *arg1 = (FIX::IncorrectTagValue *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IncorrectTagValue_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IncorrectTagValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncorrectTagValue_field_set" "', argument " "1"" of type '" "FIX::IncorrectTagValue *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IncorrectTagValue * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncorrectTagValue_field_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->field = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncorrectTagValue_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IncorrectTagValue *arg1 = (FIX::IncorrectTagValue *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IncorrectTagValue_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IncorrectTagValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncorrectTagValue_field_get" "', argument " "1"" of type '" "FIX::IncorrectTagValue *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IncorrectTagValue * >(argp1);
  result = (int) ((arg1)->field);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IncorrectTagValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IncorrectTagValue *arg1 = (FIX::IncorrectTagValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IncorrectTagValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IncorrectTagValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IncorrectTagValue" "', argument " "1"" of type '" "FIX::IncorrectTagValue *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IncorrectTagValue * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IncorrectTagValue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__IncorrectTagValue, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IncorrectDataFormat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::IncorrectDataFormat *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IncorrectDataFormat",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IncorrectDataFormat" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IncorrectDataFormat" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IncorrectDataFormat" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::IncorrectDataFormat *)new FIX::IncorrectDataFormat(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IncorrectDataFormat, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncorrectDataFormat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::IncorrectDataFormat *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IncorrectDataFormat",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IncorrectDataFormat" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::IncorrectDataFormat *)new FIX::IncorrectDataFormat(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IncorrectDataFormat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncorrectDataFormat__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IncorrectDataFormat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IncorrectDataFormat")) SWIG_fail;
  result = (FIX::IncorrectDataFormat *)new FIX::IncorrectDataFormat();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IncorrectDataFormat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncorrectDataFormat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IncorrectDataFormat__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IncorrectDataFormat__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IncorrectDataFormat__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_IncorrectDataFormat'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncorrectDataFormat_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IncorrectDataFormat *arg1 = (FIX::IncorrectDataFormat *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IncorrectDataFormat_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IncorrectDataFormat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncorrectDataFormat_field_set" "', argument " "1"" of type '" "FIX::IncorrectDataFormat *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IncorrectDataFormat * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncorrectDataFormat_field_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->field = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncorrectDataFormat_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IncorrectDataFormat *arg1 = (FIX::IncorrectDataFormat *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IncorrectDataFormat_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IncorrectDataFormat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncorrectDataFormat_field_get" "', argument " "1"" of type '" "FIX::IncorrectDataFormat *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IncorrectDataFormat * >(argp1);
  result = (int) ((arg1)->field);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IncorrectDataFormat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IncorrectDataFormat *arg1 = (FIX::IncorrectDataFormat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IncorrectDataFormat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IncorrectDataFormat, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IncorrectDataFormat" "', argument " "1"" of type '" "FIX::IncorrectDataFormat *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IncorrectDataFormat * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IncorrectDataFormat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__IncorrectDataFormat, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IncorrectMessageStructure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::IncorrectMessageStructure *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IncorrectMessageStructure",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IncorrectMessageStructure" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IncorrectMessageStructure" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::IncorrectMessageStructure *)new FIX::IncorrectMessageStructure((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IncorrectMessageStructure, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncorrectMessageStructure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IncorrectMessageStructure *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IncorrectMessageStructure")) SWIG_fail;
  result = (FIX::IncorrectMessageStructure *)new FIX::IncorrectMessageStructure();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IncorrectMessageStructure, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IncorrectMessageStructure(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IncorrectMessageStructure__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IncorrectMessageStructure__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_IncorrectMessageStructure'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IncorrectMessageStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IncorrectMessageStructure *arg1 = (FIX::IncorrectMessageStructure *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IncorrectMessageStructure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IncorrectMessageStructure, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IncorrectMessageStructure" "', argument " "1"" of type '" "FIX::IncorrectMessageStructure *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IncorrectMessageStructure * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IncorrectMessageStructure_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__IncorrectMessageStructure, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DuplicateFieldNumber__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::DuplicateFieldNumber *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DuplicateFieldNumber",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DuplicateFieldNumber" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuplicateFieldNumber" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::DuplicateFieldNumber *)new FIX::DuplicateFieldNumber((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DuplicateFieldNumber, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuplicateFieldNumber__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DuplicateFieldNumber *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DuplicateFieldNumber")) SWIG_fail;
  result = (FIX::DuplicateFieldNumber *)new FIX::DuplicateFieldNumber();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DuplicateFieldNumber, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DuplicateFieldNumber(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DuplicateFieldNumber__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DuplicateFieldNumber__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_DuplicateFieldNumber'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DuplicateFieldNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DuplicateFieldNumber *arg1 = (FIX::DuplicateFieldNumber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DuplicateFieldNumber",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DuplicateFieldNumber, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DuplicateFieldNumber" "', argument " "1"" of type '" "FIX::DuplicateFieldNumber *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DuplicateFieldNumber * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DuplicateFieldNumber_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__DuplicateFieldNumber, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_InvalidMessageType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::InvalidMessageType *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_InvalidMessageType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InvalidMessageType" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InvalidMessageType" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::InvalidMessageType *)new FIX::InvalidMessageType((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__InvalidMessageType, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidMessageType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::InvalidMessageType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InvalidMessageType")) SWIG_fail;
  result = (FIX::InvalidMessageType *)new FIX::InvalidMessageType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__InvalidMessageType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InvalidMessageType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_InvalidMessageType__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InvalidMessageType__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_InvalidMessageType'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InvalidMessageType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::InvalidMessageType *arg1 = (FIX::InvalidMessageType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InvalidMessageType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__InvalidMessageType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InvalidMessageType" "', argument " "1"" of type '" "FIX::InvalidMessageType *""'"); 
  }
  arg1 = reinterpret_cast< FIX::InvalidMessageType * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InvalidMessageType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__InvalidMessageType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnsupportedMessageType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::UnsupportedMessageType *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnsupportedMessageType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnsupportedMessageType" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnsupportedMessageType" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::UnsupportedMessageType *)new FIX::UnsupportedMessageType((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UnsupportedMessageType, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnsupportedMessageType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UnsupportedMessageType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UnsupportedMessageType")) SWIG_fail;
  result = (FIX::UnsupportedMessageType *)new FIX::UnsupportedMessageType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UnsupportedMessageType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnsupportedMessageType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UnsupportedMessageType__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UnsupportedMessageType__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_UnsupportedMessageType'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnsupportedMessageType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UnsupportedMessageType *arg1 = (FIX::UnsupportedMessageType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnsupportedMessageType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UnsupportedMessageType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnsupportedMessageType" "', argument " "1"" of type '" "FIX::UnsupportedMessageType *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UnsupportedMessageType * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnsupportedMessageType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__UnsupportedMessageType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnsupportedVersion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::UnsupportedVersion *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnsupportedVersion",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnsupportedVersion" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnsupportedVersion" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::UnsupportedVersion *)new FIX::UnsupportedVersion((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UnsupportedVersion, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnsupportedVersion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UnsupportedVersion *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UnsupportedVersion")) SWIG_fail;
  result = (FIX::UnsupportedVersion *)new FIX::UnsupportedVersion();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UnsupportedVersion, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnsupportedVersion(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UnsupportedVersion__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UnsupportedVersion__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_UnsupportedVersion'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnsupportedVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UnsupportedVersion *arg1 = (FIX::UnsupportedVersion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnsupportedVersion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UnsupportedVersion, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnsupportedVersion" "', argument " "1"" of type '" "FIX::UnsupportedVersion *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UnsupportedVersion * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnsupportedVersion_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__UnsupportedVersion, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TagOutOfOrder__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::TagOutOfOrder *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TagOutOfOrder",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TagOutOfOrder" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TagOutOfOrder" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TagOutOfOrder" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::TagOutOfOrder *)new FIX::TagOutOfOrder(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TagOutOfOrder, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagOutOfOrder__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::TagOutOfOrder *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TagOutOfOrder",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TagOutOfOrder" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::TagOutOfOrder *)new FIX::TagOutOfOrder(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TagOutOfOrder, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagOutOfOrder__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TagOutOfOrder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TagOutOfOrder")) SWIG_fail;
  result = (FIX::TagOutOfOrder *)new FIX::TagOutOfOrder();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TagOutOfOrder, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TagOutOfOrder(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TagOutOfOrder__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TagOutOfOrder__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TagOutOfOrder__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_TagOutOfOrder'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagOutOfOrder_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TagOutOfOrder *arg1 = (FIX::TagOutOfOrder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TagOutOfOrder_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TagOutOfOrder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagOutOfOrder_field_set" "', argument " "1"" of type '" "FIX::TagOutOfOrder *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TagOutOfOrder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TagOutOfOrder_field_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->field = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TagOutOfOrder_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TagOutOfOrder *arg1 = (FIX::TagOutOfOrder *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TagOutOfOrder_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TagOutOfOrder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TagOutOfOrder_field_get" "', argument " "1"" of type '" "FIX::TagOutOfOrder *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TagOutOfOrder * >(argp1);
  result = (int) ((arg1)->field);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TagOutOfOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TagOutOfOrder *arg1 = (FIX::TagOutOfOrder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TagOutOfOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TagOutOfOrder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TagOutOfOrder" "', argument " "1"" of type '" "FIX::TagOutOfOrder *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TagOutOfOrder * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TagOutOfOrder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__TagOutOfOrder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RepeatedTag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::RepeatedTag *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RepeatedTag",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RepeatedTag" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RepeatedTag" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RepeatedTag" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::RepeatedTag *)new FIX::RepeatedTag(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RepeatedTag, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RepeatedTag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::RepeatedTag *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RepeatedTag",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RepeatedTag" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::RepeatedTag *)new FIX::RepeatedTag(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RepeatedTag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RepeatedTag__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RepeatedTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RepeatedTag")) SWIG_fail;
  result = (FIX::RepeatedTag *)new FIX::RepeatedTag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RepeatedTag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RepeatedTag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RepeatedTag__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RepeatedTag__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RepeatedTag__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_RepeatedTag'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RepeatedTag_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RepeatedTag *arg1 = (FIX::RepeatedTag *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RepeatedTag_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RepeatedTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RepeatedTag_field_set" "', argument " "1"" of type '" "FIX::RepeatedTag *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RepeatedTag * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RepeatedTag_field_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->field = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RepeatedTag_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RepeatedTag *arg1 = (FIX::RepeatedTag *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RepeatedTag_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RepeatedTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RepeatedTag_field_get" "', argument " "1"" of type '" "FIX::RepeatedTag *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RepeatedTag * >(argp1);
  result = (int) ((arg1)->field);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RepeatedTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RepeatedTag *arg1 = (FIX::RepeatedTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RepeatedTag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RepeatedTag, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RepeatedTag" "', argument " "1"" of type '" "FIX::RepeatedTag *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RepeatedTag * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RepeatedTag_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__RepeatedTag, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RepeatingGroupCountMismatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::RepeatingGroupCountMismatch *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RepeatingGroupCountMismatch",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RepeatingGroupCountMismatch" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RepeatingGroupCountMismatch" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RepeatingGroupCountMismatch" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::RepeatingGroupCountMismatch *)new FIX::RepeatingGroupCountMismatch(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RepeatingGroupCountMismatch, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RepeatingGroupCountMismatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::RepeatingGroupCountMismatch *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RepeatingGroupCountMismatch",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RepeatingGroupCountMismatch" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::RepeatingGroupCountMismatch *)new FIX::RepeatingGroupCountMismatch(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RepeatingGroupCountMismatch, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RepeatingGroupCountMismatch__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RepeatingGroupCountMismatch *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RepeatingGroupCountMismatch")) SWIG_fail;
  result = (FIX::RepeatingGroupCountMismatch *)new FIX::RepeatingGroupCountMismatch();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RepeatingGroupCountMismatch, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RepeatingGroupCountMismatch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RepeatingGroupCountMismatch__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RepeatingGroupCountMismatch__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RepeatingGroupCountMismatch__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_RepeatingGroupCountMismatch'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RepeatingGroupCountMismatch_field_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RepeatingGroupCountMismatch *arg1 = (FIX::RepeatingGroupCountMismatch *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RepeatingGroupCountMismatch_field_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RepeatingGroupCountMismatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RepeatingGroupCountMismatch_field_set" "', argument " "1"" of type '" "FIX::RepeatingGroupCountMismatch *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RepeatingGroupCountMismatch * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RepeatingGroupCountMismatch_field_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->field = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RepeatingGroupCountMismatch_field_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RepeatingGroupCountMismatch *arg1 = (FIX::RepeatingGroupCountMismatch *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RepeatingGroupCountMismatch_field_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RepeatingGroupCountMismatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RepeatingGroupCountMismatch_field_get" "', argument " "1"" of type '" "FIX::RepeatingGroupCountMismatch *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RepeatingGroupCountMismatch * >(argp1);
  result = (int) ((arg1)->field);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RepeatingGroupCountMismatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RepeatingGroupCountMismatch *arg1 = (FIX::RepeatingGroupCountMismatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RepeatingGroupCountMismatch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RepeatingGroupCountMismatch, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RepeatingGroupCountMismatch" "', argument " "1"" of type '" "FIX::RepeatingGroupCountMismatch *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RepeatingGroupCountMismatch * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RepeatingGroupCountMismatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__RepeatingGroupCountMismatch, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DoNotSend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::DoNotSend *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoNotSend",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoNotSend" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoNotSend" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::DoNotSend *)new FIX::DoNotSend((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DoNotSend, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoNotSend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DoNotSend *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DoNotSend")) SWIG_fail;
  result = (FIX::DoNotSend *)new FIX::DoNotSend();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DoNotSend, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoNotSend(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DoNotSend__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DoNotSend__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_DoNotSend'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoNotSend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DoNotSend *arg1 = (FIX::DoNotSend *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DoNotSend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DoNotSend, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoNotSend" "', argument " "1"" of type '" "FIX::DoNotSend *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DoNotSend * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoNotSend_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__DoNotSend, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RejectLogon__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::RejectLogon *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RejectLogon",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RejectLogon" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RejectLogon" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::RejectLogon *)new FIX::RejectLogon((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RejectLogon, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RejectLogon__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RejectLogon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RejectLogon")) SWIG_fail;
  result = (FIX::RejectLogon *)new FIX::RejectLogon();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RejectLogon, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RejectLogon(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RejectLogon__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RejectLogon__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_RejectLogon'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RejectLogon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RejectLogon *arg1 = (FIX::RejectLogon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RejectLogon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RejectLogon, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RejectLogon" "', argument " "1"" of type '" "FIX::RejectLogon *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RejectLogon * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RejectLogon_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__RejectLogon, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SessionNotFound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::SessionNotFound *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SessionNotFound",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SessionNotFound" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionNotFound" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::SessionNotFound *)new FIX::SessionNotFound((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SessionNotFound, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SessionNotFound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionNotFound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SessionNotFound")) SWIG_fail;
  result = (FIX::SessionNotFound *)new FIX::SessionNotFound();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SessionNotFound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SessionNotFound(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SessionNotFound__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SessionNotFound__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SessionNotFound'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SessionNotFound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionNotFound *arg1 = (FIX::SessionNotFound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SessionNotFound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionNotFound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SessionNotFound" "', argument " "1"" of type '" "FIX::SessionNotFound *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionNotFound * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SessionNotFound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SessionNotFound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IOException__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::IOException *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IOException",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IOException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IOException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::IOException *)new FIX::IOException((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IOException, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOException__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IOException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IOException")) SWIG_fail;
  result = (FIX::IOException *)new FIX::IOException();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IOException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOException(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IOException__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IOException__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_IOException'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IOException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IOException *arg1 = (FIX::IOException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IOException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IOException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IOException" "', argument " "1"" of type '" "FIX::IOException *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IOException * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IOException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__IOException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SocketException__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketException *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SocketException")) SWIG_fail;
  result = (FIX::SocketException *)new FIX::SocketException();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketException__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::SocketException *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SocketException",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SocketException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::SocketException *)new FIX::SocketException((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketException, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketException(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SocketException__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SocketException__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SocketException'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SocketException_errorToWhat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketException *arg1 = (FIX::SocketException *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SocketException_errorToWhat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SocketException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SocketException_errorToWhat" "', argument " "1"" of type '" "FIX::SocketException *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SocketException * >(argp1);
  result = (arg1)->errorToWhat();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SocketException_error_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketException *arg1 = (FIX::SocketException *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SocketException_error_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SocketException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SocketException_error_set" "', argument " "1"" of type '" "FIX::SocketException *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SocketException * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SocketException_error_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->error = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SocketException_error_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketException *arg1 = (FIX::SocketException *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SocketException_error_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SocketException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SocketException_error_get" "', argument " "1"" of type '" "FIX::SocketException *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SocketException * >(argp1);
  result = (int) ((arg1)->error);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SocketException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketException *arg1 = (FIX::SocketException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SocketException",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SocketException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SocketException" "', argument " "1"" of type '" "FIX::SocketException *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SocketException * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SocketException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SocketException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SocketSendFailed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketSendFailed *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SocketSendFailed")) SWIG_fail;
  result = (FIX::SocketSendFailed *)new FIX::SocketSendFailed();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketSendFailed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketSendFailed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::SocketSendFailed *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SocketSendFailed",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SocketSendFailed" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketSendFailed" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::SocketSendFailed *)new FIX::SocketSendFailed((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketSendFailed, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketSendFailed(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SocketSendFailed__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SocketSendFailed__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SocketSendFailed'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SocketSendFailed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketSendFailed *arg1 = (FIX::SocketSendFailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SocketSendFailed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SocketSendFailed, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SocketSendFailed" "', argument " "1"" of type '" "FIX::SocketSendFailed *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SocketSendFailed * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SocketSendFailed_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SocketSendFailed, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SocketRecvFailed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::SocketRecvFailed *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SocketRecvFailed",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SocketRecvFailed" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::SocketRecvFailed *)new FIX::SocketRecvFailed(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketRecvFailed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketRecvFailed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::SocketRecvFailed *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SocketRecvFailed",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SocketRecvFailed" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketRecvFailed" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::SocketRecvFailed *)new FIX::SocketRecvFailed((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketRecvFailed, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketRecvFailed(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SocketRecvFailed__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SocketRecvFailed__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SocketRecvFailed'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SocketRecvFailed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketRecvFailed *arg1 = (FIX::SocketRecvFailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SocketRecvFailed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SocketRecvFailed, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SocketRecvFailed" "', argument " "1"" of type '" "FIX::SocketRecvFailed *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SocketRecvFailed * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SocketRecvFailed_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SocketRecvFailed, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SocketCloseFailed__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketCloseFailed *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SocketCloseFailed")) SWIG_fail;
  result = (FIX::SocketCloseFailed *)new FIX::SocketCloseFailed();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketCloseFailed, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketCloseFailed__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::SocketCloseFailed *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SocketCloseFailed",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SocketCloseFailed" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketCloseFailed" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::SocketCloseFailed *)new FIX::SocketCloseFailed((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketCloseFailed, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketCloseFailed(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SocketCloseFailed__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SocketCloseFailed__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SocketCloseFailed'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SocketCloseFailed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketCloseFailed *arg1 = (FIX::SocketCloseFailed *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SocketCloseFailed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SocketCloseFailed, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SocketCloseFailed" "', argument " "1"" of type '" "FIX::SocketCloseFailed *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SocketCloseFailed * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SocketCloseFailed_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SocketCloseFailed, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FieldBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::FieldBase *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FieldBase",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FieldBase" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FieldBase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FieldBase" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::FieldBase *)new FIX::FieldBase(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldBase, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FieldBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = (FIX::FieldBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FieldBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FieldBase" "', argument " "1"" of type '" "FIX::FieldBase *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldBase_setField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = (FIX::FieldBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldBase_setField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldBase_setField" "', argument " "1"" of type '" "FIX::FieldBase *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldBase_setField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setField(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldBase_setString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = (FIX::FieldBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldBase_setString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldBase_setString" "', argument " "1"" of type '" "FIX::FieldBase *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldBase_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldBase_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setString((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldBase_getField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = (FIX::FieldBase *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldBase_getField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldBase_getField" "', argument " "1"" of type '" "FIX::FieldBase const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  result = (int)((FIX::FieldBase const *)arg1)->getField();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldBase_getString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = (FIX::FieldBase *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldBase_getString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldBase_getString" "', argument " "1"" of type '" "FIX::FieldBase const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  {
    std::string const &_result_ref = ((FIX::FieldBase const *)arg1)->getString();
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldBase_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = (FIX::FieldBase *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldBase_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldBase_getValue" "', argument " "1"" of type '" "FIX::FieldBase const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  {
    std::string const &_result_ref = ((FIX::FieldBase const *)arg1)->getValue();
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldBase_getLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = (FIX::FieldBase *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldBase_getLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldBase_getLength" "', argument " "1"" of type '" "FIX::FieldBase const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  result = (int)((FIX::FieldBase const *)arg1)->getLength();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldBase_getTotal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = (FIX::FieldBase *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldBase_getTotal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldBase_getTotal" "', argument " "1"" of type '" "FIX::FieldBase const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  result = (int)((FIX::FieldBase const *)arg1)->getTotal();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldBase___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = (FIX::FieldBase *) 0 ;
  FIX::FieldBase *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldBase___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldBase___lt__" "', argument " "1"" of type '" "FIX::FieldBase const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__FieldBase,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldBase___lt__" "', argument " "2"" of type '" "FIX::FieldBase const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldBase___lt__" "', argument " "2"" of type '" "FIX::FieldBase const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::FieldBase * >(argp2);
  result = (bool)((FIX::FieldBase const *)arg1)->operator <((FIX::FieldBase const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldBase___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = (FIX::FieldBase *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldBase___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldBase___str__" "', argument " "1"" of type '" "FIX::FieldBase *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  result = FIX_FieldBase___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FieldBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__FieldBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  FIX::FieldBase *arg2 = 0 ;
  std::ostream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__FieldBase,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "FIX::FieldBase const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "FIX::FieldBase const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::FieldBase * >(argp2);
  {
    std::ostream &_result_ref = FIX::operator <<(*arg1,(FIX::FieldBase const &)*arg2);
    result = (std::ostream *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::string *arg2 = 0 ;
  FIX::StringField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StringField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (FIX::StringField *)new FIX::StringField(arg1,(std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__StringField, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::StringField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StringField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::StringField *)new FIX::StringField(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__StringField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StringField__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringField__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_StringField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringField_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = (FIX::StringField *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringField_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__StringField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringField_setValue" "', argument " "1"" of type '" "FIX::StringField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringField_setValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringField_setValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setValue((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringField_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = (FIX::StringField *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringField_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__StringField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringField_getValue" "', argument " "1"" of type '" "FIX::StringField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  {
    std::string const &_result_ref = ((FIX::StringField const *)arg1)->getValue();
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringField___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = (FIX::StringField *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringField___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__StringField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringField___lt__" "', argument " "1"" of type '" "FIX::StringField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringField___lt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringField___lt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)((FIX::StringField const *)arg1)->operator <((FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringField___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = (FIX::StringField *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringField___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__StringField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringField___gt__" "', argument " "1"" of type '" "FIX::StringField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringField___gt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringField___gt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)((FIX::StringField const *)arg1)->operator >((FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringField___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = (FIX::StringField *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringField___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__StringField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringField___eq__" "', argument " "1"" of type '" "FIX::StringField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringField___eq__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringField___eq__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)((FIX::StringField const *)arg1)->operator ==((FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringField___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = (FIX::StringField *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringField___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__StringField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringField___ne__" "', argument " "1"" of type '" "FIX::StringField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringField___ne__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringField___ne__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)((FIX::StringField const *)arg1)->operator !=((FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringField___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = (FIX::StringField *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringField___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__StringField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringField___le__" "', argument " "1"" of type '" "FIX::StringField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringField___le__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringField___le__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)((FIX::StringField const *)arg1)->operator <=((FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringField___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = (FIX::StringField *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringField___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__StringField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringField___ge__" "', argument " "1"" of type '" "FIX::StringField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringField___ge__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringField___ge__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)((FIX::StringField const *)arg1)->operator >=((FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = (FIX::StringField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StringField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__StringField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringField" "', argument " "1"" of type '" "FIX::StringField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringField_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__StringField, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  result = (bool)FIX::operator <((FIX::StringField const &)*arg1,(char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator <((char const *)arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___gt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__gt__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__gt__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  result = (bool)FIX::operator >((FIX::StringField const &)*arg1,(char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___gt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__gt__" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__gt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator >((char const *)arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  result = (bool)FIX::operator ==((FIX::StringField const &)*arg1,(char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator ==((char const *)arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  result = (bool)FIX::operator !=((FIX::StringField const &)*arg1,(char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator !=((char const *)arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___le____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__le__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__le__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__le__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  result = (bool)FIX::operator <=((FIX::StringField const &)*arg1,(char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___le____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__le__" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__le__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__le__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator <=((char const *)arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___ge____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ge__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ge__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ge__" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  result = (bool)FIX::operator >=((FIX::StringField const &)*arg1,(char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___ge____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ge__" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ge__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ge__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator >=((char const *)arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)FIX::operator <((FIX::StringField const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator <((std::string const &)*arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___gt____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__gt__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__gt__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)FIX::operator >((FIX::StringField const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___gt____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__gt__",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__gt__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__gt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__gt__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator >((std::string const &)*arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___gt__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___gt____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___gt____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___gt____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___gt____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)FIX::operator ==((FIX::StringField const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator ==((std::string const &)*arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)FIX::operator !=((FIX::StringField const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator !=((std::string const &)*arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___le____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__le__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__le__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__le__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__le__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)FIX::operator <=((FIX::StringField const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___le____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__le__",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__le__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__le__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__le__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__le__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator <=((std::string const &)*arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___le__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___le____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___le____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___le____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___le____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___ge____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::StringField *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ge__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ge__" "', argument " "1"" of type '" "FIX::StringField const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::StringField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ge__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ge__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)FIX::operator >=((FIX::StringField const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___ge____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::StringField *arg2 = 0 ;
  bool result;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ge__",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ge__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ge__" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__StringField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ge__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ge__" "', argument " "2"" of type '" "FIX::StringField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::StringField * >(argp2);
  result = (bool)FIX::operator >=((std::string const &)*arg1,(FIX::StringField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap___ge__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ge____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ge____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ge____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ge____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_CharField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char arg2 ;
  FIX::CharField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CharField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CharField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CharField" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (FIX::CharField *)new FIX::CharField(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CharField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CharField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::CharField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CharField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CharField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::CharField *)new FIX::CharField(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CharField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CharField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CharField__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CharField__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CharField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharField_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CharField *arg1 = (FIX::CharField *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CharField_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CharField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharField_setValue" "', argument " "1"" of type '" "FIX::CharField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CharField * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharField_setValue" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  (arg1)->setValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharField_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CharField *arg1 = (FIX::CharField *) 0 ;
  char result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharField_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CharField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharField_getValue" "', argument " "1"" of type '" "FIX::CharField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CharField * >(argp1);
  try {
    result = (char)((FIX::CharField const *)arg1)->getValue();
  }
  catch(FIX::IncorrectDataFormat &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
  }
  
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CharField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CharField *arg1 = (FIX::CharField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CharField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CharField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CharField" "', argument " "1"" of type '" "FIX::CharField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CharField * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CharField_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__CharField, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DoubleField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int arg3 ;
  FIX::DoubleField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DoubleField",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleField" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DoubleField" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (FIX::DoubleField *)new FIX::DoubleField(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DoubleField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  FIX::DoubleField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DoubleField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleField" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (FIX::DoubleField *)new FIX::DoubleField(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DoubleField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleField__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::DoubleField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::DoubleField *)new FIX::DoubleField(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DoubleField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DoubleField__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DoubleField__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DoubleField__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_DoubleField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleField_setValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DoubleField *arg1 = (FIX::DoubleField *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleField_setValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DoubleField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleField_setValue" "', argument " "1"" of type '" "FIX::DoubleField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DoubleField * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleField_setValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleField_setValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->setValue(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleField_setValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DoubleField *arg1 = (FIX::DoubleField *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleField_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DoubleField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleField_setValue" "', argument " "1"" of type '" "FIX::DoubleField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DoubleField * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleField_setValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->setValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleField_setValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__DoubleField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleField_setValue__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__DoubleField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleField_setValue__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'DoubleField_setValue'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleField_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DoubleField *arg1 = (FIX::DoubleField *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleField_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DoubleField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleField_getValue" "', argument " "1"" of type '" "FIX::DoubleField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DoubleField * >(argp1);
  try {
    result = (double)((FIX::DoubleField const *)arg1)->getValue();
  }
  catch(FIX::IncorrectDataFormat &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DoubleField *arg1 = (FIX::DoubleField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DoubleField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DoubleField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleField" "', argument " "1"" of type '" "FIX::DoubleField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DoubleField * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleField_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__DoubleField, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IntField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  FIX::IntField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IntField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (FIX::IntField *)new FIX::IntField(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IntField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::IntField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::IntField *)new FIX::IntField(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IntField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IntField__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IntField__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_IntField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntField_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IntField *arg1 = (FIX::IntField *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntField_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IntField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntField_setValue" "', argument " "1"" of type '" "FIX::IntField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IntField * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntField_setValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntField_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IntField *arg1 = (FIX::IntField *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntField_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IntField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntField_getValue" "', argument " "1"" of type '" "FIX::IntField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IntField * >(argp1);
  try {
    result = (int)((FIX::IntField const *)arg1)->getValue();
  }
  catch(FIX::IncorrectDataFormat &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IntField *arg1 = (FIX::IntField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IntField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntField" "', argument " "1"" of type '" "FIX::IntField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IntField * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntField_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__IntField, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BoolField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool arg2 ;
  FIX::BoolField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BoolField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BoolField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BoolField" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (FIX::BoolField *)new FIX::BoolField(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__BoolField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoolField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::BoolField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BoolField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BoolField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::BoolField *)new FIX::BoolField(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__BoolField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoolField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BoolField__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BoolField__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_BoolField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoolField_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::BoolField *arg1 = (FIX::BoolField *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BoolField_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__BoolField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolField_setValue" "', argument " "1"" of type '" "FIX::BoolField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::BoolField * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoolField_setValue" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoolField_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::BoolField *arg1 = (FIX::BoolField *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BoolField_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__BoolField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolField_getValue" "', argument " "1"" of type '" "FIX::BoolField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::BoolField * >(argp1);
  try {
    result = (bool)((FIX::BoolField const *)arg1)->getValue();
  }
  catch(FIX::IncorrectDataFormat &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BoolField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::BoolField *arg1 = (FIX::BoolField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BoolField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__BoolField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BoolField" "', argument " "1"" of type '" "FIX::BoolField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::BoolField * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BoolField_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__BoolField, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UtcTimeStampField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  UtcTimeStamp *arg2 = 0 ;
  bool arg3 ;
  FIX::UtcTimeStampField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_UtcTimeStampField",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UtcTimeStampField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UtcTimeStamp,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UtcTimeStampField" "', argument " "2"" of type '" "UtcTimeStamp const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UtcTimeStampField" "', argument " "2"" of type '" "UtcTimeStamp const &""'"); 
  }
  arg2 = reinterpret_cast< UtcTimeStamp * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_UtcTimeStampField" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (FIX::UtcTimeStampField *)new FIX::UtcTimeStampField(arg1,(UtcTimeStamp const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UtcTimeStampField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtcTimeStampField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  UtcTimeStamp *arg2 = 0 ;
  FIX::UtcTimeStampField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UtcTimeStampField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UtcTimeStampField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UtcTimeStamp,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UtcTimeStampField" "', argument " "2"" of type '" "UtcTimeStamp const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UtcTimeStampField" "', argument " "2"" of type '" "UtcTimeStamp const &""'"); 
  }
  arg2 = reinterpret_cast< UtcTimeStamp * >(argp2);
  result = (FIX::UtcTimeStampField *)new FIX::UtcTimeStampField(arg1,(UtcTimeStamp const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UtcTimeStampField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtcTimeStampField__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool arg2 ;
  FIX::UtcTimeStampField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UtcTimeStampField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UtcTimeStampField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UtcTimeStampField" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (FIX::UtcTimeStampField *)new FIX::UtcTimeStampField(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UtcTimeStampField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtcTimeStampField__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::UtcTimeStampField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UtcTimeStampField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UtcTimeStampField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::UtcTimeStampField *)new FIX::UtcTimeStampField(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UtcTimeStampField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtcTimeStampField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UtcTimeStampField__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_UtcTimeStamp, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_UtcTimeStampField__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_UtcTimeStampField__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_UtcTimeStamp, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_UtcTimeStampField__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_UtcTimeStampField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcTimeStampField_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeStampField *arg1 = (FIX::UtcTimeStampField *) 0 ;
  UtcTimeStamp *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcTimeStampField_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeStampField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcTimeStampField_setValue" "', argument " "1"" of type '" "FIX::UtcTimeStampField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeStampField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UtcTimeStamp,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcTimeStampField_setValue" "', argument " "2"" of type '" "UtcTimeStamp &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcTimeStampField_setValue" "', argument " "2"" of type '" "UtcTimeStamp &""'"); 
  }
  arg2 = reinterpret_cast< UtcTimeStamp * >(argp2);
  (arg1)->setValue(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcTimeStampField_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeStampField *arg1 = (FIX::UtcTimeStampField *) 0 ;
  UtcTimeStamp result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtcTimeStampField_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeStampField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcTimeStampField_getValue" "', argument " "1"" of type '" "FIX::UtcTimeStampField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeStampField * >(argp1);
  try {
    result = ((FIX::UtcTimeStampField const *)arg1)->getValue();
  }
  catch(FIX::IncorrectDataFormat &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new UtcTimeStamp(static_cast< const UtcTimeStamp& >(result))), SWIGTYPE_p_UtcTimeStamp, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcTimeStampField___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeStampField *arg1 = (FIX::UtcTimeStampField *) 0 ;
  FIX::UtcTimeStampField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcTimeStampField___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeStampField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcTimeStampField___lt__" "', argument " "1"" of type '" "FIX::UtcTimeStampField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeStampField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__UtcTimeStampField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcTimeStampField___lt__" "', argument " "2"" of type '" "FIX::UtcTimeStampField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcTimeStampField___lt__" "', argument " "2"" of type '" "FIX::UtcTimeStampField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::UtcTimeStampField * >(argp2);
  result = (bool)((FIX::UtcTimeStampField const *)arg1)->operator <((FIX::UtcTimeStampField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcTimeStampField___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeStampField *arg1 = (FIX::UtcTimeStampField *) 0 ;
  FIX::UtcTimeStampField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcTimeStampField___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeStampField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcTimeStampField___eq__" "', argument " "1"" of type '" "FIX::UtcTimeStampField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeStampField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__UtcTimeStampField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcTimeStampField___eq__" "', argument " "2"" of type '" "FIX::UtcTimeStampField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcTimeStampField___eq__" "', argument " "2"" of type '" "FIX::UtcTimeStampField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::UtcTimeStampField * >(argp2);
  result = (bool)((FIX::UtcTimeStampField const *)arg1)->operator ==((FIX::UtcTimeStampField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcTimeStampField___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeStampField *arg1 = (FIX::UtcTimeStampField *) 0 ;
  FIX::UtcTimeStampField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcTimeStampField___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeStampField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcTimeStampField___ne__" "', argument " "1"" of type '" "FIX::UtcTimeStampField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeStampField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__UtcTimeStampField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcTimeStampField___ne__" "', argument " "2"" of type '" "FIX::UtcTimeStampField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcTimeStampField___ne__" "', argument " "2"" of type '" "FIX::UtcTimeStampField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::UtcTimeStampField * >(argp2);
  result = (bool)((FIX::UtcTimeStampField const *)arg1)->operator !=((FIX::UtcTimeStampField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UtcTimeStampField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeStampField *arg1 = (FIX::UtcTimeStampField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UtcTimeStampField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeStampField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UtcTimeStampField" "', argument " "1"" of type '" "FIX::UtcTimeStampField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeStampField * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UtcTimeStampField_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__UtcTimeStampField, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UtcDateField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  UtcDate *arg2 = 0 ;
  FIX::UtcDateField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UtcDateField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UtcDateField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UtcDate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UtcDateField" "', argument " "2"" of type '" "UtcDate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UtcDateField" "', argument " "2"" of type '" "UtcDate const &""'"); 
  }
  arg2 = reinterpret_cast< UtcDate * >(argp2);
  result = (FIX::UtcDateField *)new FIX::UtcDateField(arg1,(UtcDate const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UtcDateField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtcDateField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::UtcDateField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UtcDateField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UtcDateField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::UtcDateField *)new FIX::UtcDateField(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UtcDateField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtcDateField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UtcDateField__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_UtcDate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_UtcDateField__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_UtcDateField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcDateField_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcDateField *arg1 = (FIX::UtcDateField *) 0 ;
  UtcDate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcDateField_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcDateField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcDateField_setValue" "', argument " "1"" of type '" "FIX::UtcDateField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcDateField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UtcDate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcDateField_setValue" "', argument " "2"" of type '" "UtcDate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcDateField_setValue" "', argument " "2"" of type '" "UtcDate &""'"); 
  }
  arg2 = reinterpret_cast< UtcDate * >(argp2);
  (arg1)->setValue(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcDateField_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcDateField *arg1 = (FIX::UtcDateField *) 0 ;
  UtcDate result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtcDateField_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcDateField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcDateField_getValue" "', argument " "1"" of type '" "FIX::UtcDateField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcDateField * >(argp1);
  try {
    result = ((FIX::UtcDateField const *)arg1)->getValue();
  }
  catch(FIX::IncorrectDataFormat &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new UtcDate(static_cast< const UtcDate& >(result))), SWIGTYPE_p_UtcDate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcDateField___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcDateField *arg1 = (FIX::UtcDateField *) 0 ;
  FIX::UtcDateField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcDateField___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcDateField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcDateField___lt__" "', argument " "1"" of type '" "FIX::UtcDateField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcDateField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__UtcDateField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcDateField___lt__" "', argument " "2"" of type '" "FIX::UtcDateField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcDateField___lt__" "', argument " "2"" of type '" "FIX::UtcDateField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::UtcDateField * >(argp2);
  result = (bool)((FIX::UtcDateField const *)arg1)->operator <((FIX::UtcDateField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcDateField___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcDateField *arg1 = (FIX::UtcDateField *) 0 ;
  FIX::UtcDateField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcDateField___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcDateField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcDateField___eq__" "', argument " "1"" of type '" "FIX::UtcDateField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcDateField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__UtcDateField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcDateField___eq__" "', argument " "2"" of type '" "FIX::UtcDateField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcDateField___eq__" "', argument " "2"" of type '" "FIX::UtcDateField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::UtcDateField * >(argp2);
  result = (bool)((FIX::UtcDateField const *)arg1)->operator ==((FIX::UtcDateField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcDateField___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcDateField *arg1 = (FIX::UtcDateField *) 0 ;
  FIX::UtcDateField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcDateField___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcDateField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcDateField___ne__" "', argument " "1"" of type '" "FIX::UtcDateField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcDateField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__UtcDateField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcDateField___ne__" "', argument " "2"" of type '" "FIX::UtcDateField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcDateField___ne__" "', argument " "2"" of type '" "FIX::UtcDateField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::UtcDateField * >(argp2);
  result = (bool)((FIX::UtcDateField const *)arg1)->operator !=((FIX::UtcDateField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UtcDateField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcDateField *arg1 = (FIX::UtcDateField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UtcDateField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcDateField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UtcDateField" "', argument " "1"" of type '" "FIX::UtcDateField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcDateField * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UtcDateField_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__UtcDateField, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UtcTimeOnlyField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  UtcTimeOnly *arg2 = 0 ;
  bool arg3 ;
  FIX::UtcTimeOnlyField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_UtcTimeOnlyField",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UtcTimeOnlyField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UtcTimeOnly,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UtcTimeOnlyField" "', argument " "2"" of type '" "UtcTimeOnly const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UtcTimeOnlyField" "', argument " "2"" of type '" "UtcTimeOnly const &""'"); 
  }
  arg2 = reinterpret_cast< UtcTimeOnly * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_UtcTimeOnlyField" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (FIX::UtcTimeOnlyField *)new FIX::UtcTimeOnlyField(arg1,(UtcTimeOnly const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UtcTimeOnlyField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtcTimeOnlyField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  UtcTimeOnly *arg2 = 0 ;
  FIX::UtcTimeOnlyField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UtcTimeOnlyField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UtcTimeOnlyField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UtcTimeOnly,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UtcTimeOnlyField" "', argument " "2"" of type '" "UtcTimeOnly const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UtcTimeOnlyField" "', argument " "2"" of type '" "UtcTimeOnly const &""'"); 
  }
  arg2 = reinterpret_cast< UtcTimeOnly * >(argp2);
  result = (FIX::UtcTimeOnlyField *)new FIX::UtcTimeOnlyField(arg1,(UtcTimeOnly const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UtcTimeOnlyField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtcTimeOnlyField__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool arg2 ;
  FIX::UtcTimeOnlyField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UtcTimeOnlyField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UtcTimeOnlyField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UtcTimeOnlyField" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (FIX::UtcTimeOnlyField *)new FIX::UtcTimeOnlyField(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UtcTimeOnlyField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtcTimeOnlyField__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::UtcTimeOnlyField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UtcTimeOnlyField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UtcTimeOnlyField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::UtcTimeOnlyField *)new FIX::UtcTimeOnlyField(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UtcTimeOnlyField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UtcTimeOnlyField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UtcTimeOnlyField__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_UtcTimeOnly, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_UtcTimeOnlyField__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_UtcTimeOnlyField__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_UtcTimeOnly, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_UtcTimeOnlyField__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_UtcTimeOnlyField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcTimeOnlyField_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeOnlyField *arg1 = (FIX::UtcTimeOnlyField *) 0 ;
  UtcTimeOnly *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcTimeOnlyField_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeOnlyField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcTimeOnlyField_setValue" "', argument " "1"" of type '" "FIX::UtcTimeOnlyField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeOnlyField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UtcTimeOnly,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcTimeOnlyField_setValue" "', argument " "2"" of type '" "UtcTimeOnly &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcTimeOnlyField_setValue" "', argument " "2"" of type '" "UtcTimeOnly &""'"); 
  }
  arg2 = reinterpret_cast< UtcTimeOnly * >(argp2);
  (arg1)->setValue(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcTimeOnlyField_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeOnlyField *arg1 = (FIX::UtcTimeOnlyField *) 0 ;
  UtcTimeOnly result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UtcTimeOnlyField_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeOnlyField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcTimeOnlyField_getValue" "', argument " "1"" of type '" "FIX::UtcTimeOnlyField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeOnlyField * >(argp1);
  try {
    result = ((FIX::UtcTimeOnlyField const *)arg1)->getValue();
  }
  catch(FIX::IncorrectDataFormat &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new UtcTimeOnly(static_cast< const UtcTimeOnly& >(result))), SWIGTYPE_p_UtcTimeOnly, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcTimeOnlyField___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeOnlyField *arg1 = (FIX::UtcTimeOnlyField *) 0 ;
  FIX::UtcTimeOnlyField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcTimeOnlyField___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeOnlyField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcTimeOnlyField___lt__" "', argument " "1"" of type '" "FIX::UtcTimeOnlyField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeOnlyField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__UtcTimeOnlyField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcTimeOnlyField___lt__" "', argument " "2"" of type '" "FIX::UtcTimeOnlyField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcTimeOnlyField___lt__" "', argument " "2"" of type '" "FIX::UtcTimeOnlyField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::UtcTimeOnlyField * >(argp2);
  result = (bool)((FIX::UtcTimeOnlyField const *)arg1)->operator <((FIX::UtcTimeOnlyField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcTimeOnlyField___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeOnlyField *arg1 = (FIX::UtcTimeOnlyField *) 0 ;
  FIX::UtcTimeOnlyField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcTimeOnlyField___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeOnlyField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcTimeOnlyField___eq__" "', argument " "1"" of type '" "FIX::UtcTimeOnlyField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeOnlyField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__UtcTimeOnlyField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcTimeOnlyField___eq__" "', argument " "2"" of type '" "FIX::UtcTimeOnlyField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcTimeOnlyField___eq__" "', argument " "2"" of type '" "FIX::UtcTimeOnlyField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::UtcTimeOnlyField * >(argp2);
  result = (bool)((FIX::UtcTimeOnlyField const *)arg1)->operator ==((FIX::UtcTimeOnlyField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UtcTimeOnlyField___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeOnlyField *arg1 = (FIX::UtcTimeOnlyField *) 0 ;
  FIX::UtcTimeOnlyField *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UtcTimeOnlyField___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeOnlyField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UtcTimeOnlyField___ne__" "', argument " "1"" of type '" "FIX::UtcTimeOnlyField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeOnlyField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__UtcTimeOnlyField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UtcTimeOnlyField___ne__" "', argument " "2"" of type '" "FIX::UtcTimeOnlyField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UtcTimeOnlyField___ne__" "', argument " "2"" of type '" "FIX::UtcTimeOnlyField const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::UtcTimeOnlyField * >(argp2);
  result = (bool)((FIX::UtcTimeOnlyField const *)arg1)->operator !=((FIX::UtcTimeOnlyField const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UtcTimeOnlyField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UtcTimeOnlyField *arg1 = (FIX::UtcTimeOnlyField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UtcTimeOnlyField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UtcTimeOnlyField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UtcTimeOnlyField" "', argument " "1"" of type '" "FIX::UtcTimeOnlyField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UtcTimeOnlyField * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UtcTimeOnlyField_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__UtcTimeOnlyField, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CheckSumField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  FIX::CheckSumField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CheckSumField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CheckSumField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CheckSumField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (FIX::CheckSumField *)new FIX::CheckSumField(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CheckSumField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CheckSumField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  FIX::CheckSumField *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CheckSumField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CheckSumField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (FIX::CheckSumField *)new FIX::CheckSumField(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CheckSumField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CheckSumField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CheckSumField__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CheckSumField__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CheckSumField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CheckSumField_setValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CheckSumField *arg1 = (FIX::CheckSumField *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CheckSumField_setValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CheckSumField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CheckSumField_setValue" "', argument " "1"" of type '" "FIX::CheckSumField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CheckSumField * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CheckSumField_setValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CheckSumField_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CheckSumField *arg1 = (FIX::CheckSumField *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CheckSumField_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CheckSumField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CheckSumField_getValue" "', argument " "1"" of type '" "FIX::CheckSumField const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CheckSumField * >(argp1);
  try {
    result = (int)((FIX::CheckSumField const *)arg1)->getValue();
  }
  catch(FIX::IncorrectDataFormat &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CheckSumField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CheckSumField *arg1 = (FIX::CheckSumField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CheckSumField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CheckSumField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CheckSumField" "', argument " "1"" of type '" "FIX::CheckSumField *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CheckSumField * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CheckSumField_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__CheckSumField, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FieldMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  message_order *arg1 = 0 ;
  FIX::FieldMap *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FieldMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_message_order,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FieldMap" "', argument " "1"" of type '" "message_order const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FieldMap" "', argument " "1"" of type '" "message_order const &""'"); 
  }
  arg1 = reinterpret_cast< message_order * >(argp1);
  result = (FIX::FieldMap *)new FIX::FieldMap((message_order const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FieldMap")) SWIG_fail;
  result = (FIX::FieldMap *)new FIX::FieldMap();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 ;
  FIX::FieldMap *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FieldMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FieldMap" "', argument " "1"" of type '" "int const []""'"); 
  } 
  arg1 = reinterpret_cast< int * >(argp1);
  result = (FIX::FieldMap *)new FIX::FieldMap((int const (*))arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldMap__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = 0 ;
  FIX::FieldMap *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FieldMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__FieldMap,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FieldMap" "', argument " "1"" of type '" "FIX::FieldMap const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FieldMap" "', argument " "1"" of type '" "FIX::FieldMap const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  result = (FIX::FieldMap *)new FIX::FieldMap((FIX::FieldMap const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FieldMap__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_message_order, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FieldMap__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_int, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FieldMap__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FieldMap__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_FieldMap'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FieldMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FieldMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FieldMap" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_setField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  FIX::FieldBase *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FieldMap_setField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_setField" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__FieldBase,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldMap_setField" "', argument " "2"" of type '" "FIX::FieldBase const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldMap_setField" "', argument " "2"" of type '" "FIX::FieldBase const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::FieldBase * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FieldMap_setField" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    (arg1)->setField((FIX::FieldBase const &)*arg2,arg3);
  }
  catch(FIX::RepeatedTag &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::RepeatedTag(static_cast< const FIX::RepeatedTag& >(_e))),SWIGTYPE_p_FIX__RepeatedTag,SWIG_POINTER_OWN), "FIX::RepeatedTag", SWIGTYPE_p_FIX__RepeatedTag); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_setField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  FIX::FieldBase *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_setField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_setField" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__FieldBase,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldMap_setField" "', argument " "2"" of type '" "FIX::FieldBase const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldMap_setField" "', argument " "2"" of type '" "FIX::FieldBase const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::FieldBase * >(argp2);
  try {
    (arg1)->setField((FIX::FieldBase const &)*arg2);
  }
  catch(FIX::RepeatedTag &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::RepeatedTag(static_cast< const FIX::RepeatedTag& >(_e))),SWIGTYPE_p_FIX__RepeatedTag,SWIG_POINTER_OWN), "FIX::RepeatedTag", SWIGTYPE_p_FIX__RepeatedTag); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_setField__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FieldMap_setField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_setField" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_setField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FieldMap_setField" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldMap_setField" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    (arg1)->setField(arg2,(std::string const &)*arg3);
  }
  catch(FIX::RepeatedTag &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::RepeatedTag(static_cast< const FIX::RepeatedTag& >(_e))),SWIGTYPE_p_FIX__RepeatedTag,SWIG_POINTER_OWN), "FIX::RepeatedTag", SWIGTYPE_p_FIX__RepeatedTag); SWIG_fail;
  }
  catch(FIX::NoTagValue &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::NoTagValue(static_cast< const FIX::NoTagValue& >(_e))),SWIGTYPE_p_FIX__NoTagValue,SWIG_POINTER_OWN), "FIX::NoTagValue", SWIGTYPE_p_FIX__NoTagValue); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_setField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__FieldBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FieldMap_setField__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__FieldBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FieldMap_setField__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FieldMap_setField__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FieldMap_setField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_getField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  FIX::FieldBase *arg2 = 0 ;
  FIX::FieldBase *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_getField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_getField" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__FieldBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldMap_getField" "', argument " "2"" of type '" "FIX::FieldBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldMap_getField" "', argument " "2"" of type '" "FIX::FieldBase &""'"); 
  }
  arg2 = reinterpret_cast< FIX::FieldBase * >(argp2);
  try {
    {
      FIX::FieldBase &_result_ref = ((FIX::FieldMap const *)arg1)->getField(*arg2);
      result = (FIX::FieldBase *) &_result_ref;
    }
  }
  catch(FIX::FieldNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_getField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_getField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_getField" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_getField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    {
      std::string const &_result_ref = ((FIX::FieldMap const *)arg1)->getField(arg2);
      result = (std::string *) &_result_ref;
    }
  }
  catch(FIX::FieldNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_getField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FIX__FieldBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FieldMap_getField__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FieldMap_getField__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FieldMap_getField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_getFieldRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  FIX::FieldBase *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_getFieldRef",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_getFieldRef" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_getFieldRef" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    {
      FIX::FieldBase const &_result_ref = ((FIX::FieldMap const *)arg1)->getFieldRef(arg2);
      result = (FIX::FieldBase *) &_result_ref;
    }
  }
  catch(FIX::FieldNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_getFieldPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  FIX::FieldBase *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_getFieldPtr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_getFieldPtr" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_getFieldPtr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (FIX::FieldBase *)((FIX::FieldMap const *)arg1)->getFieldPtr(arg2);
  }
  catch(FIX::FieldNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_isSetField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  FIX::FieldBase *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_isSetField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_isSetField" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__FieldBase,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldMap_isSetField" "', argument " "2"" of type '" "FIX::FieldBase const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldMap_isSetField" "', argument " "2"" of type '" "FIX::FieldBase const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::FieldBase * >(argp2);
  result = (bool)((FIX::FieldMap const *)arg1)->isSetField((FIX::FieldBase const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_isSetField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_isSetField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_isSetField" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_isSetField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((FIX::FieldMap const *)arg1)->isSetField(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_isSetField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__FieldBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FieldMap_isSetField__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FieldMap_isSetField__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FieldMap_isSetField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_removeField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_removeField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_removeField" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_removeField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->removeField(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_addGroup__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  FIX::FieldMap *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FieldMap_addGroup",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_addGroup" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_addGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__FieldMap,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FieldMap_addGroup" "', argument " "3"" of type '" "FIX::FieldMap const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldMap_addGroup" "', argument " "3"" of type '" "FIX::FieldMap const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::FieldMap * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FieldMap_addGroup" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->addGroup(arg2,(FIX::FieldMap const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_addGroup__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  FIX::FieldMap *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FieldMap_addGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_addGroup" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_addGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__FieldMap,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FieldMap_addGroup" "', argument " "3"" of type '" "FIX::FieldMap const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldMap_addGroup" "', argument " "3"" of type '" "FIX::FieldMap const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::FieldMap * >(argp3);
  (arg1)->addGroup(arg2,(FIX::FieldMap const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_addGroup(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FIX__FieldMap, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FieldMap_addGroup__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FIX__FieldMap, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FieldMap_addGroup__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FieldMap_addGroup'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_replaceGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  int arg3 ;
  FIX::FieldMap *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FieldMap_replaceGroup",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_replaceGroup" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_replaceGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FieldMap_replaceGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FIX__FieldMap,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FieldMap_replaceGroup" "', argument " "4"" of type '" "FIX::FieldMap &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldMap_replaceGroup" "', argument " "4"" of type '" "FIX::FieldMap &""'"); 
  }
  arg4 = reinterpret_cast< FIX::FieldMap * >(argp4);
  (arg1)->replaceGroup(arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_getGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  int arg3 ;
  FIX::FieldMap *arg4 = 0 ;
  FIX::FieldMap *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FieldMap_getGroup",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_getGroup" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_getGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FieldMap_getGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FIX__FieldMap,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FieldMap_getGroup" "', argument " "4"" of type '" "FIX::FieldMap &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldMap_getGroup" "', argument " "4"" of type '" "FIX::FieldMap &""'"); 
  }
  arg4 = reinterpret_cast< FIX::FieldMap * >(argp4);
  try {
    {
      FIX::FieldMap &_result_ref = ((FIX::FieldMap const *)arg1)->getGroup(arg2,arg3,*arg4);
      result = (FIX::FieldMap *) &_result_ref;
    }
  }
  catch(FIX::FieldNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_removeGroup__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FieldMap_removeGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_removeGroup" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_removeGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FieldMap_removeGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->removeGroup(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_removeGroup__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_removeGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_removeGroup" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_removeGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->removeGroup(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_removeGroup(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FieldMap_removeGroup__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FieldMap_removeGroup__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FieldMap_removeGroup'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_hasGroup__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_hasGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_hasGroup" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_hasGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((FIX::FieldMap const *)arg1)->hasGroup(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_hasGroup__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FieldMap_hasGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_hasGroup" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_hasGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FieldMap_hasGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((FIX::FieldMap const *)arg1)->hasGroup(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_hasGroup(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FieldMap_hasGroup__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FieldMap_hasGroup__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FieldMap_hasGroup'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_groupCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_groupCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_groupCount" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_groupCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((FIX::FieldMap const *)arg1)->groupCount(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldMap_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_clear" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_isEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldMap_isEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_isEmpty" "', argument " "1"" of type '" "FIX::FieldMap *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  result = (bool)(arg1)->isEmpty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_totalFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldMap_totalFields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_totalFields" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  result = (int)((FIX::FieldMap const *)arg1)->totalFields();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_calculateString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FieldMap_calculateString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_calculateString" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  {
    temp2 = std::string((char*)PyString_AsString(obj1));
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FieldMap_calculateString" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    std::string &_result_ref = ((FIX::FieldMap const *)arg1)->calculateString(*arg2,arg3);
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  {
    if( std::string("std::string &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_calculateString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_calculateString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_calculateString" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  {
    temp2 = std::string((char*)PyString_AsString(obj1));
    arg2 = &temp2;
  }
  {
    std::string &_result_ref = ((FIX::FieldMap const *)arg1)->calculateString(*arg2);
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  {
    if( std::string("std::string &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_calculateString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FieldMap_calculateString__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FieldMap_calculateString__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FieldMap_calculateString'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_calculateLength__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FieldMap_calculateLength",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_calculateLength" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_calculateLength" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FieldMap_calculateLength" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FieldMap_calculateLength" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (int)((FIX::FieldMap const *)arg1)->calculateLength(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_calculateLength__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FieldMap_calculateLength",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_calculateLength" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_calculateLength" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FieldMap_calculateLength" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((FIX::FieldMap const *)arg1)->calculateLength(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_calculateLength__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_calculateLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_calculateLength" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_calculateLength" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((FIX::FieldMap const *)arg1)->calculateLength(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_calculateLength__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldMap_calculateLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_calculateLength" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  result = (int)((FIX::FieldMap const *)arg1)->calculateLength();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_calculateLength(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FieldMap_calculateLength__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FieldMap_calculateLength__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FieldMap_calculateLength__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FieldMap_calculateLength__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FieldMap_calculateLength'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_calculateTotal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldMap_calculateTotal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_calculateTotal" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FieldMap_calculateTotal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((FIX::FieldMap const *)arg1)->calculateTotal(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_calculateTotal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldMap_calculateTotal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_calculateTotal" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  result = (int)((FIX::FieldMap const *)arg1)->calculateTotal();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_calculateTotal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FieldMap_calculateTotal__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FieldMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FieldMap_calculateTotal__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FieldMap_calculateTotal'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  FIX::FieldMap::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldMap_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_begin" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  result = ((FIX::FieldMap const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new FIX::FieldMap::iterator(static_cast< const FIX::FieldMap::iterator& >(result))), SWIGTYPE_p_FIX__FieldMap__Fields__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  FIX::FieldMap::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldMap_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_end" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  result = ((FIX::FieldMap const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new FIX::FieldMap::iterator(static_cast< const FIX::FieldMap::iterator& >(result))), SWIGTYPE_p_FIX__FieldMap__Fields__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_g_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  FIX::FieldMap::g_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldMap_g_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_g_begin" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  result = ((FIX::FieldMap const *)arg1)->g_begin();
  resultobj = SWIG_NewPointerObj((new FIX::FieldMap::g_iterator(static_cast< const FIX::FieldMap::g_iterator& >(result))), SWIGTYPE_p_FIX__FieldMap__Groups__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldMap_g_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldMap *arg1 = (FIX::FieldMap *) 0 ;
  FIX::FieldMap::g_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldMap_g_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldMap_g_end" "', argument " "1"" of type '" "FIX::FieldMap const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldMap * >(argp1);
  result = ((FIX::FieldMap const *)arg1)->g_end();
  resultobj = SWIG_NewPointerObj((new FIX::FieldMap::g_iterator(static_cast< const FIX::FieldMap::g_iterator& >(result))), SWIGTYPE_p_FIX__FieldMap__Groups__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FieldMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__FieldMap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int headerOrder_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable headerOrder is read-only.");
  return 1;
}


SWIGINTERN PyObject *headerOrder_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(FIX::headerOrder), SWIGTYPE_p_FIELD__Field,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Message__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Message")) SWIG_fail;
  result = (FIX::Message *)new FIX::Message();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Message, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Message__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  bool arg2 ;
  FIX::Message *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Message",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Message" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Message" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Message" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    result = (FIX::Message *)new FIX::Message((std::string const &)*arg1,arg2);
  }
  catch(FIX::InvalidMessage &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::InvalidMessage(static_cast< const FIX::InvalidMessage& >(_e))),SWIGTYPE_p_FIX__InvalidMessage,SWIG_POINTER_OWN), "FIX::InvalidMessage", SWIGTYPE_p_FIX__InvalidMessage); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Message, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Message__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::Message *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Message",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Message" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Message" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  try {
    result = (FIX::Message *)new FIX::Message((std::string const &)*arg1);
  }
  catch(FIX::InvalidMessage &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::InvalidMessage(static_cast< const FIX::InvalidMessage& >(_e))),SWIGTYPE_p_FIX__InvalidMessage,SWIG_POINTER_OWN), "FIX::InvalidMessage", SWIGTYPE_p_FIX__InvalidMessage); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Message, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Message__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::DataDictionary *arg2 = 0 ;
  bool arg3 ;
  FIX::Message *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Message",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Message" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Message" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__DataDictionary,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Message" "', argument " "2"" of type '" "FIX::DataDictionary const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Message" "', argument " "2"" of type '" "FIX::DataDictionary const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::DataDictionary * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Message" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    result = (FIX::Message *)new FIX::Message((std::string const &)*arg1,(FIX::DataDictionary const &)*arg2,arg3);
  }
  catch(FIX::InvalidMessage &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::InvalidMessage(static_cast< const FIX::InvalidMessage& >(_e))),SWIGTYPE_p_FIX__InvalidMessage,SWIG_POINTER_OWN), "FIX::InvalidMessage", SWIGTYPE_p_FIX__InvalidMessage); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Message, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Message__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::DataDictionary *arg2 = 0 ;
  FIX::Message *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Message",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Message" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Message" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__DataDictionary,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Message" "', argument " "2"" of type '" "FIX::DataDictionary const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Message" "', argument " "2"" of type '" "FIX::DataDictionary const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::DataDictionary * >(argp2);
  try {
    result = (FIX::Message *)new FIX::Message((std::string const &)*arg1,(FIX::DataDictionary const &)*arg2);
  }
  catch(FIX::InvalidMessage &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::InvalidMessage(static_cast< const FIX::InvalidMessage& >(_e))),SWIGTYPE_p_FIX__InvalidMessage,SWIG_POINTER_OWN), "FIX::InvalidMessage", SWIGTYPE_p_FIX__InvalidMessage); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Message, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Message__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = 0 ;
  FIX::Message *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Message",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Message,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Message" "', argument " "1"" of type '" "FIX::Message const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Message" "', argument " "1"" of type '" "FIX::Message const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  result = (FIX::Message *)new FIX::Message((FIX::Message const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Message, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Message(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Message__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Message__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Message__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__DataDictionary, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Message__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Message__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__DataDictionary, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Message__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Message'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_InitializeXML(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  bool result;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_InitializeXML",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_InitializeXML" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_InitializeXML" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (bool)FIX::Message::InitializeXML((std::string const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_addGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  FIX::Group *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_addGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_addGroup" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_addGroup" "', argument " "2"" of type '" "FIX::Group &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_addGroup" "', argument " "2"" of type '" "FIX::Group &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Group * >(argp2);
  (arg1)->addGroup(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_replaceGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  unsigned int arg2 ;
  FIX::Group *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Message_replaceGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_replaceGroup" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_replaceGroup" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Message_replaceGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_replaceGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  arg3 = reinterpret_cast< FIX::Group * >(argp3);
  (arg1)->replaceGroup(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_getGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  unsigned int arg2 ;
  FIX::Group *arg3 = 0 ;
  Group *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Message_getGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_getGroup" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_getGroup" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Message_getGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_getGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  arg3 = reinterpret_cast< FIX::Group * >(argp3);
  try {
    {
      Group &_result_ref = ((FIX::Message const *)arg1)->getGroup(arg2,*arg3);
      result = (Group *) &_result_ref;
    }
  }
  catch(FIX::FieldNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Group, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_removeGroup__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  unsigned int arg2 ;
  FIX::Group *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Message_removeGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_removeGroup" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_removeGroup" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Message_removeGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_removeGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  arg3 = reinterpret_cast< FIX::Group * >(argp3);
  (arg1)->removeGroup(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_removeGroup__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  FIX::Group *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_removeGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_removeGroup" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_removeGroup" "', argument " "2"" of type '" "FIX::Group &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_removeGroup" "', argument " "2"" of type '" "FIX::Group &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Group * >(argp2);
  (arg1)->removeGroup(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_removeGroup(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FIX__Group, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Message_removeGroup__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_FIX__Group, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Message_removeGroup__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_removeGroup'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_hasGroup__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  FIX::Group *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_hasGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_hasGroup" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Group,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_hasGroup" "', argument " "2"" of type '" "FIX::Group const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_hasGroup" "', argument " "2"" of type '" "FIX::Group const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Group * >(argp2);
  result = (bool)(arg1)->hasGroup((FIX::Group const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_hasGroup__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  unsigned int arg2 ;
  FIX::Group *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Message_hasGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_hasGroup" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_hasGroup" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Message_hasGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_hasGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  arg3 = reinterpret_cast< FIX::Group * >(argp3);
  result = (bool)(arg1)->hasGroup(arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_hasGroup(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__Group, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Message_hasGroup__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_FIX__Group, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Message_hasGroup__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_hasGroup'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Message_toString",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_toString" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_toString" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Message_toString" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Message_toString" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = ((FIX::Message const *)arg1)->toString(arg2,arg3,arg4);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Message_toString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_toString" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_toString" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Message_toString" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = ((FIX::Message const *)arg1)->toString(arg2,arg3);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  int arg2 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_toString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_toString" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_toString" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((FIX::Message const *)arg1)->toString(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_toString" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  result = ((FIX::Message const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toString__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Message_toString",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_toString" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    temp2 = std::string((char*)PyString_AsString(obj1));
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Message_toString" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Message_toString" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Message_toString" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    std::string &_result_ref = ((FIX::Message const *)arg1)->toString(*arg2,arg3,arg4,arg5);
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  {
    if( std::string("std::string &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toString__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Message_toString",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_toString" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    temp2 = std::string((char*)PyString_AsString(obj1));
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Message_toString" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Message_toString" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string &_result_ref = ((FIX::Message const *)arg1)->toString(*arg2,arg3,arg4);
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  {
    if( std::string("std::string &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toString__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Message_toString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_toString" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    temp2 = std::string((char*)PyString_AsString(obj1));
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Message_toString" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string &_result_ref = ((FIX::Message const *)arg1)->toString(*arg2,arg3);
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  {
    if( std::string("std::string &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toString__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_toString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_toString" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    temp2 = std::string((char*)PyString_AsString(obj1));
    arg2 = &temp2;
  }
  {
    std::string &_result_ref = ((FIX::Message const *)arg1)->toString(*arg2);
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  {
    if( std::string("std::string &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Message_toString__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Message_toString__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Message_toString__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Message_toString__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Message_toString__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Message_toString__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Message_toString__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Message_toString__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_toString'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toXML__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_toXML",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_toXML" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  result = ((FIX::Message const *)arg1)->toXML();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toXML__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_toXML",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_toXML" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    temp2 = std::string((char*)PyString_AsString(obj1));
    arg2 = &temp2;
  }
  {
    std::string &_result_ref = ((FIX::Message const *)arg1)->toXML(*arg2);
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  {
    if( std::string("std::string &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_toXML(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Message_toXML__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Message_toXML__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_toXML'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_reverseRoute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  FIX::Header *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_reverseRoute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_reverseRoute" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__FieldMap,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_reverseRoute" "', argument " "2"" of type '" "FIX::Header const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_reverseRoute" "', argument " "2"" of type '" "FIX::Header const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Header * >(argp2);
  (arg1)->reverseRoute((FIX::Header const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_setString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  FIX::DataDictionary *arg4 = (FIX::DataDictionary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Message_setString",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_setString" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Message_setString" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Message_setString" "', argument " "4"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg4 = reinterpret_cast< FIX::DataDictionary * >(argp4);
  try {
    (arg1)->setString((std::string const &)*arg2,arg3,(FIX::DataDictionary const *)arg4);
  }
  catch(FIX::InvalidMessage &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::InvalidMessage(static_cast< const FIX::InvalidMessage& >(_e))),SWIGTYPE_p_FIX__InvalidMessage,SWIG_POINTER_OWN), "FIX::InvalidMessage", SWIGTYPE_p_FIX__InvalidMessage); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_setString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Message_setString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_setString" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Message_setString" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    (arg1)->setString((std::string const &)*arg2,arg3);
  }
  catch(FIX::InvalidMessage &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::InvalidMessage(static_cast< const FIX::InvalidMessage& >(_e))),SWIGTYPE_p_FIX__InvalidMessage,SWIG_POINTER_OWN), "FIX::InvalidMessage", SWIGTYPE_p_FIX__InvalidMessage); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_setString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_setString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_setString" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    (arg1)->setString((std::string const &)*arg2);
  }
  catch(FIX::InvalidMessage &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::InvalidMessage(static_cast< const FIX::InvalidMessage& >(_e))),SWIGTYPE_p_FIX__InvalidMessage,SWIG_POINTER_OWN), "FIX::InvalidMessage", SWIGTYPE_p_FIX__InvalidMessage); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_setString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Message_setString__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Message_setString__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_FIX__DataDictionary, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Message_setString__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_setString'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_setGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string *arg2 = 0 ;
  FIX::FieldBase *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string::size_type *arg5 = 0 ;
  FIX::FieldMap *arg6 = 0 ;
  DataDictionary *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Message_setGroup",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_setGroup" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_setGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_setGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__FieldBase,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Message_setGroup" "', argument " "3"" of type '" "FIX::FieldBase const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_setGroup" "', argument " "3"" of type '" "FIX::FieldBase const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::FieldBase * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Message_setGroup" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_setGroup" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__string__size_type,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Message_setGroup" "', argument " "5"" of type '" "std::string::size_type &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_setGroup" "', argument " "5"" of type '" "std::string::size_type &""'"); 
  }
  arg5 = reinterpret_cast< std::string::size_type * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_FIX__FieldMap,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Message_setGroup" "', argument " "6"" of type '" "FIX::FieldMap &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_setGroup" "', argument " "6"" of type '" "FIX::FieldMap &""'"); 
  }
  arg6 = reinterpret_cast< FIX::FieldMap * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_DataDictionary,  0  | 0);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "Message_setGroup" "', argument " "7"" of type '" "DataDictionary const &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_setGroup" "', argument " "7"" of type '" "DataDictionary const &""'"); 
  }
  arg7 = reinterpret_cast< DataDictionary * >(argp7);
  (arg1)->setGroup((std::string const &)*arg2,(FIX::FieldBase const &)*arg3,(std::string const &)*arg4,*arg5,*arg6,(DataDictionary const &)*arg7);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg4->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_setStringHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_setStringHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_setStringHeader" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_setStringHeader" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_setStringHeader" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setStringHeader((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_getHeader__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  FIX::Header *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_getHeader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_getHeader" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    FIX::Header const &_result_ref = ((FIX::Message const *)arg1)->getHeader();
    result = (FIX::Header *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_getHeader__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  FIX::Header *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_getHeader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_getHeader" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    FIX::Header &_result_ref = (arg1)->getHeader();
    result = (FIX::Header *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_getHeader(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Message_getHeader__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Message_getHeader__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_getHeader'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_getTrailer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  FIX::Header *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_getTrailer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_getTrailer" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    FIX::Header const &_result_ref = ((FIX::Message const *)arg1)->getTrailer();
    result = (FIX::Header *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_getTrailer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  FIX::Trailer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_getTrailer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_getTrailer" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    FIX::Trailer &_result_ref = (arg1)->getTrailer();
    result = (FIX::Trailer *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FieldMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_getTrailer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Message_getTrailer__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Message_getTrailer__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_getTrailer'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_hasValidStructure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  int *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_hasValidStructure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_hasValidStructure" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    SWIG_AsVal_int(obj1, &temp2);
    arg2 = &temp2;
  }
  result = (bool)((FIX::Message const *)arg1)->hasValidStructure(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("int &") == "int &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyInt_FromLong(*arg2) );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_bodyLength__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Message_bodyLength",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_bodyLength" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_bodyLength" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Message_bodyLength" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Message_bodyLength" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (int)((FIX::Message const *)arg1)->bodyLength(arg2,arg3,arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_bodyLength__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Message_bodyLength",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_bodyLength" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_bodyLength" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Message_bodyLength" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)((FIX::Message const *)arg1)->bodyLength(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_bodyLength__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_bodyLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_bodyLength" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_bodyLength" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((FIX::Message const *)arg1)->bodyLength(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_bodyLength__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_bodyLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_bodyLength" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  result = (int)((FIX::Message const *)arg1)->bodyLength();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_bodyLength(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Message_bodyLength__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Message_bodyLength__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Message_bodyLength__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Message_bodyLength__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_bodyLength'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_checkSum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_checkSum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_checkSum" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Message_checkSum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((FIX::Message const *)arg1)->checkSum(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_checkSum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_checkSum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_checkSum" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  result = (int)((FIX::Message const *)arg1)->checkSum();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_checkSum(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Message_checkSum__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Message_checkSum__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_checkSum'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isAdmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_isAdmin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_isAdmin" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  result = (bool)((FIX::Message const *)arg1)->isAdmin();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isApp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_isApp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_isApp" "', argument " "1"" of type '" "FIX::Message const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  result = (bool)((FIX::Message const *)arg1)->isApp();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_isEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_isEmpty" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  result = (bool)(arg1)->isEmpty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_clear" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isAdminMsgType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MsgType *arg1 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_isAdminMsgType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_MsgType,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_isAdminMsgType" "', argument " "1"" of type '" "MsgType const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_isAdminMsgType" "', argument " "1"" of type '" "MsgType const &""'"); 
  }
  arg1 = reinterpret_cast< MsgType * >(argp1);
  result = (bool)FIX::Message::isAdminMsgType((MsgType const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isHeaderField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool result;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_isHeaderField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Message_isHeaderField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (bool)FIX::Message::isHeaderField(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isHeaderField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = 0 ;
  DataDictionary *arg2 = (DataDictionary *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_isHeaderField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__FieldBase,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_isHeaderField" "', argument " "1"" of type '" "FIX::FieldBase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_isHeaderField" "', argument " "1"" of type '" "FIX::FieldBase const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_isHeaderField" "', argument " "2"" of type '" "DataDictionary const *""'"); 
  }
  arg2 = reinterpret_cast< DataDictionary * >(argp2);
  result = (bool)FIX::Message::isHeaderField((FIX::FieldBase const &)*arg1,(DataDictionary const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isHeaderField__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_isHeaderField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__FieldBase,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_isHeaderField" "', argument " "1"" of type '" "FIX::FieldBase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_isHeaderField" "', argument " "1"" of type '" "FIX::FieldBase const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  result = (bool)FIX::Message::isHeaderField((FIX::FieldBase const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isHeaderField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__FieldBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Message_isHeaderField__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Message_isHeaderField__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__FieldBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_DataDictionary, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Message_isHeaderField__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_isHeaderField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isTrailerField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool result;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_isTrailerField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Message_isTrailerField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (bool)FIX::Message::isTrailerField(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isTrailerField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = 0 ;
  DataDictionary *arg2 = (DataDictionary *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_isTrailerField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__FieldBase,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_isTrailerField" "', argument " "1"" of type '" "FIX::FieldBase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_isTrailerField" "', argument " "1"" of type '" "FIX::FieldBase const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_isTrailerField" "', argument " "2"" of type '" "DataDictionary const *""'"); 
  }
  arg2 = reinterpret_cast< DataDictionary * >(argp2);
  result = (bool)FIX::Message::isTrailerField((FIX::FieldBase const &)*arg1,(DataDictionary const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isTrailerField__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FieldBase *arg1 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_isTrailerField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__FieldBase,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_isTrailerField" "', argument " "1"" of type '" "FIX::FieldBase const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_isTrailerField" "', argument " "1"" of type '" "FIX::FieldBase const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::FieldBase * >(argp1);
  result = (bool)FIX::Message::isTrailerField((FIX::FieldBase const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_isTrailerField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__FieldBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Message_isTrailerField__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Message_isTrailerField__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__FieldBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_DataDictionary, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Message_isTrailerField__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_isTrailerField'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_getSessionID__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string *arg2 = 0 ;
  SessionID result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_getSessionID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_getSessionID" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_getSessionID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_getSessionID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (arg1)->getSessionID((std::string const &)*arg2);
  }
  catch(FIX::FieldNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new SessionID(static_cast< const SessionID& >(result))), SWIGTYPE_p_SessionID, SWIG_POINTER_OWN |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_getSessionID__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  SessionID result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message_getSessionID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_getSessionID" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  try {
    result = (arg1)->getSessionID();
  }
  catch(FIX::FieldNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new SessionID(static_cast< const SessionID& >(result))), SWIGTYPE_p_SessionID, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_getSessionID(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Message_getSessionID__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Message_getSessionID__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Message_getSessionID'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message_setSessionID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  SessionID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Message_setSessionID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message_setSessionID" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Message_setSessionID" "', argument " "2"" of type '" "SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Message_setSessionID" "', argument " "2"" of type '" "SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< SessionID * >(argp2);
  (arg1)->setSessionID((SessionID const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Message___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Message___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Message___str__" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  result = FIX_Message___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Message(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = (FIX::Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Message",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Message, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Message" "', argument " "1"" of type '" "FIX::Message *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Message_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Message, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  FIX::Message *arg2 = 0 ;
  std::ostream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  {
    std::ostream &_result_ref = FIX::operator <<(*arg1,(FIX::Message const &)*arg2);
    result = (std::ostream *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_identifyType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  MsgType result;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:identifyType",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "identifyType" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "identifyType" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  try {
    result = FIX::identifyType((std::string const &)*arg1);
  }
  catch(FIX::MessageParseError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::MessageParseError(static_cast< const FIX::MessageParseError& >(_e))),SWIGTYPE_p_FIX__MessageParseError,SWIG_POINTER_OWN), "FIX::MessageParseError", SWIGTYPE_p_FIX__MessageParseError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new MsgType(static_cast< const MsgType& >(result))), SWIGTYPE_p_MsgType, SWIG_POINTER_OWN |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Group__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  FIX::Group *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Group",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Group" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Group" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (FIX::Group *)new FIX::Group(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Group, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Group__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int *arg3 ;
  FIX::Group *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Group",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Group" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Group" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Group" "', argument " "3"" of type '" "int const []""'"); 
  } 
  arg3 = reinterpret_cast< int * >(argp3);
  result = (FIX::Group *)new FIX::Group(arg1,arg2,(int const (*))arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Group, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Group__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  message_order *arg3 = 0 ;
  FIX::Group *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Group",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Group" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Group" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_message_order,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Group" "', argument " "3"" of type '" "message_order const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Group" "', argument " "3"" of type '" "message_order const &""'"); 
  }
  arg3 = reinterpret_cast< message_order * >(argp3);
  result = (FIX::Group *)new FIX::Group(arg1,arg2,(message_order const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Group, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Group__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Group *arg1 = 0 ;
  FIX::Group *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Group",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Group,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Group" "', argument " "1"" of type '" "FIX::Group const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Group" "', argument " "1"" of type '" "FIX::Group const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Group * >(argp1);
  result = (FIX::Group *)new FIX::Group((FIX::Group const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Group, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Group(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__Group, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Group__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Group__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_message_order, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Group__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_int, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Group__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Group'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Group_field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Group *arg1 = (FIX::Group *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Group_field",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Group, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_field" "', argument " "1"" of type '" "FIX::Group const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Group * >(argp1);
  result = (int)((FIX::Group const *)arg1)->field();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Group_delim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Group *arg1 = (FIX::Group *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Group_delim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Group, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_delim" "', argument " "1"" of type '" "FIX::Group const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Group * >(argp1);
  result = (int)((FIX::Group const *)arg1)->delim();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Group_addGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Group *arg1 = (FIX::Group *) 0 ;
  FIX::Group *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Group_addGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Group, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_addGroup" "', argument " "1"" of type '" "FIX::Group *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Group * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_addGroup" "', argument " "2"" of type '" "FIX::Group &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Group_addGroup" "', argument " "2"" of type '" "FIX::Group &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Group * >(argp2);
  (arg1)->addGroup(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Group_replaceGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Group *arg1 = (FIX::Group *) 0 ;
  unsigned int arg2 ;
  FIX::Group *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Group_replaceGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Group, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_replaceGroup" "', argument " "1"" of type '" "FIX::Group *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Group * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Group_replaceGroup" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Group_replaceGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Group_replaceGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  arg3 = reinterpret_cast< FIX::Group * >(argp3);
  (arg1)->replaceGroup(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Group_getGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Group *arg1 = (FIX::Group *) 0 ;
  unsigned int arg2 ;
  FIX::Group *arg3 = 0 ;
  FIX::Group *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Group_getGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Group, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_getGroup" "', argument " "1"" of type '" "FIX::Group const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Group * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Group_getGroup" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Group_getGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Group_getGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  arg3 = reinterpret_cast< FIX::Group * >(argp3);
  try {
    {
      FIX::Group &_result_ref = ((FIX::Group const *)arg1)->getGroup(arg2,*arg3);
      result = (FIX::Group *) &_result_ref;
    }
  }
  catch(FIX::FieldNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Group, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Group_removeGroup__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Group *arg1 = (FIX::Group *) 0 ;
  unsigned int arg2 ;
  FIX::Group *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Group_removeGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Group, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_removeGroup" "', argument " "1"" of type '" "FIX::Group *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Group * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Group_removeGroup" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Group_removeGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Group_removeGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  arg3 = reinterpret_cast< FIX::Group * >(argp3);
  (arg1)->removeGroup(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Group_removeGroup__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Group *arg1 = (FIX::Group *) 0 ;
  FIX::Group *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Group_removeGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Group, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_removeGroup" "', argument " "1"" of type '" "FIX::Group *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Group * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_removeGroup" "', argument " "2"" of type '" "FIX::Group &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Group_removeGroup" "', argument " "2"" of type '" "FIX::Group &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Group * >(argp2);
  (arg1)->removeGroup(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Group_removeGroup(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Group, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FIX__Group, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Group_removeGroup__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Group, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_FIX__Group, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Group_removeGroup__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Group_removeGroup'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Group_hasGroup__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Group *arg1 = (FIX::Group *) 0 ;
  FIX::Group *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Group_hasGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Group, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_hasGroup" "', argument " "1"" of type '" "FIX::Group *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Group * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Group,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Group_hasGroup" "', argument " "2"" of type '" "FIX::Group const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Group_hasGroup" "', argument " "2"" of type '" "FIX::Group const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Group * >(argp2);
  result = (bool)(arg1)->hasGroup((FIX::Group const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Group_hasGroup__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Group *arg1 = (FIX::Group *) 0 ;
  unsigned int arg2 ;
  FIX::Group *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Group_hasGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Group, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Group_hasGroup" "', argument " "1"" of type '" "FIX::Group *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Group * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Group_hasGroup" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__Group,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Group_hasGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Group_hasGroup" "', argument " "3"" of type '" "FIX::Group &""'"); 
  }
  arg3 = reinterpret_cast< FIX::Group * >(argp3);
  result = (bool)(arg1)->hasGroup(arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Group_hasGroup(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Group, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__Group, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Group_hasGroup__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Group, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_FIX__Group, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Group_hasGroup__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Group_hasGroup'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Group(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Group *arg1 = (FIX::Group *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Group",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Group, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Group" "', argument " "1"" of type '" "FIX::Group *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Group * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Group_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Group, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ExecTransType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ExecTransType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ExecTransType")) SWIG_fail;
  result = (FIX::ExecTransType *)new FIX::ExecTransType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ExecTransType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExecTransType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_CHAR *arg1 = 0 ;
  FIX::ExecTransType *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ExecTransType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_CHAR,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExecTransType" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExecTransType" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_CHAR * >(argp1);
  result = (FIX::ExecTransType *)new FIX::ExecTransType((FIX_CHAR const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ExecTransType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExecTransType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ExecTransType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_CHAR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ExecTransType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_ExecTransType'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExecTransType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ExecTransType *arg1 = (FIX::ExecTransType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ExecTransType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ExecTransType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExecTransType" "', argument " "1"" of type '" "FIX::ExecTransType *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ExecTransType * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExecTransType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__ExecTransType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IDSource__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IDSource *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IDSource")) SWIG_fail;
  result = (FIX::IDSource *)new FIX::IDSource();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IDSource, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IDSource__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::IDSource *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IDSource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IDSource" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IDSource" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::IDSource *)new FIX::IDSource((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IDSource, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IDSource(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IDSource__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDSource__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_IDSource'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IDSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IDSource *arg1 = (FIX::IDSource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IDSource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IDSource, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IDSource" "', argument " "1"" of type '" "FIX::IDSource *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IDSource * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IDSource_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__IDSource, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IOIOthSvc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IOIOthSvc *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IOIOthSvc")) SWIG_fail;
  result = (FIX::IOIOthSvc *)new FIX::IOIOthSvc();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IOIOthSvc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOIOthSvc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_CHAR *arg1 = 0 ;
  FIX::IOIOthSvc *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IOIOthSvc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_CHAR,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IOIOthSvc" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IOIOthSvc" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_CHAR * >(argp1);
  result = (FIX::IOIOthSvc *)new FIX::IOIOthSvc((FIX_CHAR const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IOIOthSvc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOIOthSvc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IOIOthSvc__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_CHAR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IOIOthSvc__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_IOIOthSvc'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IOIOthSvc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IOIOthSvc *arg1 = (FIX::IOIOthSvc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IOIOthSvc",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IOIOthSvc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IOIOthSvc" "', argument " "1"" of type '" "FIX::IOIOthSvc *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IOIOthSvc * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IOIOthSvc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__IOIOthSvc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IOIShares__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IOIShares *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IOIShares")) SWIG_fail;
  result = (FIX::IOIShares *)new FIX::IOIShares();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IOIShares, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOIShares__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::IOIShares *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IOIShares",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IOIShares" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IOIShares" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::IOIShares *)new FIX::IOIShares((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__IOIShares, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOIShares(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IOIShares__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IOIShares__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_IOIShares'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IOIShares(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::IOIShares *arg1 = (FIX::IOIShares *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IOIShares",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__IOIShares, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IOIShares" "', argument " "1"" of type '" "FIX::IOIShares *""'"); 
  }
  arg1 = reinterpret_cast< FIX::IOIShares * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IOIShares_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__IOIShares, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LastShares__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::LastShares *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LastShares")) SWIG_fail;
  result = (FIX::LastShares *)new FIX::LastShares();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__LastShares, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LastShares__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_QTY *arg1 = 0 ;
  FIX::LastShares *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LastShares",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_QTY,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LastShares" "', argument " "1"" of type '" "FIX_QTY const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LastShares" "', argument " "1"" of type '" "FIX_QTY const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_QTY * >(argp1);
  result = (FIX::LastShares *)new FIX::LastShares((FIX_QTY const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__LastShares, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LastShares(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LastShares__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_QTY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LastShares__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_LastShares'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LastShares(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::LastShares *arg1 = (FIX::LastShares *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LastShares",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__LastShares, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LastShares" "', argument " "1"" of type '" "FIX::LastShares *""'"); 
  }
  arg1 = reinterpret_cast< FIX::LastShares * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LastShares_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__LastShares, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RelatdSym__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RelatdSym *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RelatdSym")) SWIG_fail;
  result = (FIX::RelatdSym *)new FIX::RelatdSym();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RelatdSym, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RelatdSym__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::RelatdSym *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RelatdSym",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RelatdSym" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RelatdSym" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::RelatdSym *)new FIX::RelatdSym((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RelatdSym, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RelatdSym(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RelatdSym__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RelatdSym__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_RelatdSym'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RelatdSym(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RelatdSym *arg1 = (FIX::RelatdSym *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RelatdSym",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RelatdSym, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RelatdSym" "', argument " "1"" of type '" "FIX::RelatdSym *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RelatdSym * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RelatdSym_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__RelatdSym, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Rule80A__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Rule80A *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Rule80A")) SWIG_fail;
  result = (FIX::Rule80A *)new FIX::Rule80A();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Rule80A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rule80A__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_CHAR *arg1 = 0 ;
  FIX::Rule80A *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Rule80A",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_CHAR,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rule80A" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rule80A" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_CHAR * >(argp1);
  result = (FIX::Rule80A *)new FIX::Rule80A((FIX_CHAR const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Rule80A, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rule80A(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Rule80A__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_CHAR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rule80A__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Rule80A'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rule80A(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Rule80A *arg1 = (FIX::Rule80A *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Rule80A",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Rule80A, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rule80A" "', argument " "1"" of type '" "FIX::Rule80A *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Rule80A * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rule80A_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Rule80A, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Shares__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Shares *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Shares")) SWIG_fail;
  result = (FIX::Shares *)new FIX::Shares();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Shares, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Shares__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_QTY *arg1 = 0 ;
  FIX::Shares *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Shares",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_QTY,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Shares" "', argument " "1"" of type '" "FIX_QTY const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Shares" "', argument " "1"" of type '" "FIX_QTY const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_QTY * >(argp1);
  result = (FIX::Shares *)new FIX::Shares((FIX_QTY const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Shares, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Shares(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Shares__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_QTY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Shares__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Shares'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Shares(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Shares *arg1 = (FIX::Shares *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Shares",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Shares, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Shares" "', argument " "1"" of type '" "FIX::Shares *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Shares * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Shares_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Shares, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SettlmntTyp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SettlmntTyp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SettlmntTyp")) SWIG_fail;
  result = (FIX::SettlmntTyp *)new FIX::SettlmntTyp();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SettlmntTyp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SettlmntTyp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_CHAR *arg1 = 0 ;
  FIX::SettlmntTyp *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SettlmntTyp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_CHAR,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SettlmntTyp" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SettlmntTyp" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_CHAR * >(argp1);
  result = (FIX::SettlmntTyp *)new FIX::SettlmntTyp((FIX_CHAR const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SettlmntTyp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SettlmntTyp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SettlmntTyp__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_CHAR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SettlmntTyp__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SettlmntTyp'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SettlmntTyp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SettlmntTyp *arg1 = (FIX::SettlmntTyp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SettlmntTyp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SettlmntTyp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SettlmntTyp" "', argument " "1"" of type '" "FIX::SettlmntTyp *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SettlmntTyp * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SettlmntTyp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SettlmntTyp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FutSettDate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FutSettDate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FutSettDate")) SWIG_fail;
  result = (FIX::FutSettDate *)new FIX::FutSettDate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FutSettDate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FutSettDate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_LOCALMKTDATE *arg1 = 0 ;
  FIX::FutSettDate *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FutSettDate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_LOCALMKTDATE,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FutSettDate" "', argument " "1"" of type '" "FIX_LOCALMKTDATE const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FutSettDate" "', argument " "1"" of type '" "FIX_LOCALMKTDATE const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_LOCALMKTDATE * >(argp1);
  result = (FIX::FutSettDate *)new FIX::FutSettDate((FIX_LOCALMKTDATE const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FutSettDate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FutSettDate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FutSettDate__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_LOCALMKTDATE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FutSettDate__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_FutSettDate'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FutSettDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FutSettDate *arg1 = (FIX::FutSettDate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FutSettDate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FutSettDate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FutSettDate" "', argument " "1"" of type '" "FIX::FutSettDate *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FutSettDate * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FutSettDate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__FutSettDate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AvgPrxPrecision__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::AvgPrxPrecision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AvgPrxPrecision")) SWIG_fail;
  result = (FIX::AvgPrxPrecision *)new FIX::AvgPrxPrecision();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__AvgPrxPrecision, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AvgPrxPrecision__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_INT *arg1 = 0 ;
  FIX::AvgPrxPrecision *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AvgPrxPrecision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_INT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AvgPrxPrecision" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AvgPrxPrecision" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_INT * >(argp1);
  result = (FIX::AvgPrxPrecision *)new FIX::AvgPrxPrecision((FIX_INT const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__AvgPrxPrecision, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AvgPrxPrecision(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AvgPrxPrecision__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_INT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AvgPrxPrecision__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_AvgPrxPrecision'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AvgPrxPrecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::AvgPrxPrecision *arg1 = (FIX::AvgPrxPrecision *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AvgPrxPrecision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__AvgPrxPrecision, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AvgPrxPrecision" "', argument " "1"" of type '" "FIX::AvgPrxPrecision *""'"); 
  }
  arg1 = reinterpret_cast< FIX::AvgPrxPrecision * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AvgPrxPrecision_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__AvgPrxPrecision, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ExecBroker__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ExecBroker *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ExecBroker")) SWIG_fail;
  result = (FIX::ExecBroker *)new FIX::ExecBroker();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ExecBroker, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExecBroker__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::ExecBroker *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ExecBroker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExecBroker" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExecBroker" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::ExecBroker *)new FIX::ExecBroker((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ExecBroker, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExecBroker(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ExecBroker__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ExecBroker__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_ExecBroker'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExecBroker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ExecBroker *arg1 = (FIX::ExecBroker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ExecBroker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ExecBroker, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExecBroker" "', argument " "1"" of type '" "FIX::ExecBroker *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ExecBroker * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExecBroker_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__ExecBroker, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OpenClose__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::OpenClose *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_OpenClose")) SWIG_fail;
  result = (FIX::OpenClose *)new FIX::OpenClose();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__OpenClose, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OpenClose__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_CHAR *arg1 = 0 ;
  FIX::OpenClose *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OpenClose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_CHAR,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpenClose" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OpenClose" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_CHAR * >(argp1);
  result = (FIX::OpenClose *)new FIX::OpenClose((FIX_CHAR const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__OpenClose, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OpenClose(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_OpenClose__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_CHAR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OpenClose__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_OpenClose'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OpenClose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::OpenClose *arg1 = (FIX::OpenClose *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OpenClose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__OpenClose, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OpenClose" "', argument " "1"" of type '" "FIX::OpenClose *""'"); 
  }
  arg1 = reinterpret_cast< FIX::OpenClose * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OpenClose_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__OpenClose, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AllocShares__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::AllocShares *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AllocShares")) SWIG_fail;
  result = (FIX::AllocShares *)new FIX::AllocShares();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__AllocShares, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AllocShares__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_INT *arg1 = 0 ;
  FIX::AllocShares *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AllocShares",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_INT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AllocShares" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AllocShares" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_INT * >(argp1);
  result = (FIX::AllocShares *)new FIX::AllocShares((FIX_INT const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__AllocShares, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AllocShares(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AllocShares__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_INT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AllocShares__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_AllocShares'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AllocShares(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::AllocShares *arg1 = (FIX::AllocShares *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AllocShares",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__AllocShares, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AllocShares" "', argument " "1"" of type '" "FIX::AllocShares *""'"); 
  }
  arg1 = reinterpret_cast< FIX::AllocShares * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AllocShares_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__AllocShares, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DlvyInst__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DlvyInst *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DlvyInst")) SWIG_fail;
  result = (FIX::DlvyInst *)new FIX::DlvyInst();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DlvyInst, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DlvyInst__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_CHAR *arg1 = 0 ;
  FIX::DlvyInst *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DlvyInst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_CHAR,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DlvyInst" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DlvyInst" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_CHAR * >(argp1);
  result = (FIX::DlvyInst *)new FIX::DlvyInst((FIX_CHAR const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DlvyInst, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DlvyInst(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DlvyInst__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_CHAR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DlvyInst__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_DlvyInst'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DlvyInst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DlvyInst *arg1 = (FIX::DlvyInst *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DlvyInst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DlvyInst, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DlvyInst" "', argument " "1"" of type '" "FIX::DlvyInst *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DlvyInst * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DlvyInst_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__DlvyInst, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BrokerOfCredit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::BrokerOfCredit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BrokerOfCredit")) SWIG_fail;
  result = (FIX::BrokerOfCredit *)new FIX::BrokerOfCredit();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__BrokerOfCredit, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BrokerOfCredit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::BrokerOfCredit *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BrokerOfCredit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BrokerOfCredit" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BrokerOfCredit" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::BrokerOfCredit *)new FIX::BrokerOfCredit((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__BrokerOfCredit, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BrokerOfCredit(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BrokerOfCredit__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BrokerOfCredit__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_BrokerOfCredit'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BrokerOfCredit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::BrokerOfCredit *arg1 = (FIX::BrokerOfCredit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BrokerOfCredit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__BrokerOfCredit, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BrokerOfCredit" "', argument " "1"" of type '" "FIX::BrokerOfCredit *""'"); 
  }
  arg1 = reinterpret_cast< FIX::BrokerOfCredit * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BrokerOfCredit_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__BrokerOfCredit, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClientID__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ClientID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClientID")) SWIG_fail;
  result = (FIX::ClientID *)new FIX::ClientID();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ClientID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClientID__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::ClientID *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClientID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClientID" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClientID" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::ClientID *)new FIX::ClientID((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ClientID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClientID(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClientID__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClientID__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_ClientID'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ClientID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ClientID *arg1 = (FIX::ClientID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClientID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ClientID, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClientID" "', argument " "1"" of type '" "FIX::ClientID *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ClientID * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClientID_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__ClientID, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CxlType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CxlType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CxlType")) SWIG_fail;
  result = (FIX::CxlType *)new FIX::CxlType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CxlType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CxlType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_CHAR *arg1 = 0 ;
  FIX::CxlType *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CxlType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_CHAR,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CxlType" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CxlType" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_CHAR * >(argp1);
  result = (FIX::CxlType *)new FIX::CxlType((FIX_CHAR const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CxlType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CxlType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CxlType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_CHAR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CxlType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CxlType'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CxlType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CxlType *arg1 = (FIX::CxlType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CxlType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CxlType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CxlType" "', argument " "1"" of type '" "FIX::CxlType *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CxlType * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CxlType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__CxlType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SettlLocation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SettlLocation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SettlLocation")) SWIG_fail;
  result = (FIX::SettlLocation *)new FIX::SettlLocation();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SettlLocation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SettlLocation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::SettlLocation *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SettlLocation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SettlLocation" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SettlLocation" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::SettlLocation *)new FIX::SettlLocation((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SettlLocation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SettlLocation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SettlLocation__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SettlLocation__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SettlLocation'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SettlLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SettlLocation *arg1 = (FIX::SettlLocation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SettlLocation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SettlLocation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SettlLocation" "', argument " "1"" of type '" "FIX::SettlLocation *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SettlLocation * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SettlLocation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SettlLocation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SettlDepositoryCode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SettlDepositoryCode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SettlDepositoryCode")) SWIG_fail;
  result = (FIX::SettlDepositoryCode *)new FIX::SettlDepositoryCode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SettlDepositoryCode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SettlDepositoryCode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::SettlDepositoryCode *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SettlDepositoryCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SettlDepositoryCode" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SettlDepositoryCode" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::SettlDepositoryCode *)new FIX::SettlDepositoryCode((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SettlDepositoryCode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SettlDepositoryCode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SettlDepositoryCode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SettlDepositoryCode__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SettlDepositoryCode'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SettlDepositoryCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SettlDepositoryCode *arg1 = (FIX::SettlDepositoryCode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SettlDepositoryCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SettlDepositoryCode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SettlDepositoryCode" "', argument " "1"" of type '" "FIX::SettlDepositoryCode *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SettlDepositoryCode * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SettlDepositoryCode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SettlDepositoryCode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SettlBrkrCode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SettlBrkrCode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SettlBrkrCode")) SWIG_fail;
  result = (FIX::SettlBrkrCode *)new FIX::SettlBrkrCode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SettlBrkrCode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SettlBrkrCode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::SettlBrkrCode *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SettlBrkrCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SettlBrkrCode" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SettlBrkrCode" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::SettlBrkrCode *)new FIX::SettlBrkrCode((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SettlBrkrCode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SettlBrkrCode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SettlBrkrCode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SettlBrkrCode__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SettlBrkrCode'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SettlBrkrCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SettlBrkrCode *arg1 = (FIX::SettlBrkrCode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SettlBrkrCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SettlBrkrCode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SettlBrkrCode" "', argument " "1"" of type '" "FIX::SettlBrkrCode *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SettlBrkrCode * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SettlBrkrCode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SettlBrkrCode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SettlInstCode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SettlInstCode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SettlInstCode")) SWIG_fail;
  result = (FIX::SettlInstCode *)new FIX::SettlInstCode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SettlInstCode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SettlInstCode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::SettlInstCode *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SettlInstCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SettlInstCode" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SettlInstCode" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::SettlInstCode *)new FIX::SettlInstCode((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SettlInstCode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SettlInstCode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SettlInstCode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SettlInstCode__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SettlInstCode'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SettlInstCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SettlInstCode *arg1 = (FIX::SettlInstCode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SettlInstCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SettlInstCode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SettlInstCode" "', argument " "1"" of type '" "FIX::SettlInstCode *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SettlInstCode * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SettlInstCode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SettlInstCode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentName *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SecuritySettlAgentName")) SWIG_fail;
  result = (FIX::SecuritySettlAgentName *)new FIX::SecuritySettlAgentName();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::SecuritySettlAgentName *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SecuritySettlAgentName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecuritySettlAgentName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecuritySettlAgentName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::SecuritySettlAgentName *)new FIX::SecuritySettlAgentName((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SecuritySettlAgentName__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SecuritySettlAgentName__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SecuritySettlAgentName'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecuritySettlAgentName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentName *arg1 = (FIX::SecuritySettlAgentName *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SecuritySettlAgentName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SecuritySettlAgentName, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecuritySettlAgentName" "', argument " "1"" of type '" "FIX::SecuritySettlAgentName *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SecuritySettlAgentName * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecuritySettlAgentName_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SecuritySettlAgentName, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentCode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentCode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SecuritySettlAgentCode")) SWIG_fail;
  result = (FIX::SecuritySettlAgentCode *)new FIX::SecuritySettlAgentCode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentCode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentCode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::SecuritySettlAgentCode *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SecuritySettlAgentCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecuritySettlAgentCode" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecuritySettlAgentCode" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::SecuritySettlAgentCode *)new FIX::SecuritySettlAgentCode((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentCode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentCode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SecuritySettlAgentCode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SecuritySettlAgentCode__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SecuritySettlAgentCode'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecuritySettlAgentCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentCode *arg1 = (FIX::SecuritySettlAgentCode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SecuritySettlAgentCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SecuritySettlAgentCode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecuritySettlAgentCode" "', argument " "1"" of type '" "FIX::SecuritySettlAgentCode *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SecuritySettlAgentCode * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecuritySettlAgentCode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SecuritySettlAgentCode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentAcctNum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentAcctNum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SecuritySettlAgentAcctNum")) SWIG_fail;
  result = (FIX::SecuritySettlAgentAcctNum *)new FIX::SecuritySettlAgentAcctNum();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentAcctNum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentAcctNum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::SecuritySettlAgentAcctNum *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SecuritySettlAgentAcctNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecuritySettlAgentAcctNum" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecuritySettlAgentAcctNum" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::SecuritySettlAgentAcctNum *)new FIX::SecuritySettlAgentAcctNum((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentAcctNum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentAcctNum(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SecuritySettlAgentAcctNum__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SecuritySettlAgentAcctNum__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SecuritySettlAgentAcctNum'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecuritySettlAgentAcctNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentAcctNum *arg1 = (FIX::SecuritySettlAgentAcctNum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SecuritySettlAgentAcctNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SecuritySettlAgentAcctNum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecuritySettlAgentAcctNum" "', argument " "1"" of type '" "FIX::SecuritySettlAgentAcctNum *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SecuritySettlAgentAcctNum * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecuritySettlAgentAcctNum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SecuritySettlAgentAcctNum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentAcctName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentAcctName *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SecuritySettlAgentAcctName")) SWIG_fail;
  result = (FIX::SecuritySettlAgentAcctName *)new FIX::SecuritySettlAgentAcctName();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentAcctName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentAcctName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::SecuritySettlAgentAcctName *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SecuritySettlAgentAcctName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecuritySettlAgentAcctName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecuritySettlAgentAcctName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::SecuritySettlAgentAcctName *)new FIX::SecuritySettlAgentAcctName((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentAcctName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentAcctName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SecuritySettlAgentAcctName__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SecuritySettlAgentAcctName__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SecuritySettlAgentAcctName'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecuritySettlAgentAcctName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentAcctName *arg1 = (FIX::SecuritySettlAgentAcctName *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SecuritySettlAgentAcctName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SecuritySettlAgentAcctName, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecuritySettlAgentAcctName" "', argument " "1"" of type '" "FIX::SecuritySettlAgentAcctName *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SecuritySettlAgentAcctName * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecuritySettlAgentAcctName_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SecuritySettlAgentAcctName, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentContactName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentContactName *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SecuritySettlAgentContactName")) SWIG_fail;
  result = (FIX::SecuritySettlAgentContactName *)new FIX::SecuritySettlAgentContactName();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentContactName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentContactName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::SecuritySettlAgentContactName *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SecuritySettlAgentContactName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecuritySettlAgentContactName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecuritySettlAgentContactName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::SecuritySettlAgentContactName *)new FIX::SecuritySettlAgentContactName((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentContactName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentContactName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SecuritySettlAgentContactName__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SecuritySettlAgentContactName__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SecuritySettlAgentContactName'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecuritySettlAgentContactName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentContactName *arg1 = (FIX::SecuritySettlAgentContactName *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SecuritySettlAgentContactName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SecuritySettlAgentContactName, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecuritySettlAgentContactName" "', argument " "1"" of type '" "FIX::SecuritySettlAgentContactName *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SecuritySettlAgentContactName * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecuritySettlAgentContactName_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SecuritySettlAgentContactName, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentContactPhone__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentContactPhone *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SecuritySettlAgentContactPhone")) SWIG_fail;
  result = (FIX::SecuritySettlAgentContactPhone *)new FIX::SecuritySettlAgentContactPhone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentContactPhone, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentContactPhone__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::SecuritySettlAgentContactPhone *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SecuritySettlAgentContactPhone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecuritySettlAgentContactPhone" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecuritySettlAgentContactPhone" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::SecuritySettlAgentContactPhone *)new FIX::SecuritySettlAgentContactPhone((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SecuritySettlAgentContactPhone, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecuritySettlAgentContactPhone(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SecuritySettlAgentContactPhone__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SecuritySettlAgentContactPhone__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SecuritySettlAgentContactPhone'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecuritySettlAgentContactPhone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SecuritySettlAgentContactPhone *arg1 = (FIX::SecuritySettlAgentContactPhone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SecuritySettlAgentContactPhone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SecuritySettlAgentContactPhone, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecuritySettlAgentContactPhone" "', argument " "1"" of type '" "FIX::SecuritySettlAgentContactPhone *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SecuritySettlAgentContactPhone * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecuritySettlAgentContactPhone_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SecuritySettlAgentContactPhone, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CashSettlAgentName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentName *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CashSettlAgentName")) SWIG_fail;
  result = (FIX::CashSettlAgentName *)new FIX::CashSettlAgentName();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::CashSettlAgentName *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CashSettlAgentName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CashSettlAgentName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CashSettlAgentName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::CashSettlAgentName *)new FIX::CashSettlAgentName((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CashSettlAgentName__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CashSettlAgentName__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CashSettlAgentName'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CashSettlAgentName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentName *arg1 = (FIX::CashSettlAgentName *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CashSettlAgentName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CashSettlAgentName, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CashSettlAgentName" "', argument " "1"" of type '" "FIX::CashSettlAgentName *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CashSettlAgentName * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CashSettlAgentName_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__CashSettlAgentName, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CashSettlAgentCode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentCode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CashSettlAgentCode")) SWIG_fail;
  result = (FIX::CashSettlAgentCode *)new FIX::CashSettlAgentCode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentCode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentCode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::CashSettlAgentCode *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CashSettlAgentCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CashSettlAgentCode" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CashSettlAgentCode" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::CashSettlAgentCode *)new FIX::CashSettlAgentCode((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentCode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentCode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CashSettlAgentCode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CashSettlAgentCode__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CashSettlAgentCode'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CashSettlAgentCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentCode *arg1 = (FIX::CashSettlAgentCode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CashSettlAgentCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CashSettlAgentCode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CashSettlAgentCode" "', argument " "1"" of type '" "FIX::CashSettlAgentCode *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CashSettlAgentCode * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CashSettlAgentCode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__CashSettlAgentCode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CashSettlAgentAcctNum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentAcctNum *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CashSettlAgentAcctNum")) SWIG_fail;
  result = (FIX::CashSettlAgentAcctNum *)new FIX::CashSettlAgentAcctNum();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentAcctNum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentAcctNum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::CashSettlAgentAcctNum *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CashSettlAgentAcctNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CashSettlAgentAcctNum" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CashSettlAgentAcctNum" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::CashSettlAgentAcctNum *)new FIX::CashSettlAgentAcctNum((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentAcctNum, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentAcctNum(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CashSettlAgentAcctNum__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CashSettlAgentAcctNum__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CashSettlAgentAcctNum'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CashSettlAgentAcctNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentAcctNum *arg1 = (FIX::CashSettlAgentAcctNum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CashSettlAgentAcctNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CashSettlAgentAcctNum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CashSettlAgentAcctNum" "', argument " "1"" of type '" "FIX::CashSettlAgentAcctNum *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CashSettlAgentAcctNum * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CashSettlAgentAcctNum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__CashSettlAgentAcctNum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CashSettlAgentAcctName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentAcctName *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CashSettlAgentAcctName")) SWIG_fail;
  result = (FIX::CashSettlAgentAcctName *)new FIX::CashSettlAgentAcctName();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentAcctName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentAcctName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::CashSettlAgentAcctName *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CashSettlAgentAcctName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CashSettlAgentAcctName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CashSettlAgentAcctName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::CashSettlAgentAcctName *)new FIX::CashSettlAgentAcctName((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentAcctName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentAcctName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CashSettlAgentAcctName__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CashSettlAgentAcctName__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CashSettlAgentAcctName'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CashSettlAgentAcctName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentAcctName *arg1 = (FIX::CashSettlAgentAcctName *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CashSettlAgentAcctName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CashSettlAgentAcctName, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CashSettlAgentAcctName" "', argument " "1"" of type '" "FIX::CashSettlAgentAcctName *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CashSettlAgentAcctName * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CashSettlAgentAcctName_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__CashSettlAgentAcctName, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CashSettlAgentContactName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentContactName *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CashSettlAgentContactName")) SWIG_fail;
  result = (FIX::CashSettlAgentContactName *)new FIX::CashSettlAgentContactName();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentContactName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentContactName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::CashSettlAgentContactName *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CashSettlAgentContactName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CashSettlAgentContactName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CashSettlAgentContactName" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::CashSettlAgentContactName *)new FIX::CashSettlAgentContactName((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentContactName, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentContactName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CashSettlAgentContactName__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CashSettlAgentContactName__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CashSettlAgentContactName'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CashSettlAgentContactName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentContactName *arg1 = (FIX::CashSettlAgentContactName *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CashSettlAgentContactName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CashSettlAgentContactName, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CashSettlAgentContactName" "', argument " "1"" of type '" "FIX::CashSettlAgentContactName *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CashSettlAgentContactName * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CashSettlAgentContactName_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__CashSettlAgentContactName, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CashSettlAgentContactPhone__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentContactPhone *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CashSettlAgentContactPhone")) SWIG_fail;
  result = (FIX::CashSettlAgentContactPhone *)new FIX::CashSettlAgentContactPhone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentContactPhone, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentContactPhone__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::CashSettlAgentContactPhone *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CashSettlAgentContactPhone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CashSettlAgentContactPhone" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CashSettlAgentContactPhone" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::CashSettlAgentContactPhone *)new FIX::CashSettlAgentContactPhone((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CashSettlAgentContactPhone, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CashSettlAgentContactPhone(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CashSettlAgentContactPhone__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CashSettlAgentContactPhone__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CashSettlAgentContactPhone'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CashSettlAgentContactPhone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CashSettlAgentContactPhone *arg1 = (FIX::CashSettlAgentContactPhone *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CashSettlAgentContactPhone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CashSettlAgentContactPhone, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CashSettlAgentContactPhone" "', argument " "1"" of type '" "FIX::CashSettlAgentContactPhone *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CashSettlAgentContactPhone * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CashSettlAgentContactPhone_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__CashSettlAgentContactPhone, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FutSettDate2__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FutSettDate2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FutSettDate2")) SWIG_fail;
  result = (FIX::FutSettDate2 *)new FIX::FutSettDate2();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FutSettDate2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FutSettDate2__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_LOCALMKTDATE *arg1 = 0 ;
  FIX::FutSettDate2 *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FutSettDate2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_LOCALMKTDATE,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FutSettDate2" "', argument " "1"" of type '" "FIX_LOCALMKTDATE const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FutSettDate2" "', argument " "1"" of type '" "FIX_LOCALMKTDATE const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_LOCALMKTDATE * >(argp1);
  result = (FIX::FutSettDate2 *)new FIX::FutSettDate2((FIX_LOCALMKTDATE const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FutSettDate2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FutSettDate2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FutSettDate2__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_LOCALMKTDATE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FutSettDate2__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_FutSettDate2'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FutSettDate2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FutSettDate2 *arg1 = (FIX::FutSettDate2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FutSettDate2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FutSettDate2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FutSettDate2" "', argument " "1"" of type '" "FIX::FutSettDate2 *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FutSettDate2 * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FutSettDate2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__FutSettDate2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PutOrCall__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::PutOrCall *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PutOrCall")) SWIG_fail;
  result = (FIX::PutOrCall *)new FIX::PutOrCall();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__PutOrCall, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PutOrCall__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_INT *arg1 = 0 ;
  FIX::PutOrCall *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PutOrCall",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_INT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PutOrCall" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PutOrCall" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_INT * >(argp1);
  result = (FIX::PutOrCall *)new FIX::PutOrCall((FIX_INT const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__PutOrCall, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PutOrCall(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PutOrCall__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_INT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PutOrCall__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_PutOrCall'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PutOrCall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::PutOrCall *arg1 = (FIX::PutOrCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PutOrCall",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__PutOrCall, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PutOrCall" "', argument " "1"" of type '" "FIX::PutOrCall *""'"); 
  }
  arg1 = reinterpret_cast< FIX::PutOrCall * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PutOrCall_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__PutOrCall, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CustomerOrFirm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CustomerOrFirm *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CustomerOrFirm")) SWIG_fail;
  result = (FIX::CustomerOrFirm *)new FIX::CustomerOrFirm();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CustomerOrFirm, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomerOrFirm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_INT *arg1 = 0 ;
  FIX::CustomerOrFirm *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CustomerOrFirm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_INT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CustomerOrFirm" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CustomerOrFirm" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_INT * >(argp1);
  result = (FIX::CustomerOrFirm *)new FIX::CustomerOrFirm((FIX_INT const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CustomerOrFirm, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CustomerOrFirm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CustomerOrFirm__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_INT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CustomerOrFirm__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CustomerOrFirm'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CustomerOrFirm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CustomerOrFirm *arg1 = (FIX::CustomerOrFirm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CustomerOrFirm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CustomerOrFirm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CustomerOrFirm" "', argument " "1"" of type '" "FIX::CustomerOrFirm *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CustomerOrFirm * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CustomerOrFirm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__CustomerOrFirm, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MaturityDay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MaturityDay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MaturityDay")) SWIG_fail;
  result = (FIX::MaturityDay *)new FIX::MaturityDay();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MaturityDay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MaturityDay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_DAYOFMONTH *arg1 = 0 ;
  FIX::MaturityDay *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MaturityDay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_DAYOFMONTH,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MaturityDay" "', argument " "1"" of type '" "FIX_DAYOFMONTH const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MaturityDay" "', argument " "1"" of type '" "FIX_DAYOFMONTH const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_DAYOFMONTH * >(argp1);
  result = (FIX::MaturityDay *)new FIX::MaturityDay((FIX_DAYOFMONTH const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MaturityDay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MaturityDay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MaturityDay__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_DAYOFMONTH, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MaturityDay__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_MaturityDay'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MaturityDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MaturityDay *arg1 = (FIX::MaturityDay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MaturityDay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MaturityDay, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MaturityDay" "', argument " "1"" of type '" "FIX::MaturityDay *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MaturityDay * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MaturityDay_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__MaturityDay, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PegDifference__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::PegDifference *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PegDifference")) SWIG_fail;
  result = (FIX::PegDifference *)new FIX::PegDifference();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__PegDifference, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PegDifference__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_PRICEOFFSET *arg1 = 0 ;
  FIX::PegDifference *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PegDifference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_PRICEOFFSET,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PegDifference" "', argument " "1"" of type '" "FIX_PRICEOFFSET const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PegDifference" "', argument " "1"" of type '" "FIX_PRICEOFFSET const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_PRICEOFFSET * >(argp1);
  result = (FIX::PegDifference *)new FIX::PegDifference((FIX_PRICEOFFSET const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__PegDifference, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PegDifference(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PegDifference__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_PRICEOFFSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PegDifference__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_PegDifference'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PegDifference(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::PegDifference *arg1 = (FIX::PegDifference *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PegDifference",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__PegDifference, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PegDifference" "', argument " "1"" of type '" "FIX::PegDifference *""'"); 
  }
  arg1 = reinterpret_cast< FIX::PegDifference * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PegDifference_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__PegDifference, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SpreadToBenchmark__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SpreadToBenchmark *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SpreadToBenchmark")) SWIG_fail;
  result = (FIX::SpreadToBenchmark *)new FIX::SpreadToBenchmark();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SpreadToBenchmark, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpreadToBenchmark__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_PRICEOFFSET *arg1 = 0 ;
  FIX::SpreadToBenchmark *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SpreadToBenchmark",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_PRICEOFFSET,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpreadToBenchmark" "', argument " "1"" of type '" "FIX_PRICEOFFSET const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpreadToBenchmark" "', argument " "1"" of type '" "FIX_PRICEOFFSET const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_PRICEOFFSET * >(argp1);
  result = (FIX::SpreadToBenchmark *)new FIX::SpreadToBenchmark((FIX_PRICEOFFSET const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SpreadToBenchmark, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpreadToBenchmark(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SpreadToBenchmark__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_PRICEOFFSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpreadToBenchmark__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SpreadToBenchmark'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpreadToBenchmark(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SpreadToBenchmark *arg1 = (FIX::SpreadToBenchmark *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpreadToBenchmark",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SpreadToBenchmark, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpreadToBenchmark" "', argument " "1"" of type '" "FIX::SpreadToBenchmark *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SpreadToBenchmark * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpreadToBenchmark_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SpreadToBenchmark, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Benchmark__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Benchmark *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Benchmark")) SWIG_fail;
  result = (FIX::Benchmark *)new FIX::Benchmark();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Benchmark, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Benchmark__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_CHAR *arg1 = 0 ;
  FIX::Benchmark *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Benchmark",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_CHAR,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Benchmark" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Benchmark" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_CHAR * >(argp1);
  result = (FIX::Benchmark *)new FIX::Benchmark((FIX_CHAR const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Benchmark, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Benchmark(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Benchmark__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_CHAR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Benchmark__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Benchmark'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Benchmark(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Benchmark *arg1 = (FIX::Benchmark *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Benchmark",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Benchmark, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Benchmark" "', argument " "1"" of type '" "FIX::Benchmark *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Benchmark * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Benchmark_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Benchmark, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OpenCloseSettleFlag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::OpenCloseSettleFlag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_OpenCloseSettleFlag")) SWIG_fail;
  result = (FIX::OpenCloseSettleFlag *)new FIX::OpenCloseSettleFlag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__OpenCloseSettleFlag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OpenCloseSettleFlag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::OpenCloseSettleFlag *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OpenCloseSettleFlag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OpenCloseSettleFlag" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OpenCloseSettleFlag" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::OpenCloseSettleFlag *)new FIX::OpenCloseSettleFlag((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__OpenCloseSettleFlag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OpenCloseSettleFlag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_OpenCloseSettleFlag__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OpenCloseSettleFlag__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_OpenCloseSettleFlag'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OpenCloseSettleFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::OpenCloseSettleFlag *arg1 = (FIX::OpenCloseSettleFlag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OpenCloseSettleFlag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__OpenCloseSettleFlag, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OpenCloseSettleFlag" "', argument " "1"" of type '" "FIX::OpenCloseSettleFlag *""'"); 
  }
  arg1 = reinterpret_cast< FIX::OpenCloseSettleFlag * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OpenCloseSettleFlag_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__OpenCloseSettleFlag, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnderlyingIDSource__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UnderlyingIDSource *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UnderlyingIDSource")) SWIG_fail;
  result = (FIX::UnderlyingIDSource *)new FIX::UnderlyingIDSource();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UnderlyingIDSource, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnderlyingIDSource__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::UnderlyingIDSource *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnderlyingIDSource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnderlyingIDSource" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnderlyingIDSource" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::UnderlyingIDSource *)new FIX::UnderlyingIDSource((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UnderlyingIDSource, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnderlyingIDSource(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UnderlyingIDSource__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UnderlyingIDSource__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_UnderlyingIDSource'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnderlyingIDSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UnderlyingIDSource *arg1 = (FIX::UnderlyingIDSource *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnderlyingIDSource",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UnderlyingIDSource, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnderlyingIDSource" "', argument " "1"" of type '" "FIX::UnderlyingIDSource *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UnderlyingIDSource * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnderlyingIDSource_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__UnderlyingIDSource, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_QuoteAckStatus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::QuoteAckStatus *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_QuoteAckStatus")) SWIG_fail;
  result = (FIX::QuoteAckStatus *)new FIX::QuoteAckStatus();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__QuoteAckStatus, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QuoteAckStatus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_INT *arg1 = 0 ;
  FIX::QuoteAckStatus *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_QuoteAckStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_INT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_QuoteAckStatus" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QuoteAckStatus" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_INT * >(argp1);
  result = (FIX::QuoteAckStatus *)new FIX::QuoteAckStatus((FIX_INT const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__QuoteAckStatus, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QuoteAckStatus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_QuoteAckStatus__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_INT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_QuoteAckStatus__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_QuoteAckStatus'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QuoteAckStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::QuoteAckStatus *arg1 = (FIX::QuoteAckStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_QuoteAckStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__QuoteAckStatus, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QuoteAckStatus" "', argument " "1"" of type '" "FIX::QuoteAckStatus *""'"); 
  }
  arg1 = reinterpret_cast< FIX::QuoteAckStatus * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QuoteAckStatus_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__QuoteAckStatus, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TotQuoteEntries__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TotQuoteEntries *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TotQuoteEntries")) SWIG_fail;
  result = (FIX::TotQuoteEntries *)new FIX::TotQuoteEntries();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TotQuoteEntries, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TotQuoteEntries__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_INT *arg1 = 0 ;
  FIX::TotQuoteEntries *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TotQuoteEntries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_INT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TotQuoteEntries" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TotQuoteEntries" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_INT * >(argp1);
  result = (FIX::TotQuoteEntries *)new FIX::TotQuoteEntries((FIX_INT const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TotQuoteEntries, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TotQuoteEntries(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TotQuoteEntries__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_INT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TotQuoteEntries__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_TotQuoteEntries'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TotQuoteEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TotQuoteEntries *arg1 = (FIX::TotQuoteEntries *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TotQuoteEntries",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TotQuoteEntries, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TotQuoteEntries" "', argument " "1"" of type '" "FIX::TotQuoteEntries *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TotQuoteEntries * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TotQuoteEntries_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__TotQuoteEntries, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnderlyingMaturityDay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UnderlyingMaturityDay *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UnderlyingMaturityDay")) SWIG_fail;
  result = (FIX::UnderlyingMaturityDay *)new FIX::UnderlyingMaturityDay();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UnderlyingMaturityDay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnderlyingMaturityDay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_DAYOFMONTH *arg1 = 0 ;
  FIX::UnderlyingMaturityDay *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnderlyingMaturityDay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_DAYOFMONTH,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnderlyingMaturityDay" "', argument " "1"" of type '" "FIX_DAYOFMONTH const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnderlyingMaturityDay" "', argument " "1"" of type '" "FIX_DAYOFMONTH const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_DAYOFMONTH * >(argp1);
  result = (FIX::UnderlyingMaturityDay *)new FIX::UnderlyingMaturityDay((FIX_DAYOFMONTH const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UnderlyingMaturityDay, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnderlyingMaturityDay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UnderlyingMaturityDay__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_DAYOFMONTH, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UnderlyingMaturityDay__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_UnderlyingMaturityDay'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnderlyingMaturityDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UnderlyingMaturityDay *arg1 = (FIX::UnderlyingMaturityDay *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnderlyingMaturityDay",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UnderlyingMaturityDay, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnderlyingMaturityDay" "', argument " "1"" of type '" "FIX::UnderlyingMaturityDay *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UnderlyingMaturityDay * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnderlyingMaturityDay_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__UnderlyingMaturityDay, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnderlyingPutOrCall__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UnderlyingPutOrCall *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UnderlyingPutOrCall")) SWIG_fail;
  result = (FIX::UnderlyingPutOrCall *)new FIX::UnderlyingPutOrCall();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UnderlyingPutOrCall, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnderlyingPutOrCall__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_INT *arg1 = 0 ;
  FIX::UnderlyingPutOrCall *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UnderlyingPutOrCall",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_INT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnderlyingPutOrCall" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnderlyingPutOrCall" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_INT * >(argp1);
  result = (FIX::UnderlyingPutOrCall *)new FIX::UnderlyingPutOrCall((FIX_INT const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__UnderlyingPutOrCall, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UnderlyingPutOrCall(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UnderlyingPutOrCall__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_INT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UnderlyingPutOrCall__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_UnderlyingPutOrCall'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnderlyingPutOrCall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::UnderlyingPutOrCall *arg1 = (FIX::UnderlyingPutOrCall *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnderlyingPutOrCall",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__UnderlyingPutOrCall, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnderlyingPutOrCall" "', argument " "1"" of type '" "FIX::UnderlyingPutOrCall *""'"); 
  }
  arg1 = reinterpret_cast< FIX::UnderlyingPutOrCall * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnderlyingPutOrCall_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__UnderlyingPutOrCall, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RatioQty__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RatioQty *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RatioQty")) SWIG_fail;
  result = (FIX::RatioQty *)new FIX::RatioQty();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RatioQty, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RatioQty__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_QTY *arg1 = 0 ;
  FIX::RatioQty *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RatioQty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_QTY,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RatioQty" "', argument " "1"" of type '" "FIX_QTY const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RatioQty" "', argument " "1"" of type '" "FIX_QTY const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_QTY * >(argp1);
  result = (FIX::RatioQty *)new FIX::RatioQty((FIX_QTY const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RatioQty, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RatioQty(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RatioQty__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_QTY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RatioQty__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_RatioQty'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RatioQty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RatioQty *arg1 = (FIX::RatioQty *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RatioQty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RatioQty, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RatioQty" "', argument " "1"" of type '" "FIX::RatioQty *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RatioQty * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RatioQty_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__RatioQty, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OnBehalfOfSendingTime__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::OnBehalfOfSendingTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_OnBehalfOfSendingTime")) SWIG_fail;
  result = (FIX::OnBehalfOfSendingTime *)new FIX::OnBehalfOfSendingTime();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__OnBehalfOfSendingTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OnBehalfOfSendingTime__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  FIX::OnBehalfOfSendingTime *result = 0 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OnBehalfOfSendingTime",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OnBehalfOfSendingTime" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (FIX::OnBehalfOfSendingTime *)new FIX::OnBehalfOfSendingTime(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__OnBehalfOfSendingTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OnBehalfOfSendingTime__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_UTCTIMESTAMP *arg1 = 0 ;
  FIX::OnBehalfOfSendingTime *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_OnBehalfOfSendingTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_UTCTIMESTAMP,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OnBehalfOfSendingTime" "', argument " "1"" of type '" "FIX_UTCTIMESTAMP const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OnBehalfOfSendingTime" "', argument " "1"" of type '" "FIX_UTCTIMESTAMP const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_UTCTIMESTAMP * >(argp1);
  result = (FIX::OnBehalfOfSendingTime *)new FIX::OnBehalfOfSendingTime((FIX_UTCTIMESTAMP const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__OnBehalfOfSendingTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OnBehalfOfSendingTime__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_UTCTIMESTAMP *arg1 = 0 ;
  bool arg2 ;
  FIX::OnBehalfOfSendingTime *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_OnBehalfOfSendingTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_UTCTIMESTAMP,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OnBehalfOfSendingTime" "', argument " "1"" of type '" "FIX_UTCTIMESTAMP const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OnBehalfOfSendingTime" "', argument " "1"" of type '" "FIX_UTCTIMESTAMP const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_UTCTIMESTAMP * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OnBehalfOfSendingTime" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (FIX::OnBehalfOfSendingTime *)new FIX::OnBehalfOfSendingTime((FIX_UTCTIMESTAMP const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__OnBehalfOfSendingTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OnBehalfOfSendingTime(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_OnBehalfOfSendingTime__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_UTCTIMESTAMP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_OnBehalfOfSendingTime__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_OnBehalfOfSendingTime__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_UTCTIMESTAMP, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_OnBehalfOfSendingTime__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_OnBehalfOfSendingTime'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OnBehalfOfSendingTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::OnBehalfOfSendingTime *arg1 = (FIX::OnBehalfOfSendingTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OnBehalfOfSendingTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__OnBehalfOfSendingTime, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OnBehalfOfSendingTime" "', argument " "1"" of type '" "FIX::OnBehalfOfSendingTime *""'"); 
  }
  arg1 = reinterpret_cast< FIX::OnBehalfOfSendingTime * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OnBehalfOfSendingTime_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__OnBehalfOfSendingTime, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DiscretionOffset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DiscretionOffset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DiscretionOffset")) SWIG_fail;
  result = (FIX::DiscretionOffset *)new FIX::DiscretionOffset();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DiscretionOffset, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiscretionOffset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_PRICEOFFSET *arg1 = 0 ;
  FIX::DiscretionOffset *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DiscretionOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_PRICEOFFSET,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiscretionOffset" "', argument " "1"" of type '" "FIX_PRICEOFFSET const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscretionOffset" "', argument " "1"" of type '" "FIX_PRICEOFFSET const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_PRICEOFFSET * >(argp1);
  result = (FIX::DiscretionOffset *)new FIX::DiscretionOffset((FIX_PRICEOFFSET const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DiscretionOffset, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiscretionOffset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DiscretionOffset__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_PRICEOFFSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DiscretionOffset__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_DiscretionOffset'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DiscretionOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DiscretionOffset *arg1 = (FIX::DiscretionOffset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DiscretionOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DiscretionOffset, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DiscretionOffset" "', argument " "1"" of type '" "FIX::DiscretionOffset *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DiscretionOffset * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DiscretionOffset_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__DiscretionOffset, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TotalNumSecurities__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TotalNumSecurities *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TotalNumSecurities")) SWIG_fail;
  result = (FIX::TotalNumSecurities *)new FIX::TotalNumSecurities();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TotalNumSecurities, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TotalNumSecurities__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_INT *arg1 = 0 ;
  FIX::TotalNumSecurities *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TotalNumSecurities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_INT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TotalNumSecurities" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TotalNumSecurities" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_INT * >(argp1);
  result = (FIX::TotalNumSecurities *)new FIX::TotalNumSecurities((FIX_INT const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TotalNumSecurities, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TotalNumSecurities(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TotalNumSecurities__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_INT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TotalNumSecurities__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_TotalNumSecurities'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TotalNumSecurities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TotalNumSecurities *arg1 = (FIX::TotalNumSecurities *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TotalNumSecurities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TotalNumSecurities, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TotalNumSecurities" "', argument " "1"" of type '" "FIX::TotalNumSecurities *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TotalNumSecurities * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TotalNumSecurities_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__TotalNumSecurities, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TradeType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TradeType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TradeType")) SWIG_fail;
  result = (FIX::TradeType *)new FIX::TradeType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TradeType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TradeType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_CHAR *arg1 = 0 ;
  FIX::TradeType *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TradeType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_CHAR,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TradeType" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TradeType" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_CHAR * >(argp1);
  result = (FIX::TradeType *)new FIX::TradeType((FIX_CHAR const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TradeType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TradeType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TradeType__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_CHAR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TradeType__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_TradeType'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TradeType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TradeType *arg1 = (FIX::TradeType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TradeType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TradeType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TradeType" "', argument " "1"" of type '" "FIX::TradeType *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TradeType * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TradeType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__TradeType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClearingFirm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ClearingFirm *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClearingFirm")) SWIG_fail;
  result = (FIX::ClearingFirm *)new FIX::ClearingFirm();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ClearingFirm, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClearingFirm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::ClearingFirm *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClearingFirm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClearingFirm" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClearingFirm" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::ClearingFirm *)new FIX::ClearingFirm((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ClearingFirm, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClearingFirm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClearingFirm__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClearingFirm__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_ClearingFirm'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ClearingFirm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ClearingFirm *arg1 = (FIX::ClearingFirm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClearingFirm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ClearingFirm, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClearingFirm" "', argument " "1"" of type '" "FIX::ClearingFirm *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ClearingFirm * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClearingFirm_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__ClearingFirm, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClearingAccount__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ClearingAccount *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClearingAccount")) SWIG_fail;
  result = (FIX::ClearingAccount *)new FIX::ClearingAccount();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ClearingAccount, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClearingAccount__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::ClearingAccount *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClearingAccount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClearingAccount" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClearingAccount" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::ClearingAccount *)new FIX::ClearingAccount((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ClearingAccount, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClearingAccount(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClearingAccount__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClearingAccount__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_ClearingAccount'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ClearingAccount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ClearingAccount *arg1 = (FIX::ClearingAccount *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClearingAccount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ClearingAccount, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClearingAccount" "', argument " "1"" of type '" "FIX::ClearingAccount *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ClearingAccount * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClearingAccount_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__ClearingAccount, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TotalVolumeTradedDate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TotalVolumeTradedDate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TotalVolumeTradedDate")) SWIG_fail;
  result = (FIX::TotalVolumeTradedDate *)new FIX::TotalVolumeTradedDate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TotalVolumeTradedDate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TotalVolumeTradedDate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_UTCDATE *arg1 = 0 ;
  FIX::TotalVolumeTradedDate *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TotalVolumeTradedDate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_UTCDATE,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TotalVolumeTradedDate" "', argument " "1"" of type '" "FIX_UTCDATE const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TotalVolumeTradedDate" "', argument " "1"" of type '" "FIX_UTCDATE const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_UTCDATE * >(argp1);
  result = (FIX::TotalVolumeTradedDate *)new FIX::TotalVolumeTradedDate((FIX_UTCDATE const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TotalVolumeTradedDate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TotalVolumeTradedDate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TotalVolumeTradedDate__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_UTCDATE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TotalVolumeTradedDate__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_TotalVolumeTradedDate'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TotalVolumeTradedDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TotalVolumeTradedDate *arg1 = (FIX::TotalVolumeTradedDate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TotalVolumeTradedDate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TotalVolumeTradedDate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TotalVolumeTradedDate" "', argument " "1"" of type '" "FIX::TotalVolumeTradedDate *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TotalVolumeTradedDate * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TotalVolumeTradedDate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__TotalVolumeTradedDate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TotalVolumeTradedTime__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TotalVolumeTradedTime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TotalVolumeTradedTime")) SWIG_fail;
  result = (FIX::TotalVolumeTradedTime *)new FIX::TotalVolumeTradedTime();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TotalVolumeTradedTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TotalVolumeTradedTime__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_UTCTIMEONLY *arg1 = 0 ;
  FIX::TotalVolumeTradedTime *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TotalVolumeTradedTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_UTCTIMEONLY,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TotalVolumeTradedTime" "', argument " "1"" of type '" "FIX_UTCTIMEONLY const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TotalVolumeTradedTime" "', argument " "1"" of type '" "FIX_UTCTIMEONLY const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_UTCTIMEONLY * >(argp1);
  result = (FIX::TotalVolumeTradedTime *)new FIX::TotalVolumeTradedTime((FIX_UTCTIMEONLY const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TotalVolumeTradedTime, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TotalVolumeTradedTime(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TotalVolumeTradedTime__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_UTCTIMEONLY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TotalVolumeTradedTime__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_TotalVolumeTradedTime'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TotalVolumeTradedTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TotalVolumeTradedTime *arg1 = (FIX::TotalVolumeTradedTime *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TotalVolumeTradedTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TotalVolumeTradedTime, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TotalVolumeTradedTime" "', argument " "1"" of type '" "FIX::TotalVolumeTradedTime *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TotalVolumeTradedTime * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TotalVolumeTradedTime_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__TotalVolumeTradedTime, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CardIssNo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CardIssNo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CardIssNo")) SWIG_fail;
  result = (FIX::CardIssNo *)new FIX::CardIssNo();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CardIssNo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CardIssNo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::CardIssNo *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CardIssNo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CardIssNo" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CardIssNo" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::CardIssNo *)new FIX::CardIssNo((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__CardIssNo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CardIssNo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CardIssNo__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CardIssNo__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_CardIssNo'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CardIssNo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::CardIssNo *arg1 = (FIX::CardIssNo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CardIssNo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__CardIssNo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CardIssNo" "', argument " "1"" of type '" "FIX::CardIssNo *""'"); 
  }
  arg1 = reinterpret_cast< FIX::CardIssNo * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CardIssNo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__CardIssNo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RegistDetls__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RegistDetls *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RegistDetls")) SWIG_fail;
  result = (FIX::RegistDetls *)new FIX::RegistDetls();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RegistDetls, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RegistDetls__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::RegistDetls *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RegistDetls",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RegistDetls" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RegistDetls" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::RegistDetls *)new FIX::RegistDetls((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__RegistDetls, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RegistDetls(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RegistDetls__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RegistDetls__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_RegistDetls'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RegistDetls(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::RegistDetls *arg1 = (FIX::RegistDetls *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RegistDetls",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__RegistDetls, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RegistDetls" "', argument " "1"" of type '" "FIX::RegistDetls *""'"); 
  }
  arg1 = reinterpret_cast< FIX::RegistDetls * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RegistDetls_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__RegistDetls, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TotalNumSecurityTypes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TotalNumSecurityTypes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TotalNumSecurityTypes")) SWIG_fail;
  result = (FIX::TotalNumSecurityTypes *)new FIX::TotalNumSecurityTypes();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TotalNumSecurityTypes, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TotalNumSecurityTypes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_INT *arg1 = 0 ;
  FIX::TotalNumSecurityTypes *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TotalNumSecurityTypes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_INT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TotalNumSecurityTypes" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TotalNumSecurityTypes" "', argument " "1"" of type '" "FIX_INT const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_INT * >(argp1);
  result = (FIX::TotalNumSecurityTypes *)new FIX::TotalNumSecurityTypes((FIX_INT const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__TotalNumSecurityTypes, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TotalNumSecurityTypes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TotalNumSecurityTypes__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_INT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TotalNumSecurityTypes__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_TotalNumSecurityTypes'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TotalNumSecurityTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::TotalNumSecurityTypes *arg1 = (FIX::TotalNumSecurityTypes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TotalNumSecurityTypes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__TotalNumSecurityTypes, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TotalNumSecurityTypes" "', argument " "1"" of type '" "FIX::TotalNumSecurityTypes *""'"); 
  }
  arg1 = reinterpret_cast< FIX::TotalNumSecurityTypes * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TotalNumSecurityTypes_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__TotalNumSecurityTypes, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LegSettlmntTyp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::LegSettlmntTyp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LegSettlmntTyp")) SWIG_fail;
  result = (FIX::LegSettlmntTyp *)new FIX::LegSettlmntTyp();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__LegSettlmntTyp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LegSettlmntTyp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_CHAR *arg1 = 0 ;
  FIX::LegSettlmntTyp *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LegSettlmntTyp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_CHAR,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LegSettlmntTyp" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LegSettlmntTyp" "', argument " "1"" of type '" "FIX_CHAR const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_CHAR * >(argp1);
  result = (FIX::LegSettlmntTyp *)new FIX::LegSettlmntTyp((FIX_CHAR const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__LegSettlmntTyp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LegSettlmntTyp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LegSettlmntTyp__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_CHAR, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LegSettlmntTyp__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_LegSettlmntTyp'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LegSettlmntTyp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::LegSettlmntTyp *arg1 = (FIX::LegSettlmntTyp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LegSettlmntTyp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__LegSettlmntTyp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LegSettlmntTyp" "', argument " "1"" of type '" "FIX::LegSettlmntTyp *""'"); 
  }
  arg1 = reinterpret_cast< FIX::LegSettlmntTyp * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LegSettlmntTyp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__LegSettlmntTyp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LegFutSettDate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::LegFutSettDate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LegFutSettDate")) SWIG_fail;
  result = (FIX::LegFutSettDate *)new FIX::LegFutSettDate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__LegFutSettDate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LegFutSettDate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX_STRING *arg1 = 0 ;
  FIX::LegFutSettDate *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LegFutSettDate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX_STRING,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LegFutSettDate" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LegFutSettDate" "', argument " "1"" of type '" "FIX_STRING const &""'"); 
  }
  arg1 = reinterpret_cast< FIX_STRING * >(argp1);
  result = (FIX::LegFutSettDate *)new FIX::LegFutSettDate((FIX_STRING const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__LegFutSettDate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LegFutSettDate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LegFutSettDate__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX_STRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LegFutSettDate__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_LegFutSettDate'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LegFutSettDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::LegFutSettDate *arg1 = (FIX::LegFutSettDate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LegFutSettDate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__LegFutSettDate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LegFutSettDate" "', argument " "1"" of type '" "FIX::LegFutSettDate *""'"); 
  }
  arg1 = reinterpret_cast< FIX::LegFutSettDate * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LegFutSettDate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__LegFutSettDate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int BeginString_FIX44_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BeginString_FIX44 is read-only.");
  return 1;
}


SWIGINTERN PyObject *BeginString_FIX44_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BeginString_FIX44);
  return pyobj;
}


SWIGINTERN int BeginString_FIX43_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BeginString_FIX43 is read-only.");
  return 1;
}


SWIGINTERN PyObject *BeginString_FIX43_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BeginString_FIX43);
  return pyobj;
}


SWIGINTERN int BeginString_FIX42_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BeginString_FIX42 is read-only.");
  return 1;
}


SWIGINTERN PyObject *BeginString_FIX42_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BeginString_FIX42);
  return pyobj;
}


SWIGINTERN int BeginString_FIX41_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BeginString_FIX41 is read-only.");
  return 1;
}


SWIGINTERN PyObject *BeginString_FIX41_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BeginString_FIX41);
  return pyobj;
}


SWIGINTERN int BeginString_FIX40_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BeginString_FIX40 is read-only.");
  return 1;
}


SWIGINTERN PyObject *BeginString_FIX40_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BeginString_FIX40);
  return pyobj;
}


SWIGINTERN int MsgType_Heartbeat_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_Heartbeat is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_Heartbeat_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_Heartbeat);
  return pyobj;
}


SWIGINTERN int MsgType_Logon_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_Logon is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_Logon_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_Logon);
  return pyobj;
}


SWIGINTERN int MsgType_TestRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TestRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TestRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TestRequest);
  return pyobj;
}


SWIGINTERN int MsgType_ResendRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ResendRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ResendRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ResendRequest);
  return pyobj;
}


SWIGINTERN int MsgType_Reject_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_Reject is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_Reject_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_Reject);
  return pyobj;
}


SWIGINTERN int MsgType_SequenceReset_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SequenceReset is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SequenceReset_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SequenceReset);
  return pyobj;
}


SWIGINTERN int MsgType_Logout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_Logout is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_Logout_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_Logout);
  return pyobj;
}


SWIGINTERN int MsgType_BusinessMessageReject_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_BusinessMessageReject is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_BusinessMessageReject_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_BusinessMessageReject);
  return pyobj;
}


SWIGINTERN int MsgType_UserRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_UserRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_UserRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_UserRequest);
  return pyobj;
}


SWIGINTERN int MsgType_UserResponse_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_UserResponse is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_UserResponse_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_UserResponse);
  return pyobj;
}


SWIGINTERN int MsgType_Advertisement_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_Advertisement is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_Advertisement_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_Advertisement);
  return pyobj;
}


SWIGINTERN int MsgType_IndicationOfInterest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_IndicationOfInterest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_IndicationOfInterest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_IndicationOfInterest);
  return pyobj;
}


SWIGINTERN int MsgType_News_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_News is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_News_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_News);
  return pyobj;
}


SWIGINTERN int MsgType_Email_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_Email is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_Email_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_Email);
  return pyobj;
}


SWIGINTERN int MsgType_QuoteRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QuoteRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QuoteRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QuoteRequest);
  return pyobj;
}


SWIGINTERN int MsgType_QuoteResponse_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QuoteResponse is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QuoteResponse_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QuoteResponse);
  return pyobj;
}


SWIGINTERN int MsgType_QuoteRequestReject_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QuoteRequestReject is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QuoteRequestReject_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QuoteRequestReject);
  return pyobj;
}


SWIGINTERN int MsgType_RFQRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_RFQRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_RFQRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_RFQRequest);
  return pyobj;
}


SWIGINTERN int MsgType_Quote_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_Quote is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_Quote_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_Quote);
  return pyobj;
}


SWIGINTERN int MsgType_QuoteCancel_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QuoteCancel is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QuoteCancel_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QuoteCancel);
  return pyobj;
}


SWIGINTERN int MsgType_QuoteStatusRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QuoteStatusRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QuoteStatusRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QuoteStatusRequest);
  return pyobj;
}


SWIGINTERN int MsgType_QuoteStatusReport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QuoteStatusReport is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QuoteStatusReport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QuoteStatusReport);
  return pyobj;
}


SWIGINTERN int MsgType_MassQuote_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MassQuote is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MassQuote_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MassQuote);
  return pyobj;
}


SWIGINTERN int MsgType_MassQuoteAcknowledgement_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MassQuoteAcknowledgement is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MassQuoteAcknowledgement_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MassQuoteAcknowledgement);
  return pyobj;
}


SWIGINTERN int MsgType_MarketDataRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MarketDataRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MarketDataRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MarketDataRequest);
  return pyobj;
}


SWIGINTERN int MsgType_MarketDataSnapshotFullRefresh_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MarketDataSnapshotFullRefresh is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MarketDataSnapshotFullRefresh_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MarketDataSnapshotFullRefresh);
  return pyobj;
}


SWIGINTERN int MsgType_MarketDataIncrementalRefresh_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MarketDataIncrementalRefresh is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MarketDataIncrementalRefresh_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MarketDataIncrementalRefresh);
  return pyobj;
}


SWIGINTERN int MsgType_MarketDataRequestReject_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MarketDataRequestReject is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MarketDataRequestReject_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MarketDataRequestReject);
  return pyobj;
}


SWIGINTERN int MsgType_SecurityDefinitionRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SecurityDefinitionRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SecurityDefinitionRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SecurityDefinitionRequest);
  return pyobj;
}


SWIGINTERN int MsgType_SecurityDefinition_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SecurityDefinition is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SecurityDefinition_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SecurityDefinition);
  return pyobj;
}


SWIGINTERN int MsgType_SecurityTypeRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SecurityTypeRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SecurityTypeRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SecurityTypeRequest);
  return pyobj;
}


SWIGINTERN int MsgType_SecurityTypes_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SecurityTypes is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SecurityTypes_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SecurityTypes);
  return pyobj;
}


SWIGINTERN int MsgType_SecurityListRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SecurityListRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SecurityListRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SecurityListRequest);
  return pyobj;
}


SWIGINTERN int MsgType_SecurityList_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SecurityList is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SecurityList_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SecurityList);
  return pyobj;
}


SWIGINTERN int MsgType_DerivativeSecurityListRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_DerivativeSecurityListRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_DerivativeSecurityListRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_DerivativeSecurityListRequest);
  return pyobj;
}


SWIGINTERN int MsgType_DerivativeSecurityList_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_DerivativeSecurityList is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_DerivativeSecurityList_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_DerivativeSecurityList);
  return pyobj;
}


SWIGINTERN int MsgType_SecurityStatusRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SecurityStatusRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SecurityStatusRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SecurityStatusRequest);
  return pyobj;
}


SWIGINTERN int MsgType_SecurityStatus_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SecurityStatus is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SecurityStatus_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SecurityStatus);
  return pyobj;
}


SWIGINTERN int MsgType_TradingSessionStatusRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TradingSessionStatusRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TradingSessionStatusRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TradingSessionStatusRequest);
  return pyobj;
}


SWIGINTERN int MsgType_TradingSessionStatus_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TradingSessionStatus is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TradingSessionStatus_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TradingSessionStatus);
  return pyobj;
}


SWIGINTERN int MsgType_NewOrderSingle_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_NewOrderSingle is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_NewOrderSingle_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_NewOrderSingle);
  return pyobj;
}


SWIGINTERN int MsgType_ExecutionReport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ExecutionReport is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ExecutionReport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ExecutionReport);
  return pyobj;
}


SWIGINTERN int MsgType_DontKnowTrade_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_DontKnowTrade is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_DontKnowTrade_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_DontKnowTrade);
  return pyobj;
}


SWIGINTERN int MsgType_OrderCancelReplaceRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_OrderCancelReplaceRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_OrderCancelReplaceRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_OrderCancelReplaceRequest);
  return pyobj;
}


SWIGINTERN int MsgType_OrderCancelRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_OrderCancelRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_OrderCancelRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_OrderCancelRequest);
  return pyobj;
}


SWIGINTERN int MsgType_OrderCancelReject_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_OrderCancelReject is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_OrderCancelReject_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_OrderCancelReject);
  return pyobj;
}


SWIGINTERN int MsgType_OrderStatusRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_OrderStatusRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_OrderStatusRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_OrderStatusRequest);
  return pyobj;
}


SWIGINTERN int MsgType_OrderMassCancelRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_OrderMassCancelRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_OrderMassCancelRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_OrderMassCancelRequest);
  return pyobj;
}


SWIGINTERN int MsgType_OrderMassCancelReport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_OrderMassCancelReport is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_OrderMassCancelReport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_OrderMassCancelReport);
  return pyobj;
}


SWIGINTERN int MsgType_OrderMassStatusRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_OrderMassStatusRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_OrderMassStatusRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_OrderMassStatusRequest);
  return pyobj;
}


SWIGINTERN int MsgType_NewOrderCross_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_NewOrderCross is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_NewOrderCross_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_NewOrderCross);
  return pyobj;
}


SWIGINTERN int MsgType_CrossOrderCancelReplaceRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CrossOrderCancelReplaceRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CrossOrderCancelReplaceRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CrossOrderCancelReplaceRequest);
  return pyobj;
}


SWIGINTERN int MsgType_CrossOrderCancelRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CrossOrderCancelRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CrossOrderCancelRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CrossOrderCancelRequest);
  return pyobj;
}


SWIGINTERN int MsgType_NewOrderMultileg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_NewOrderMultileg is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_NewOrderMultileg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_NewOrderMultileg);
  return pyobj;
}


SWIGINTERN int MsgType_MultilegOrderCancelReplaceRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MultilegOrderCancelReplaceRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MultilegOrderCancelReplaceRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MultilegOrderCancelReplaceRequest);
  return pyobj;
}


SWIGINTERN int MsgType_BidRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_BidRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_BidRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_BidRequest);
  return pyobj;
}


SWIGINTERN int MsgType_BidResponse_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_BidResponse is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_BidResponse_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_BidResponse);
  return pyobj;
}


SWIGINTERN int MsgType_NewOrderList_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_NewOrderList is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_NewOrderList_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_NewOrderList);
  return pyobj;
}


SWIGINTERN int MsgType_ListStrikePrice_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ListStrikePrice is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ListStrikePrice_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ListStrikePrice);
  return pyobj;
}


SWIGINTERN int MsgType_ListStatus_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ListStatus is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ListStatus_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ListStatus);
  return pyobj;
}


SWIGINTERN int MsgType_ListExecute_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ListExecute is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ListExecute_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ListExecute);
  return pyobj;
}


SWIGINTERN int MsgType_ListCancelRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ListCancelRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ListCancelRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ListCancelRequest);
  return pyobj;
}


SWIGINTERN int MsgType_ListStatusRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ListStatusRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ListStatusRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ListStatusRequest);
  return pyobj;
}


SWIGINTERN int MsgType_AllocationInstruction_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_AllocationInstruction is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_AllocationInstruction_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_AllocationInstruction);
  return pyobj;
}


SWIGINTERN int MsgType_AllocationInstructionAck_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_AllocationInstructionAck is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_AllocationInstructionAck_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_AllocationInstructionAck);
  return pyobj;
}


SWIGINTERN int MsgType_AllocationReport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_AllocationReport is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_AllocationReport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_AllocationReport);
  return pyobj;
}


SWIGINTERN int MsgType_AllocationReportAck_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_AllocationReportAck is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_AllocationReportAck_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_AllocationReportAck);
  return pyobj;
}


SWIGINTERN int MsgType_Confirmation_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_Confirmation is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_Confirmation_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_Confirmation);
  return pyobj;
}


SWIGINTERN int MsgType_ConfirmationAck_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ConfirmationAck is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ConfirmationAck_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ConfirmationAck);
  return pyobj;
}


SWIGINTERN int MsgType_ConfirmationRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ConfirmationRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ConfirmationRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ConfirmationRequest);
  return pyobj;
}


SWIGINTERN int MsgType_SettlementInstructions_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SettlementInstructions is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SettlementInstructions_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SettlementInstructions);
  return pyobj;
}


SWIGINTERN int MsgType_SettlementInstructionRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SettlementInstructionRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SettlementInstructionRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SettlementInstructionRequest);
  return pyobj;
}


SWIGINTERN int MsgType_TradeCaptureReportRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TradeCaptureReportRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TradeCaptureReportRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TradeCaptureReportRequest);
  return pyobj;
}


SWIGINTERN int MsgType_TradeCaptureReportRequestAck_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TradeCaptureReportRequestAck is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TradeCaptureReportRequestAck_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TradeCaptureReportRequestAck);
  return pyobj;
}


SWIGINTERN int MsgType_TradeCaptureReport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TradeCaptureReport is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TradeCaptureReport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TradeCaptureReport);
  return pyobj;
}


SWIGINTERN int MsgType_TradeCaptureReportAck_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TradeCaptureReportAck is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TradeCaptureReportAck_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TradeCaptureReportAck);
  return pyobj;
}


SWIGINTERN int MsgType_RegistrationInstructions_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_RegistrationInstructions is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_RegistrationInstructions_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_RegistrationInstructions);
  return pyobj;
}


SWIGINTERN int MsgType_RegistrationInstructionsResponse_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_RegistrationInstructionsResponse is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_RegistrationInstructionsResponse_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_RegistrationInstructionsResponse);
  return pyobj;
}


SWIGINTERN int MsgType_PositionMaintenanceRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_PositionMaintenanceRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_PositionMaintenanceRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_PositionMaintenanceRequest);
  return pyobj;
}


SWIGINTERN int MsgType_PositionMaintenanceReport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_PositionMaintenanceReport is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_PositionMaintenanceReport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_PositionMaintenanceReport);
  return pyobj;
}


SWIGINTERN int MsgType_RequestForPositions_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_RequestForPositions is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_RequestForPositions_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_RequestForPositions);
  return pyobj;
}


SWIGINTERN int MsgType_RequestForPositionsAck_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_RequestForPositionsAck is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_RequestForPositionsAck_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_RequestForPositionsAck);
  return pyobj;
}


SWIGINTERN int MsgType_PositionReport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_PositionReport is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_PositionReport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_PositionReport);
  return pyobj;
}


SWIGINTERN int MsgType_AssignmentReport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_AssignmentReport is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_AssignmentReport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_AssignmentReport);
  return pyobj;
}


SWIGINTERN int MsgType_CollateralRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CollateralRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CollateralRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CollateralRequest);
  return pyobj;
}


SWIGINTERN int MsgType_CollateralAssignment_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CollateralAssignment is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CollateralAssignment_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CollateralAssignment);
  return pyobj;
}


SWIGINTERN int MsgType_CollateralResponse_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CollateralResponse is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CollateralResponse_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CollateralResponse);
  return pyobj;
}


SWIGINTERN int MsgType_CollateralReport_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CollateralReport is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CollateralReport_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CollateralReport);
  return pyobj;
}


SWIGINTERN int MsgType_CollateralInquiry_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CollateralInquiry is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CollateralInquiry_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CollateralInquiry);
  return pyobj;
}


SWIGINTERN int MsgType_NetworkStatusRequest_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_NetworkStatusRequest is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_NetworkStatusRequest_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_NetworkStatusRequest);
  return pyobj;
}


SWIGINTERN int MsgType_NetworkStatusResponse_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_NetworkStatusResponse is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_NetworkStatusResponse_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_NetworkStatusResponse);
  return pyobj;
}


SWIGINTERN int MsgType_CollateralInquiryAck_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CollateralInquiryAck is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CollateralInquiryAck_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CollateralInquiryAck);
  return pyobj;
}


SWIGINTERN int AdvSide_BUY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AdvSide_BUY is read-only.");
  return 1;
}


SWIGINTERN PyObject *AdvSide_BUY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::AdvSide_BUY));
  return pyobj;
}


SWIGINTERN int AdvSide_SELL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AdvSide_SELL is read-only.");
  return 1;
}


SWIGINTERN PyObject *AdvSide_SELL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::AdvSide_SELL));
  return pyobj;
}


SWIGINTERN int AdvSide_CROSS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AdvSide_CROSS is read-only.");
  return 1;
}


SWIGINTERN PyObject *AdvSide_CROSS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::AdvSide_CROSS));
  return pyobj;
}


SWIGINTERN int AdvSide_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AdvSide_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *AdvSide_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::AdvSide_TRADE));
  return pyobj;
}


SWIGINTERN int AdvTransType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AdvTransType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *AdvTransType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::AdvTransType_NEW);
  return pyobj;
}


SWIGINTERN int AdvTransType_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AdvTransType_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *AdvTransType_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::AdvTransType_CANCEL);
  return pyobj;
}


SWIGINTERN int AdvTransType_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AdvTransType_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *AdvTransType_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::AdvTransType_REPLACE);
  return pyobj;
}


SWIGINTERN int CommType_PER_UNIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CommType_PER_UNIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CommType_PER_UNIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CommType_PER_UNIT));
  return pyobj;
}


SWIGINTERN int CommType_PERCENTAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CommType_PERCENTAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CommType_PERCENTAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CommType_PERCENTAGE));
  return pyobj;
}


SWIGINTERN int CommType_ABSOLUTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CommType_ABSOLUTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CommType_ABSOLUTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CommType_ABSOLUTE));
  return pyobj;
}


SWIGINTERN int CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT));
  return pyobj;
}


SWIGINTERN int CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS is read-only.");
  return 1;
}


SWIGINTERN PyObject *CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS));
  return pyobj;
}


SWIGINTERN int CommType_POINTS_PER_BOND_OR_OR_CONTRACT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CommType_POINTS_PER_BOND_OR_OR_CONTRACT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CommType_POINTS_PER_BOND_OR_OR_CONTRACT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CommType_POINTS_PER_BOND_OR_OR_CONTRACT));
  return pyobj;
}


SWIGINTERN int ExecInst_NOT_HELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_NOT_HELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_NOT_HELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_NOT_HELD));
  return pyobj;
}


SWIGINTERN int ExecInst_WORK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_WORK is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_WORK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_WORK));
  return pyobj;
}


SWIGINTERN int ExecInst_GO_ALONG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_GO_ALONG is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_GO_ALONG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_GO_ALONG));
  return pyobj;
}


SWIGINTERN int ExecInst_OVER_THE_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_OVER_THE_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_OVER_THE_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_OVER_THE_DAY));
  return pyobj;
}


SWIGINTERN int ExecInst_HELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_HELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_HELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_HELD));
  return pyobj;
}


SWIGINTERN int ExecInst_PARTICIPATE_DONT_INITIATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_PARTICIPATE_DONT_INITIATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_PARTICIPATE_DONT_INITIATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_PARTICIPATE_DONT_INITIATE));
  return pyobj;
}


SWIGINTERN int ExecInst_STRICT_SCALE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_STRICT_SCALE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_STRICT_SCALE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_STRICT_SCALE));
  return pyobj;
}


SWIGINTERN int ExecInst_TRY_TO_SCALE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_TRY_TO_SCALE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_TRY_TO_SCALE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_TRY_TO_SCALE));
  return pyobj;
}


SWIGINTERN int ExecInst_STAY_ON_BIDSIDE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_STAY_ON_BIDSIDE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_STAY_ON_BIDSIDE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_STAY_ON_BIDSIDE));
  return pyobj;
}


SWIGINTERN int ExecInst_STAY_ON_OFFERSIDE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_STAY_ON_OFFERSIDE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_STAY_ON_OFFERSIDE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_STAY_ON_OFFERSIDE));
  return pyobj;
}


SWIGINTERN int ExecInst_NO_CROSS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_NO_CROSS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_NO_CROSS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_NO_CROSS));
  return pyobj;
}


SWIGINTERN int ExecInst_OK_TO_CROSS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_OK_TO_CROSS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_OK_TO_CROSS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_OK_TO_CROSS));
  return pyobj;
}


SWIGINTERN int ExecInst_CALL_FIRST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_CALL_FIRST is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_CALL_FIRST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_CALL_FIRST));
  return pyobj;
}


SWIGINTERN int ExecInst_PERCENT_OF_VOLUME_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_PERCENT_OF_VOLUME is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_PERCENT_OF_VOLUME_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_PERCENT_OF_VOLUME));
  return pyobj;
}


SWIGINTERN int ExecInst_DO_NOT_INCREASE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_DO_NOT_INCREASE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_DO_NOT_INCREASE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_DO_NOT_INCREASE));
  return pyobj;
}


SWIGINTERN int ExecInst_DO_NOT_REDUCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_DO_NOT_REDUCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_DO_NOT_REDUCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_DO_NOT_REDUCE));
  return pyobj;
}


SWIGINTERN int ExecInst_ALL_OR_NONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_ALL_OR_NONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_ALL_OR_NONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_ALL_OR_NONE));
  return pyobj;
}


SWIGINTERN int ExecInst_REINSTATE_ON_SYSTEM_FAILURE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_REINSTATE_ON_SYSTEM_FAILURE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_REINSTATE_ON_SYSTEM_FAILURE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_REINSTATE_ON_SYSTEM_FAILURE));
  return pyobj;
}


SWIGINTERN int ExecInst_INSTITUTIONS_ONLY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_INSTITUTIONS_ONLY is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_INSTITUTIONS_ONLY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_INSTITUTIONS_ONLY));
  return pyobj;
}


SWIGINTERN int ExecInst_REINSTATE_ON_TRADING_HALT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_REINSTATE_ON_TRADING_HALT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_REINSTATE_ON_TRADING_HALT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_REINSTATE_ON_TRADING_HALT));
  return pyobj;
}


SWIGINTERN int ExecInst_CANCEL_ON_TRADING_HALT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_CANCEL_ON_TRADING_HALT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_CANCEL_ON_TRADING_HALT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_CANCEL_ON_TRADING_HALT));
  return pyobj;
}


SWIGINTERN int ExecInst_LAST_PEG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_LAST_PEG is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_LAST_PEG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_LAST_PEG));
  return pyobj;
}


SWIGINTERN int ExecInst_MID_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_MID_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_MID_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_MID_PRICE));
  return pyobj;
}


SWIGINTERN int ExecInst_NON_NEGOTIABLE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_NON_NEGOTIABLE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_NON_NEGOTIABLE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_NON_NEGOTIABLE));
  return pyobj;
}


SWIGINTERN int ExecInst_OPENING_PEG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_OPENING_PEG is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_OPENING_PEG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_OPENING_PEG));
  return pyobj;
}


SWIGINTERN int ExecInst_MARKET_PEG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_MARKET_PEG is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_MARKET_PEG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_MARKET_PEG));
  return pyobj;
}


SWIGINTERN int ExecInst_CANCEL_ON_SYSTEM_FAILURE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_CANCEL_ON_SYSTEM_FAILURE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_CANCEL_ON_SYSTEM_FAILURE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_CANCEL_ON_SYSTEM_FAILURE));
  return pyobj;
}


SWIGINTERN int ExecInst_PRIMARY_PEG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_PRIMARY_PEG is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_PRIMARY_PEG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_PRIMARY_PEG));
  return pyobj;
}


SWIGINTERN int ExecInst_SUSPEND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_SUSPEND is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_SUSPEND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_SUSPEND));
  return pyobj;
}


SWIGINTERN int ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER));
  return pyobj;
}


SWIGINTERN int ExecInst_CUSTOMER_DISPLAY_INSTRUCTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_CUSTOMER_DISPLAY_INSTRUCTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_CUSTOMER_DISPLAY_INSTRUCTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_CUSTOMER_DISPLAY_INSTRUCTION));
  return pyobj;
}


SWIGINTERN int ExecInst_NETTING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_NETTING is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_NETTING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_NETTING));
  return pyobj;
}


SWIGINTERN int ExecInst_PEG_TO_VWAP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_PEG_TO_VWAP is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_PEG_TO_VWAP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_PEG_TO_VWAP));
  return pyobj;
}


SWIGINTERN int ExecInst_TRADE_ALONG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_TRADE_ALONG is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_TRADE_ALONG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_TRADE_ALONG));
  return pyobj;
}


SWIGINTERN int ExecInst_TRY_TO_STOP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_TRY_TO_STOP is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_TRY_TO_STOP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_TRY_TO_STOP));
  return pyobj;
}


SWIGINTERN int ExecInst_CANCEL_IF_NOT_BEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_CANCEL_IF_NOT_BEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_CANCEL_IF_NOT_BEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_CANCEL_IF_NOT_BEST));
  return pyobj;
}


SWIGINTERN int ExecInst_TRAILING_STOP_PEG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_TRAILING_STOP_PEG is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_TRAILING_STOP_PEG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_TRAILING_STOP_PEG));
  return pyobj;
}


SWIGINTERN int ExecInst_STRICT_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_STRICT_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_STRICT_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_STRICT_LIMIT));
  return pyobj;
}


SWIGINTERN int ExecInst_IGNORE_PRICE_VALIDITY_CHECKS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_IGNORE_PRICE_VALIDITY_CHECKS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_IGNORE_PRICE_VALIDITY_CHECKS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_IGNORE_PRICE_VALIDITY_CHECKS));
  return pyobj;
}


SWIGINTERN int ExecInst_PEG_TO_LIMIT_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_PEG_TO_LIMIT_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_PEG_TO_LIMIT_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_PEG_TO_LIMIT_PRICE));
  return pyobj;
}


SWIGINTERN int ExecInst_WORK_TO_TARGET_STRATEGY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecInst_WORK_TO_TARGET_STRATEGY is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecInst_WORK_TO_TARGET_STRATEGY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecInst_WORK_TO_TARGET_STRATEGY));
  return pyobj;
}


SWIGINTERN int HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE));
  return pyobj;
}


SWIGINTERN int HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC is read-only.");
  return 1;
}


SWIGINTERN PyObject *HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC));
  return pyobj;
}


SWIGINTERN int HandlInst_MANUAL_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HandlInst_MANUAL_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *HandlInst_MANUAL_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::HandlInst_MANUAL_ORDER));
  return pyobj;
}


SWIGINTERN int SecurityIDSource_CUSIP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_CUSIP is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_CUSIP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_CUSIP);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_SEDOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_SEDOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_SEDOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_SEDOL);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_QUIK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_QUIK is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_QUIK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_QUIK);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_ISIN_NUMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_ISIN_NUMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_ISIN_NUMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_ISIN_NUMBER);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_RIC_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_RIC_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_RIC_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_RIC_CODE);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_ISO_CURRENCY_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_ISO_CURRENCY_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_ISO_CURRENCY_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_ISO_CURRENCY_CODE);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_ISO_COUNTRY_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_ISO_COUNTRY_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_ISO_COUNTRY_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_ISO_COUNTRY_CODE);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_EXCHANGE_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_EXCHANGE_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_EXCHANGE_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_EXCHANGE_SYMBOL);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_BLOOMBERG_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_BLOOMBERG_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_BLOOMBERG_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_BLOOMBERG_SYMBOL);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_WERTPAPIER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_WERTPAPIER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_WERTPAPIER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_WERTPAPIER);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_DUTCH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_DUTCH is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_DUTCH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_DUTCH);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_VALOREN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_VALOREN is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_VALOREN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_VALOREN);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_SICOVAM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_SICOVAM is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_SICOVAM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_SICOVAM);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_BELGIAN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_BELGIAN is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_BELGIAN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_BELGIAN);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_COMMON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_COMMON is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_COMMON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_COMMON);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_CLEARING_HOUSE_CLEARING_ORGANIZATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_CLEARING_HOUSE_CLEARING_ORGANIZATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_CLEARING_HOUSE_CLEARING_ORGANIZATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_CLEARING_HOUSE_CLEARING_ORGANIZATION);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION);
  return pyobj;
}


SWIGINTERN int SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY);
  return pyobj;
}


SWIGINTERN int IOIQltyInd_LOW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQltyInd_LOW is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQltyInd_LOW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQltyInd_LOW));
  return pyobj;
}


SWIGINTERN int IOIQltyInd_MEDIUM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQltyInd_MEDIUM is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQltyInd_MEDIUM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQltyInd_MEDIUM));
  return pyobj;
}


SWIGINTERN int IOIQltyInd_HIGH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQltyInd_HIGH is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQltyInd_HIGH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQltyInd_HIGH));
  return pyobj;
}


SWIGINTERN int IOITransType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOITransType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOITransType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOITransType_NEW));
  return pyobj;
}


SWIGINTERN int IOITransType_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOITransType_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOITransType_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOITransType_CANCEL));
  return pyobj;
}


SWIGINTERN int IOITransType_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOITransType_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOITransType_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOITransType_REPLACE));
  return pyobj;
}


SWIGINTERN int LastCapacity_AGENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LastCapacity_AGENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *LastCapacity_AGENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::LastCapacity_AGENT));
  return pyobj;
}


SWIGINTERN int LastCapacity_CROSS_AS_AGENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LastCapacity_CROSS_AS_AGENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *LastCapacity_CROSS_AS_AGENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::LastCapacity_CROSS_AS_AGENT));
  return pyobj;
}


SWIGINTERN int LastCapacity_CROSS_AS_PRINCIPAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LastCapacity_CROSS_AS_PRINCIPAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *LastCapacity_CROSS_AS_PRINCIPAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::LastCapacity_CROSS_AS_PRINCIPAL));
  return pyobj;
}


SWIGINTERN int LastCapacity_PRINCIPAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LastCapacity_PRINCIPAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *LastCapacity_PRINCIPAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::LastCapacity_PRINCIPAL));
  return pyobj;
}


SWIGINTERN int MsgType_HEARTBEAT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_HEARTBEAT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_HEARTBEAT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_HEARTBEAT);
  return pyobj;
}


SWIGINTERN int MsgType_TEST_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TEST_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TEST_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TEST_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_RESEND_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_RESEND_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_RESEND_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_RESEND_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_REJECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_REJECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_REJECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_REJECT);
  return pyobj;
}


SWIGINTERN int MsgType_SEQUENCE_RESET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SEQUENCE_RESET is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SEQUENCE_RESET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SEQUENCE_RESET);
  return pyobj;
}


SWIGINTERN int MsgType_LOGOUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_LOGOUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_LOGOUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_LOGOUT);
  return pyobj;
}


SWIGINTERN int MsgType_INDICATION_OF_INTEREST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_INDICATION_OF_INTEREST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_INDICATION_OF_INTEREST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_INDICATION_OF_INTEREST);
  return pyobj;
}


SWIGINTERN int MsgType_ADVERTISEMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ADVERTISEMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ADVERTISEMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ADVERTISEMENT);
  return pyobj;
}


SWIGINTERN int MsgType_EXECUTION_REPORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_EXECUTION_REPORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_EXECUTION_REPORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_EXECUTION_REPORT);
  return pyobj;
}


SWIGINTERN int MsgType_ORDER_CANCEL_REJECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ORDER_CANCEL_REJECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ORDER_CANCEL_REJECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ORDER_CANCEL_REJECT);
  return pyobj;
}


SWIGINTERN int MsgType_LOGON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_LOGON is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_LOGON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_LOGON);
  return pyobj;
}


SWIGINTERN int MsgType_NEWS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_NEWS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_NEWS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_NEWS);
  return pyobj;
}


SWIGINTERN int MsgType_EMAIL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_EMAIL is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_EMAIL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_EMAIL);
  return pyobj;
}


SWIGINTERN int MsgType_ORDER_SINGLE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ORDER_SINGLE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ORDER_SINGLE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ORDER_SINGLE);
  return pyobj;
}


SWIGINTERN int MsgType_ORDER_LIST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ORDER_LIST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ORDER_LIST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ORDER_LIST);
  return pyobj;
}


SWIGINTERN int MsgType_ORDER_CANCEL_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ORDER_CANCEL_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ORDER_CANCEL_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ORDER_CANCEL_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_ORDER_CANCEL_REPLACE_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ORDER_CANCEL_REPLACE_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ORDER_CANCEL_REPLACE_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ORDER_CANCEL_REPLACE_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_ORDER_STATUS_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ORDER_STATUS_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ORDER_STATUS_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ORDER_STATUS_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_ALLOCATION_INSTRUCTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ALLOCATION_INSTRUCTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ALLOCATION_INSTRUCTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ALLOCATION_INSTRUCTION);
  return pyobj;
}


SWIGINTERN int MsgType_LIST_CANCEL_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_LIST_CANCEL_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_LIST_CANCEL_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_LIST_CANCEL_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_LIST_EXECUTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_LIST_EXECUTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_LIST_EXECUTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_LIST_EXECUTE);
  return pyobj;
}


SWIGINTERN int MsgType_LIST_STATUS_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_LIST_STATUS_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_LIST_STATUS_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_LIST_STATUS_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_LIST_STATUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_LIST_STATUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_LIST_STATUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_LIST_STATUS);
  return pyobj;
}


SWIGINTERN int MsgType_ALLOCATION_INSTRUCTION_ACK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ALLOCATION_INSTRUCTION_ACK is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ALLOCATION_INSTRUCTION_ACK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ALLOCATION_INSTRUCTION_ACK);
  return pyobj;
}


SWIGINTERN int MsgType_DONT_KNOW_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_DONT_KNOW_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_DONT_KNOW_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_DONT_KNOW_TRADE);
  return pyobj;
}


SWIGINTERN int MsgType_QUOTE_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QUOTE_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QUOTE_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QUOTE_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_QUOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QUOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QUOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QUOTE);
  return pyobj;
}


SWIGINTERN int MsgType_SETTLEMENT_INSTRUCTIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SETTLEMENT_INSTRUCTIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SETTLEMENT_INSTRUCTIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SETTLEMENT_INSTRUCTIONS);
  return pyobj;
}


SWIGINTERN int MsgType_MARKET_DATA_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MARKET_DATA_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MARKET_DATA_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MARKET_DATA_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH);
  return pyobj;
}


SWIGINTERN int MsgType_MARKET_DATA_INCREMENTAL_REFRESH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MARKET_DATA_INCREMENTAL_REFRESH is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MARKET_DATA_INCREMENTAL_REFRESH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MARKET_DATA_INCREMENTAL_REFRESH);
  return pyobj;
}


SWIGINTERN int MsgType_MARKET_DATA_REQUEST_REJECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MARKET_DATA_REQUEST_REJECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MARKET_DATA_REQUEST_REJECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MARKET_DATA_REQUEST_REJECT);
  return pyobj;
}


SWIGINTERN int MsgType_QUOTE_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QUOTE_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QUOTE_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QUOTE_CANCEL);
  return pyobj;
}


SWIGINTERN int MsgType_QUOTE_STATUS_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QUOTE_STATUS_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QUOTE_STATUS_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QUOTE_STATUS_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_MASS_QUOTE_ACKNOWLEDGEMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MASS_QUOTE_ACKNOWLEDGEMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MASS_QUOTE_ACKNOWLEDGEMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MASS_QUOTE_ACKNOWLEDGEMENT);
  return pyobj;
}


SWIGINTERN int MsgType_SECURITY_DEFINITION_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SECURITY_DEFINITION_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SECURITY_DEFINITION_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SECURITY_DEFINITION_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_SECURITY_DEFINITION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SECURITY_DEFINITION is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SECURITY_DEFINITION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SECURITY_DEFINITION);
  return pyobj;
}


SWIGINTERN int MsgType_SECURITY_STATUS_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SECURITY_STATUS_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SECURITY_STATUS_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SECURITY_STATUS_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_SECURITY_STATUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SECURITY_STATUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SECURITY_STATUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SECURITY_STATUS);
  return pyobj;
}


SWIGINTERN int MsgType_TRADING_SESSION_STATUS_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TRADING_SESSION_STATUS_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TRADING_SESSION_STATUS_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TRADING_SESSION_STATUS_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_TRADING_SESSION_STATUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TRADING_SESSION_STATUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TRADING_SESSION_STATUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TRADING_SESSION_STATUS);
  return pyobj;
}


SWIGINTERN int MsgType_MASS_QUOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MASS_QUOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MASS_QUOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MASS_QUOTE);
  return pyobj;
}


SWIGINTERN int MsgType_BUSINESS_MESSAGE_REJECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_BUSINESS_MESSAGE_REJECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_BUSINESS_MESSAGE_REJECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_BUSINESS_MESSAGE_REJECT);
  return pyobj;
}


SWIGINTERN int MsgType_BID_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_BID_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_BID_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_BID_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_BID_RESPONSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_BID_RESPONSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_BID_RESPONSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_BID_RESPONSE);
  return pyobj;
}


SWIGINTERN int MsgType_LIST_STRIKE_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_LIST_STRIKE_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_LIST_STRIKE_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_LIST_STRIKE_PRICE);
  return pyobj;
}


SWIGINTERN int MsgType_XML_MESSAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_XML_MESSAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_XML_MESSAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_XML_MESSAGE);
  return pyobj;
}


SWIGINTERN int MsgType_REGISTRATION_INSTRUCTIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_REGISTRATION_INSTRUCTIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_REGISTRATION_INSTRUCTIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_REGISTRATION_INSTRUCTIONS);
  return pyobj;
}


SWIGINTERN int MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE);
  return pyobj;
}


SWIGINTERN int MsgType_ORDER_MASS_CANCEL_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ORDER_MASS_CANCEL_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ORDER_MASS_CANCEL_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ORDER_MASS_CANCEL_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_ORDER_MASS_CANCEL_REPORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ORDER_MASS_CANCEL_REPORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ORDER_MASS_CANCEL_REPORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ORDER_MASS_CANCEL_REPORT);
  return pyobj;
}


SWIGINTERN int MsgType_NEW_ORDER_CROSS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_NEW_ORDER_CROSS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_NEW_ORDER_CROSS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_NEW_ORDER_CROSS);
  return pyobj;
}


SWIGINTERN int MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_CROSS_ORDER_CANCEL_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CROSS_ORDER_CANCEL_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CROSS_ORDER_CANCEL_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CROSS_ORDER_CANCEL_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_SECURITY_TYPE_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SECURITY_TYPE_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SECURITY_TYPE_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SECURITY_TYPE_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_SECURITY_TYPES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SECURITY_TYPES is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SECURITY_TYPES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SECURITY_TYPES);
  return pyobj;
}


SWIGINTERN int MsgType_SECURITY_LIST_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SECURITY_LIST_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SECURITY_LIST_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SECURITY_LIST_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_SECURITY_LIST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SECURITY_LIST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SECURITY_LIST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SECURITY_LIST);
  return pyobj;
}


SWIGINTERN int MsgType_DERIVATIVE_SECURITY_LIST_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_DERIVATIVE_SECURITY_LIST_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_DERIVATIVE_SECURITY_LIST_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_DERIVATIVE_SECURITY_LIST_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_DERIVATIVE_SECURITY_LIST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_DERIVATIVE_SECURITY_LIST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_DERIVATIVE_SECURITY_LIST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_DERIVATIVE_SECURITY_LIST);
  return pyobj;
}


SWIGINTERN int MsgType_NEW_ORDER_MULTILEG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_NEW_ORDER_MULTILEG is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_NEW_ORDER_MULTILEG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_NEW_ORDER_MULTILEG);
  return pyobj;
}


SWIGINTERN int MsgType_MULTILEG_ORDER_CANCEL_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_MULTILEG_ORDER_CANCEL_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_MULTILEG_ORDER_CANCEL_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_MULTILEG_ORDER_CANCEL_REPLACE);
  return pyobj;
}


SWIGINTERN int MsgType_TRADE_CAPTURE_REPORT_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TRADE_CAPTURE_REPORT_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TRADE_CAPTURE_REPORT_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TRADE_CAPTURE_REPORT_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_TRADE_CAPTURE_REPORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TRADE_CAPTURE_REPORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TRADE_CAPTURE_REPORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TRADE_CAPTURE_REPORT);
  return pyobj;
}


SWIGINTERN int MsgType_ORDER_MASS_STATUS_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ORDER_MASS_STATUS_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ORDER_MASS_STATUS_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ORDER_MASS_STATUS_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_QUOTE_REQUEST_REJECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QUOTE_REQUEST_REJECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QUOTE_REQUEST_REJECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QUOTE_REQUEST_REJECT);
  return pyobj;
}


SWIGINTERN int MsgType_RFQ_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_RFQ_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_RFQ_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_RFQ_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_QUOTE_STATUS_REPORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QUOTE_STATUS_REPORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QUOTE_STATUS_REPORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QUOTE_STATUS_REPORT);
  return pyobj;
}


SWIGINTERN int MsgType_QUOTE_RESPONSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_QUOTE_RESPONSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_QUOTE_RESPONSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_QUOTE_RESPONSE);
  return pyobj;
}


SWIGINTERN int MsgType_CONFIRMATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CONFIRMATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CONFIRMATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CONFIRMATION);
  return pyobj;
}


SWIGINTERN int MsgType_POSITION_MAINTENANCE_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_POSITION_MAINTENANCE_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_POSITION_MAINTENANCE_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_POSITION_MAINTENANCE_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_POSITION_MAINTENANCE_REPORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_POSITION_MAINTENANCE_REPORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_POSITION_MAINTENANCE_REPORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_POSITION_MAINTENANCE_REPORT);
  return pyobj;
}


SWIGINTERN int MsgType_REQUEST_FOR_POSITIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_REQUEST_FOR_POSITIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_REQUEST_FOR_POSITIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_REQUEST_FOR_POSITIONS);
  return pyobj;
}


SWIGINTERN int MsgType_REQUEST_FOR_POSITIONS_ACK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_REQUEST_FOR_POSITIONS_ACK is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_REQUEST_FOR_POSITIONS_ACK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_REQUEST_FOR_POSITIONS_ACK);
  return pyobj;
}


SWIGINTERN int MsgType_POSITION_REPORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_POSITION_REPORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_POSITION_REPORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_POSITION_REPORT);
  return pyobj;
}


SWIGINTERN int MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK);
  return pyobj;
}


SWIGINTERN int MsgType_TRADE_CAPTURE_REPORT_ACK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_TRADE_CAPTURE_REPORT_ACK is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_TRADE_CAPTURE_REPORT_ACK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_TRADE_CAPTURE_REPORT_ACK);
  return pyobj;
}


SWIGINTERN int MsgType_ALLOCATION_REPORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ALLOCATION_REPORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ALLOCATION_REPORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ALLOCATION_REPORT);
  return pyobj;
}


SWIGINTERN int MsgType_ALLOCATION_REPORT_ACK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ALLOCATION_REPORT_ACK is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ALLOCATION_REPORT_ACK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ALLOCATION_REPORT_ACK);
  return pyobj;
}


SWIGINTERN int MsgType_CONFIRMATION_ACK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CONFIRMATION_ACK is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CONFIRMATION_ACK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CONFIRMATION_ACK);
  return pyobj;
}


SWIGINTERN int MsgType_SETTLEMENT_INSTRUCTION_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_SETTLEMENT_INSTRUCTION_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_SETTLEMENT_INSTRUCTION_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_SETTLEMENT_INSTRUCTION_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_ASSIGNMENT_REPORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_ASSIGNMENT_REPORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_ASSIGNMENT_REPORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_ASSIGNMENT_REPORT);
  return pyobj;
}


SWIGINTERN int MsgType_COLLATERAL_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_COLLATERAL_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_COLLATERAL_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_COLLATERAL_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_COLLATERAL_ASSIGNMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_COLLATERAL_ASSIGNMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_COLLATERAL_ASSIGNMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_COLLATERAL_ASSIGNMENT);
  return pyobj;
}


SWIGINTERN int MsgType_COLLATERAL_RESPONSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_COLLATERAL_RESPONSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_COLLATERAL_RESPONSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_COLLATERAL_RESPONSE);
  return pyobj;
}


SWIGINTERN int MsgType_COLLATERAL_REPORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_COLLATERAL_REPORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_COLLATERAL_REPORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_COLLATERAL_REPORT);
  return pyobj;
}


SWIGINTERN int MsgType_COLLATERAL_INQUIRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_COLLATERAL_INQUIRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_COLLATERAL_INQUIRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_COLLATERAL_INQUIRY);
  return pyobj;
}


SWIGINTERN int MsgType_NETWORK_STATUS_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_NETWORK_STATUS_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_NETWORK_STATUS_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_NETWORK_STATUS_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_NETWORK_STATUS_RESPONSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_NETWORK_STATUS_RESPONSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_NETWORK_STATUS_RESPONSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_NETWORK_STATUS_RESPONSE);
  return pyobj;
}


SWIGINTERN int MsgType_USER_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_USER_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_USER_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_USER_REQUEST);
  return pyobj;
}


SWIGINTERN int MsgType_USER_RESPONSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_USER_RESPONSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_USER_RESPONSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_USER_RESPONSE);
  return pyobj;
}


SWIGINTERN int MsgType_COLLATERAL_INQUIRY_ACK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_COLLATERAL_INQUIRY_ACK is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_COLLATERAL_INQUIRY_ACK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_COLLATERAL_INQUIRY_ACK);
  return pyobj;
}


SWIGINTERN int MsgType_CONFIRMATION_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgType_CONFIRMATION_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgType_CONFIRMATION_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MsgType_CONFIRMATION_REQUEST);
  return pyobj;
}


SWIGINTERN int OrdStatus_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_NEW));
  return pyobj;
}


SWIGINTERN int OrdStatus_PARTIALLY_FILLED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_PARTIALLY_FILLED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_PARTIALLY_FILLED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_PARTIALLY_FILLED));
  return pyobj;
}


SWIGINTERN int OrdStatus_FILLED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_FILLED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_FILLED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_FILLED));
  return pyobj;
}


SWIGINTERN int OrdStatus_DONE_FOR_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_DONE_FOR_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_DONE_FOR_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_DONE_FOR_DAY));
  return pyobj;
}


SWIGINTERN int OrdStatus_CANCELED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_CANCELED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_CANCELED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_CANCELED));
  return pyobj;
}


SWIGINTERN int OrdStatus_REPLACED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_REPLACED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_REPLACED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_REPLACED));
  return pyobj;
}


SWIGINTERN int OrdStatus_PENDING_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_PENDING_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_PENDING_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_PENDING_CANCEL));
  return pyobj;
}


SWIGINTERN int OrdStatus_STOPPED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_STOPPED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_STOPPED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_STOPPED));
  return pyobj;
}


SWIGINTERN int OrdStatus_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_REJECTED));
  return pyobj;
}


SWIGINTERN int OrdStatus_SUSPENDED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_SUSPENDED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_SUSPENDED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_SUSPENDED));
  return pyobj;
}


SWIGINTERN int OrdStatus_PENDING_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_PENDING_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_PENDING_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_PENDING_NEW));
  return pyobj;
}


SWIGINTERN int OrdStatus_CALCULATED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_CALCULATED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_CALCULATED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_CALCULATED));
  return pyobj;
}


SWIGINTERN int OrdStatus_EXPIRED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_EXPIRED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_EXPIRED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_EXPIRED));
  return pyobj;
}


SWIGINTERN int OrdStatus_ACCEPTED_FOR_BIDDING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_ACCEPTED_FOR_BIDDING is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_ACCEPTED_FOR_BIDDING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_ACCEPTED_FOR_BIDDING));
  return pyobj;
}


SWIGINTERN int OrdStatus_PENDING_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdStatus_PENDING_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdStatus_PENDING_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdStatus_PENDING_REPLACE));
  return pyobj;
}


SWIGINTERN int OrdType_MARKET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_MARKET is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_MARKET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_MARKET));
  return pyobj;
}


SWIGINTERN int OrdType_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_LIMIT));
  return pyobj;
}


SWIGINTERN int OrdType_STOP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_STOP is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_STOP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_STOP));
  return pyobj;
}


SWIGINTERN int OrdType_STOP_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_STOP_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_STOP_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_STOP_LIMIT));
  return pyobj;
}


SWIGINTERN int OrdType_MARKET_ON_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_MARKET_ON_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_MARKET_ON_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_MARKET_ON_CLOSE));
  return pyobj;
}


SWIGINTERN int OrdType_WITH_OR_WITHOUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_WITH_OR_WITHOUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_WITH_OR_WITHOUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_WITH_OR_WITHOUT));
  return pyobj;
}


SWIGINTERN int OrdType_LIMIT_OR_BETTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_LIMIT_OR_BETTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_LIMIT_OR_BETTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_LIMIT_OR_BETTER));
  return pyobj;
}


SWIGINTERN int OrdType_LIMIT_WITH_OR_WITHOUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_LIMIT_WITH_OR_WITHOUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_LIMIT_WITH_OR_WITHOUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_LIMIT_WITH_OR_WITHOUT));
  return pyobj;
}


SWIGINTERN int OrdType_ON_BASIS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_ON_BASIS is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_ON_BASIS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_ON_BASIS));
  return pyobj;
}


SWIGINTERN int OrdType_ON_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_ON_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_ON_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_ON_CLOSE));
  return pyobj;
}


SWIGINTERN int OrdType_LIMIT_ON_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_LIMIT_ON_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_LIMIT_ON_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_LIMIT_ON_CLOSE));
  return pyobj;
}


SWIGINTERN int OrdType_FOREX_MARKET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_FOREX_MARKET is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_FOREX_MARKET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_FOREX_MARKET));
  return pyobj;
}


SWIGINTERN int OrdType_PREVIOUSLY_QUOTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_PREVIOUSLY_QUOTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_PREVIOUSLY_QUOTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_PREVIOUSLY_QUOTED));
  return pyobj;
}


SWIGINTERN int OrdType_PREVIOUSLY_INDICATED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_PREVIOUSLY_INDICATED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_PREVIOUSLY_INDICATED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_PREVIOUSLY_INDICATED));
  return pyobj;
}


SWIGINTERN int OrdType_FOREX_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_FOREX_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_FOREX_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_FOREX_LIMIT));
  return pyobj;
}


SWIGINTERN int OrdType_FOREX_SWAP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_FOREX_SWAP is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_FOREX_SWAP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_FOREX_SWAP));
  return pyobj;
}


SWIGINTERN int OrdType_FOREX_PREVIOUSLY_QUOTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_FOREX_PREVIOUSLY_QUOTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_FOREX_PREVIOUSLY_QUOTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_FOREX_PREVIOUSLY_QUOTED));
  return pyobj;
}


SWIGINTERN int OrdType_FUNARI_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_FUNARI is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_FUNARI_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_FUNARI));
  return pyobj;
}


SWIGINTERN int OrdType_MARKET_IF_TOUCHED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_MARKET_IF_TOUCHED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_MARKET_IF_TOUCHED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_MARKET_IF_TOUCHED));
  return pyobj;
}


SWIGINTERN int OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT));
  return pyobj;
}


SWIGINTERN int OrdType_PREVIOUS_FUND_VALUATION_POINT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_PREVIOUS_FUND_VALUATION_POINT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_PREVIOUS_FUND_VALUATION_POINT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_PREVIOUS_FUND_VALUATION_POINT));
  return pyobj;
}


SWIGINTERN int OrdType_NEXT_FUND_VALUATION_POINT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_NEXT_FUND_VALUATION_POINT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_NEXT_FUND_VALUATION_POINT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_NEXT_FUND_VALUATION_POINT));
  return pyobj;
}


SWIGINTERN int OrdType_PEGGED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdType_PEGGED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdType_PEGGED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrdType_PEGGED));
  return pyobj;
}


SWIGINTERN int Side_BUY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_BUY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_BUY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_BUY));
  return pyobj;
}


SWIGINTERN int Side_SELL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_SELL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_SELL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_SELL));
  return pyobj;
}


SWIGINTERN int Side_BUY_MINUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_BUY_MINUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_BUY_MINUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_BUY_MINUS));
  return pyobj;
}


SWIGINTERN int Side_SELL_PLUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_SELL_PLUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_SELL_PLUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_SELL_PLUS));
  return pyobj;
}


SWIGINTERN int Side_SELL_SHORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_SELL_SHORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_SELL_SHORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_SELL_SHORT));
  return pyobj;
}


SWIGINTERN int Side_SELL_SHORT_EXEMPT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_SELL_SHORT_EXEMPT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_SELL_SHORT_EXEMPT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_SELL_SHORT_EXEMPT));
  return pyobj;
}


SWIGINTERN int Side_UNDISCLOSED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_UNDISCLOSED is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_UNDISCLOSED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_UNDISCLOSED));
  return pyobj;
}


SWIGINTERN int Side_CROSS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_CROSS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_CROSS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_CROSS));
  return pyobj;
}


SWIGINTERN int Side_CROSS_SHORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_CROSS_SHORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_CROSS_SHORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_CROSS_SHORT));
  return pyobj;
}


SWIGINTERN int Side_CROSS_SHORT_EXEMPT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_CROSS_SHORT_EXEMPT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_CROSS_SHORT_EXEMPT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_CROSS_SHORT_EXEMPT));
  return pyobj;
}


SWIGINTERN int Side_AS_DEFINED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_AS_DEFINED is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_AS_DEFINED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_AS_DEFINED));
  return pyobj;
}


SWIGINTERN int Side_OPPOSITE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_OPPOSITE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_OPPOSITE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_OPPOSITE));
  return pyobj;
}


SWIGINTERN int Side_SUBSCRIBE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_SUBSCRIBE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_SUBSCRIBE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_SUBSCRIBE));
  return pyobj;
}


SWIGINTERN int Side_REDEEM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_REDEEM is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_REDEEM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_REDEEM));
  return pyobj;
}


SWIGINTERN int Side_LEND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_LEND is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_LEND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_LEND));
  return pyobj;
}


SWIGINTERN int Side_BORROW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Side_BORROW is read-only.");
  return 1;
}


SWIGINTERN PyObject *Side_BORROW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Side_BORROW));
  return pyobj;
}


SWIGINTERN int TimeInForce_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TimeInForce_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *TimeInForce_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TimeInForce_DAY));
  return pyobj;
}


SWIGINTERN int TimeInForce_GOOD_TILL_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TimeInForce_GOOD_TILL_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *TimeInForce_GOOD_TILL_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TimeInForce_GOOD_TILL_CANCEL));
  return pyobj;
}


SWIGINTERN int TimeInForce_AT_THE_OPENING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TimeInForce_AT_THE_OPENING is read-only.");
  return 1;
}


SWIGINTERN PyObject *TimeInForce_AT_THE_OPENING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TimeInForce_AT_THE_OPENING));
  return pyobj;
}


SWIGINTERN int TimeInForce_IMMEDIATE_OR_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TimeInForce_IMMEDIATE_OR_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *TimeInForce_IMMEDIATE_OR_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TimeInForce_IMMEDIATE_OR_CANCEL));
  return pyobj;
}


SWIGINTERN int TimeInForce_FILL_OR_KILL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TimeInForce_FILL_OR_KILL is read-only.");
  return 1;
}


SWIGINTERN PyObject *TimeInForce_FILL_OR_KILL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TimeInForce_FILL_OR_KILL));
  return pyobj;
}


SWIGINTERN int TimeInForce_GOOD_TILL_CROSSING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TimeInForce_GOOD_TILL_CROSSING is read-only.");
  return 1;
}


SWIGINTERN PyObject *TimeInForce_GOOD_TILL_CROSSING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TimeInForce_GOOD_TILL_CROSSING));
  return pyobj;
}


SWIGINTERN int TimeInForce_GOOD_TILL_DATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TimeInForce_GOOD_TILL_DATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TimeInForce_GOOD_TILL_DATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TimeInForce_GOOD_TILL_DATE));
  return pyobj;
}


SWIGINTERN int TimeInForce_AT_THE_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TimeInForce_AT_THE_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TimeInForce_AT_THE_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TimeInForce_AT_THE_CLOSE));
  return pyobj;
}


SWIGINTERN int Urgency_NORMAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Urgency_NORMAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Urgency_NORMAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Urgency_NORMAL));
  return pyobj;
}


SWIGINTERN int Urgency_FLASH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Urgency_FLASH is read-only.");
  return 1;
}


SWIGINTERN PyObject *Urgency_FLASH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Urgency_FLASH));
  return pyobj;
}


SWIGINTERN int Urgency_BACKGROUND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Urgency_BACKGROUND is read-only.");
  return 1;
}


SWIGINTERN PyObject *Urgency_BACKGROUND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Urgency_BACKGROUND));
  return pyobj;
}


SWIGINTERN int SettlType_REGULAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlType_REGULAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlType_REGULAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlType_REGULAR));
  return pyobj;
}


SWIGINTERN int SettlType_CASH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlType_CASH is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlType_CASH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlType_CASH));
  return pyobj;
}


SWIGINTERN int SettlType_NEXT_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlType_NEXT_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlType_NEXT_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlType_NEXT_DAY));
  return pyobj;
}


SWIGINTERN int SettlType_T_PLUS_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlType_T_PLUS_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlType_T_PLUS_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlType_T_PLUS_2));
  return pyobj;
}


SWIGINTERN int SettlType_T_PLUS_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlType_T_PLUS_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlType_T_PLUS_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlType_T_PLUS_3));
  return pyobj;
}


SWIGINTERN int SettlType_T_PLUS_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlType_T_PLUS_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlType_T_PLUS_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlType_T_PLUS_4));
  return pyobj;
}


SWIGINTERN int SettlType_FUTURE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlType_FUTURE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlType_FUTURE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlType_FUTURE));
  return pyobj;
}


SWIGINTERN int SettlType_WHEN_AND_IF_ISSUED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlType_WHEN_AND_IF_ISSUED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlType_WHEN_AND_IF_ISSUED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlType_WHEN_AND_IF_ISSUED));
  return pyobj;
}


SWIGINTERN int SettlType_SELLERS_OPTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlType_SELLERS_OPTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlType_SELLERS_OPTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlType_SELLERS_OPTION));
  return pyobj;
}


SWIGINTERN int SettlType_T_PLUS_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlType_T_PLUS_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlType_T_PLUS_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlType_T_PLUS_5));
  return pyobj;
}


SWIGINTERN int SymbolSfx_WHEN_ISSUED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SymbolSfx_WHEN_ISSUED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SymbolSfx_WHEN_ISSUED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SymbolSfx_WHEN_ISSUED);
  return pyobj;
}


SWIGINTERN int SymbolSfx_A_EUCP_WITH_LUMP_SUM_INTEREST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SymbolSfx_A_EUCP_WITH_LUMP_SUM_INTEREST is read-only.");
  return 1;
}


SWIGINTERN PyObject *SymbolSfx_A_EUCP_WITH_LUMP_SUM_INTEREST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SymbolSfx_A_EUCP_WITH_LUMP_SUM_INTEREST);
  return pyobj;
}


SWIGINTERN int AllocTransType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocTransType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocTransType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::AllocTransType_NEW));
  return pyobj;
}


SWIGINTERN int AllocTransType_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocTransType_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocTransType_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::AllocTransType_REPLACE));
  return pyobj;
}


SWIGINTERN int AllocTransType_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocTransType_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocTransType_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::AllocTransType_CANCEL));
  return pyobj;
}


SWIGINTERN int PositionEffect_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PositionEffect_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *PositionEffect_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PositionEffect_OPEN));
  return pyobj;
}


SWIGINTERN int PositionEffect_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PositionEffect_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PositionEffect_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PositionEffect_CLOSE));
  return pyobj;
}


SWIGINTERN int PositionEffect_ROLLED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PositionEffect_ROLLED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PositionEffect_ROLLED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PositionEffect_ROLLED));
  return pyobj;
}


SWIGINTERN int PositionEffect_FIFO_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PositionEffect_FIFO is read-only.");
  return 1;
}


SWIGINTERN PyObject *PositionEffect_FIFO_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PositionEffect_FIFO));
  return pyobj;
}


SWIGINTERN int ProcessCode_REGULAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ProcessCode_REGULAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *ProcessCode_REGULAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ProcessCode_REGULAR));
  return pyobj;
}


SWIGINTERN int ProcessCode_SOFT_DOLLAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ProcessCode_SOFT_DOLLAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *ProcessCode_SOFT_DOLLAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ProcessCode_SOFT_DOLLAR));
  return pyobj;
}


SWIGINTERN int ProcessCode_STEP_IN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ProcessCode_STEP_IN is read-only.");
  return 1;
}


SWIGINTERN PyObject *ProcessCode_STEP_IN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ProcessCode_STEP_IN));
  return pyobj;
}


SWIGINTERN int ProcessCode_STEP_OUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ProcessCode_STEP_OUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ProcessCode_STEP_OUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ProcessCode_STEP_OUT));
  return pyobj;
}


SWIGINTERN int ProcessCode_SOFT_DOLLAR_STEP_IN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ProcessCode_SOFT_DOLLAR_STEP_IN is read-only.");
  return 1;
}


SWIGINTERN PyObject *ProcessCode_SOFT_DOLLAR_STEP_IN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ProcessCode_SOFT_DOLLAR_STEP_IN));
  return pyobj;
}


SWIGINTERN int ProcessCode_SOFT_DOLLAR_STEP_OUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ProcessCode_SOFT_DOLLAR_STEP_OUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ProcessCode_SOFT_DOLLAR_STEP_OUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ProcessCode_SOFT_DOLLAR_STEP_OUT));
  return pyobj;
}


SWIGINTERN int ProcessCode_PLAN_SPONSOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ProcessCode_PLAN_SPONSOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *ProcessCode_PLAN_SPONSOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ProcessCode_PLAN_SPONSOR));
  return pyobj;
}


SWIGINTERN int AllocStatus_ACCEPTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocStatus_ACCEPTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocStatus_ACCEPTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocStatus_ACCEPTED));
  return pyobj;
}


SWIGINTERN int AllocStatus_BLOCK_LEVEL_REJECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocStatus_BLOCK_LEVEL_REJECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocStatus_BLOCK_LEVEL_REJECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocStatus_BLOCK_LEVEL_REJECT));
  return pyobj;
}


SWIGINTERN int AllocStatus_ACCOUNT_LEVEL_REJECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocStatus_ACCOUNT_LEVEL_REJECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocStatus_ACCOUNT_LEVEL_REJECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocStatus_ACCOUNT_LEVEL_REJECT));
  return pyobj;
}


SWIGINTERN int AllocStatus_RECEIVED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocStatus_RECEIVED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocStatus_RECEIVED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocStatus_RECEIVED));
  return pyobj;
}


SWIGINTERN int AllocStatus_INCOMPLETE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocStatus_INCOMPLETE is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocStatus_INCOMPLETE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocStatus_INCOMPLETE));
  return pyobj;
}


SWIGINTERN int AllocStatus_REJECTED_BY_INTERMEDIARY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocStatus_REJECTED_BY_INTERMEDIARY is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocStatus_REJECTED_BY_INTERMEDIARY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocStatus_REJECTED_BY_INTERMEDIARY));
  return pyobj;
}


SWIGINTERN int AllocRejCode_UNKNOWN_ACCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocRejCode_UNKNOWN_ACCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocRejCode_UNKNOWN_ACCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocRejCode_UNKNOWN_ACCOUNT));
  return pyobj;
}


SWIGINTERN int AllocRejCode_INCORRECT_QUANTITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocRejCode_INCORRECT_QUANTITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocRejCode_INCORRECT_QUANTITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocRejCode_INCORRECT_QUANTITY));
  return pyobj;
}


SWIGINTERN int AllocRejCode_INCORRECT_AVERAGE_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocRejCode_INCORRECT_AVERAGE_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocRejCode_INCORRECT_AVERAGE_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocRejCode_INCORRECT_AVERAGE_PRICE));
  return pyobj;
}


SWIGINTERN int AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC));
  return pyobj;
}


SWIGINTERN int AllocRejCode_COMMISSION_DIFFERENCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocRejCode_COMMISSION_DIFFERENCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocRejCode_COMMISSION_DIFFERENCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocRejCode_COMMISSION_DIFFERENCE));
  return pyobj;
}


SWIGINTERN int AllocRejCode_UNKNOWN_ORDERID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocRejCode_UNKNOWN_ORDERID is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocRejCode_UNKNOWN_ORDERID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocRejCode_UNKNOWN_ORDERID));
  return pyobj;
}


SWIGINTERN int AllocRejCode_UNKNOWN_LISTID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocRejCode_UNKNOWN_LISTID is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocRejCode_UNKNOWN_LISTID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocRejCode_UNKNOWN_LISTID));
  return pyobj;
}


SWIGINTERN int AllocRejCode_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocRejCode_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocRejCode_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocRejCode_OTHER));
  return pyobj;
}


SWIGINTERN int AllocRejCode_INCORRECT_ALLOCATED_QUANTITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocRejCode_INCORRECT_ALLOCATED_QUANTITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocRejCode_INCORRECT_ALLOCATED_QUANTITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocRejCode_INCORRECT_ALLOCATED_QUANTITY));
  return pyobj;
}


SWIGINTERN int AllocRejCode_CALCULATION_DIFFERENCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocRejCode_CALCULATION_DIFFERENCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocRejCode_CALCULATION_DIFFERENCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocRejCode_CALCULATION_DIFFERENCE));
  return pyobj;
}


SWIGINTERN int EmailType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EmailType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *EmailType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::EmailType_NEW));
  return pyobj;
}


SWIGINTERN int EmailType_REPLY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EmailType_REPLY is read-only.");
  return 1;
}


SWIGINTERN PyObject *EmailType_REPLY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::EmailType_REPLY));
  return pyobj;
}


SWIGINTERN int EmailType_ADMIN_REPLY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EmailType_ADMIN_REPLY is read-only.");
  return 1;
}


SWIGINTERN PyObject *EmailType_ADMIN_REPLY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::EmailType_ADMIN_REPLY));
  return pyobj;
}


SWIGINTERN int EncryptMethod_NONE_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EncryptMethod_NONE_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *EncryptMethod_NONE_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::EncryptMethod_NONE_OTHER));
  return pyobj;
}


SWIGINTERN int EncryptMethod_PKCS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EncryptMethod_PKCS is read-only.");
  return 1;
}


SWIGINTERN PyObject *EncryptMethod_PKCS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::EncryptMethod_PKCS));
  return pyobj;
}


SWIGINTERN int EncryptMethod_DES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EncryptMethod_DES is read-only.");
  return 1;
}


SWIGINTERN PyObject *EncryptMethod_DES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::EncryptMethod_DES));
  return pyobj;
}


SWIGINTERN int EncryptMethod_PKCS_DES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EncryptMethod_PKCS_DES is read-only.");
  return 1;
}


SWIGINTERN PyObject *EncryptMethod_PKCS_DES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::EncryptMethod_PKCS_DES));
  return pyobj;
}


SWIGINTERN int EncryptMethod_PGP_DES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EncryptMethod_PGP_DES is read-only.");
  return 1;
}


SWIGINTERN PyObject *EncryptMethod_PGP_DES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::EncryptMethod_PGP_DES));
  return pyobj;
}


SWIGINTERN int EncryptMethod_PGP_DES_MD5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EncryptMethod_PGP_DES_MD5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *EncryptMethod_PGP_DES_MD5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::EncryptMethod_PGP_DES_MD5));
  return pyobj;
}


SWIGINTERN int EncryptMethod_PEM_DES_MD5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EncryptMethod_PEM_DES_MD5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *EncryptMethod_PEM_DES_MD5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::EncryptMethod_PEM_DES_MD5));
  return pyobj;
}


SWIGINTERN int CxlRejReason_TOO_LATE_TO_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlRejReason_TOO_LATE_TO_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlRejReason_TOO_LATE_TO_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CxlRejReason_TOO_LATE_TO_CANCEL));
  return pyobj;
}


SWIGINTERN int CxlRejReason_UNKNOWN_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlRejReason_UNKNOWN_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlRejReason_UNKNOWN_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CxlRejReason_UNKNOWN_ORDER));
  return pyobj;
}


SWIGINTERN int CxlRejReason_BROKER_EXCHANGE_OPTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlRejReason_BROKER_EXCHANGE_OPTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlRejReason_BROKER_EXCHANGE_OPTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CxlRejReason_BROKER_EXCHANGE_OPTION));
  return pyobj;
}


SWIGINTERN int CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS));
  return pyobj;
}


SWIGINTERN int CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST));
  return pyobj;
}


SWIGINTERN int CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER));
  return pyobj;
}


SWIGINTERN int CxlRejReason_DUPLICATE_CLORDID_RECEIVED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlRejReason_DUPLICATE_CLORDID_RECEIVED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlRejReason_DUPLICATE_CLORDID_RECEIVED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CxlRejReason_DUPLICATE_CLORDID_RECEIVED));
  return pyobj;
}


SWIGINTERN int CxlRejReason_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlRejReason_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlRejReason_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CxlRejReason_OTHER));
  return pyobj;
}


SWIGINTERN int OrdRejReason_BROKER_EXCHANGE_OPTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_BROKER_EXCHANGE_OPTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_BROKER_EXCHANGE_OPTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_BROKER_EXCHANGE_OPTION));
  return pyobj;
}


SWIGINTERN int OrdRejReason_UNKNOWN_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_UNKNOWN_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_UNKNOWN_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_UNKNOWN_SYMBOL));
  return pyobj;
}


SWIGINTERN int OrdRejReason_EXCHANGE_CLOSED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_EXCHANGE_CLOSED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_EXCHANGE_CLOSED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_EXCHANGE_CLOSED));
  return pyobj;
}


SWIGINTERN int OrdRejReason_ORDER_EXCEEDS_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_ORDER_EXCEEDS_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_ORDER_EXCEEDS_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_ORDER_EXCEEDS_LIMIT));
  return pyobj;
}


SWIGINTERN int OrdRejReason_TOO_LATE_TO_ENTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_TOO_LATE_TO_ENTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_TOO_LATE_TO_ENTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_TOO_LATE_TO_ENTER));
  return pyobj;
}


SWIGINTERN int OrdRejReason_UNKNOWN_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_UNKNOWN_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_UNKNOWN_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_UNKNOWN_ORDER));
  return pyobj;
}


SWIGINTERN int OrdRejReason_DUPLICATE_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_DUPLICATE_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_DUPLICATE_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_DUPLICATE_ORDER));
  return pyobj;
}


SWIGINTERN int OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER));
  return pyobj;
}


SWIGINTERN int OrdRejReason_STALE_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_STALE_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_STALE_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_STALE_ORDER));
  return pyobj;
}


SWIGINTERN int OrdRejReason_TRADE_ALONG_REQUIRED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_TRADE_ALONG_REQUIRED is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_TRADE_ALONG_REQUIRED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_TRADE_ALONG_REQUIRED));
  return pyobj;
}


SWIGINTERN int OrdRejReason_INVALID_INVESTOR_ID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_INVALID_INVESTOR_ID is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_INVALID_INVESTOR_ID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_INVALID_INVESTOR_ID));
  return pyobj;
}


SWIGINTERN int OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC));
  return pyobj;
}


SWIGINTERN int OrdRejReason_SURVEILLENCE_OPTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_SURVEILLENCE_OPTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_SURVEILLENCE_OPTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_SURVEILLENCE_OPTION));
  return pyobj;
}


SWIGINTERN int OrdRejReason_INCORRECT_QUANTITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_INCORRECT_QUANTITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_INCORRECT_QUANTITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_INCORRECT_QUANTITY));
  return pyobj;
}


SWIGINTERN int OrdRejReason_INCORRECT_ALLOCATED_QUANTITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_INCORRECT_ALLOCATED_QUANTITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_INCORRECT_ALLOCATED_QUANTITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_INCORRECT_ALLOCATED_QUANTITY));
  return pyobj;
}


SWIGINTERN int OrdRejReason_UNKNOWN_ACCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_UNKNOWN_ACCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_UNKNOWN_ACCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_UNKNOWN_ACCOUNT));
  return pyobj;
}


SWIGINTERN int OrdRejReason_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrdRejReason_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrdRejReason_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OrdRejReason_OTHER));
  return pyobj;
}


SWIGINTERN int IOIQualifier_ALL_OR_NONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_ALL_OR_NONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_ALL_OR_NONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_ALL_OR_NONE));
  return pyobj;
}


SWIGINTERN int IOIQualifier_MARKET_ON_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_MARKET_ON_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_MARKET_ON_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_MARKET_ON_CLOSE));
  return pyobj;
}


SWIGINTERN int IOIQualifier_AT_THE_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_AT_THE_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_AT_THE_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_AT_THE_CLOSE));
  return pyobj;
}


SWIGINTERN int IOIQualifier_VWAP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_VWAP is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_VWAP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_VWAP));
  return pyobj;
}


SWIGINTERN int IOIQualifier_IN_TOUCH_WITH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_IN_TOUCH_WITH is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_IN_TOUCH_WITH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_IN_TOUCH_WITH));
  return pyobj;
}


SWIGINTERN int IOIQualifier_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_LIMIT));
  return pyobj;
}


SWIGINTERN int IOIQualifier_MORE_BEHIND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_MORE_BEHIND is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_MORE_BEHIND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_MORE_BEHIND));
  return pyobj;
}


SWIGINTERN int IOIQualifier_AT_THE_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_AT_THE_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_AT_THE_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_AT_THE_OPEN));
  return pyobj;
}


SWIGINTERN int IOIQualifier_TAKING_A_POSITION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_TAKING_A_POSITION is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_TAKING_A_POSITION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_TAKING_A_POSITION));
  return pyobj;
}


SWIGINTERN int IOIQualifier_AT_THE_MARKET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_AT_THE_MARKET is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_AT_THE_MARKET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_AT_THE_MARKET));
  return pyobj;
}


SWIGINTERN int IOIQualifier_READY_TO_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_READY_TO_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_READY_TO_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_READY_TO_TRADE));
  return pyobj;
}


SWIGINTERN int IOIQualifier_PORTFOLIO_SHOWN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_PORTFOLIO_SHOWN is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_PORTFOLIO_SHOWN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_PORTFOLIO_SHOWN));
  return pyobj;
}


SWIGINTERN int IOIQualifier_THROUGH_THE_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_THROUGH_THE_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_THROUGH_THE_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_THROUGH_THE_DAY));
  return pyobj;
}


SWIGINTERN int IOIQualifier_VERSUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_VERSUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_VERSUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_VERSUS));
  return pyobj;
}


SWIGINTERN int IOIQualifier_INDICATION_WORKING_AWAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_INDICATION_WORKING_AWAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_INDICATION_WORKING_AWAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_INDICATION_WORKING_AWAY));
  return pyobj;
}


SWIGINTERN int IOIQualifier_CROSSING_OPPORTUNITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_CROSSING_OPPORTUNITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_CROSSING_OPPORTUNITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_CROSSING_OPPORTUNITY));
  return pyobj;
}


SWIGINTERN int IOIQualifier_AT_THE_MIDPOINT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_AT_THE_MIDPOINT is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_AT_THE_MIDPOINT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_AT_THE_MIDPOINT));
  return pyobj;
}


SWIGINTERN int IOIQualifier_PRE_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIQualifier_PRE_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIQualifier_PRE_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::IOIQualifier_PRE_OPEN));
  return pyobj;
}


SWIGINTERN int DKReason_UNKNOWN_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DKReason_UNKNOWN_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *DKReason_UNKNOWN_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DKReason_UNKNOWN_SYMBOL));
  return pyobj;
}


SWIGINTERN int DKReason_WRONG_SIDE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DKReason_WRONG_SIDE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DKReason_WRONG_SIDE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DKReason_WRONG_SIDE));
  return pyobj;
}


SWIGINTERN int DKReason_QUANTITY_EXCEEDS_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DKReason_QUANTITY_EXCEEDS_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *DKReason_QUANTITY_EXCEEDS_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DKReason_QUANTITY_EXCEEDS_ORDER));
  return pyobj;
}


SWIGINTERN int DKReason_NO_MATCHING_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DKReason_NO_MATCHING_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *DKReason_NO_MATCHING_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DKReason_NO_MATCHING_ORDER));
  return pyobj;
}


SWIGINTERN int DKReason_PRICE_EXCEEDS_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DKReason_PRICE_EXCEEDS_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *DKReason_PRICE_EXCEEDS_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DKReason_PRICE_EXCEEDS_LIMIT));
  return pyobj;
}


SWIGINTERN int DKReason_CALCULATION_DIFFERENCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DKReason_CALCULATION_DIFFERENCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DKReason_CALCULATION_DIFFERENCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DKReason_CALCULATION_DIFFERENCE));
  return pyobj;
}


SWIGINTERN int DKReason_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DKReason_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *DKReason_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DKReason_OTHER));
  return pyobj;
}


SWIGINTERN int MiscFeeType_REGULATORY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeType_REGULATORY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeType_REGULATORY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MiscFeeType_REGULATORY));
  return pyobj;
}


SWIGINTERN int MiscFeeType_TAX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeType_TAX is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeType_TAX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MiscFeeType_TAX));
  return pyobj;
}


SWIGINTERN int MiscFeeType_LOCAL_COMMISSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeType_LOCAL_COMMISSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeType_LOCAL_COMMISSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MiscFeeType_LOCAL_COMMISSION));
  return pyobj;
}


SWIGINTERN int MiscFeeType_EXCHANGE_FEES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeType_EXCHANGE_FEES is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeType_EXCHANGE_FEES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MiscFeeType_EXCHANGE_FEES));
  return pyobj;
}


SWIGINTERN int MiscFeeType_STAMP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeType_STAMP is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeType_STAMP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MiscFeeType_STAMP));
  return pyobj;
}


SWIGINTERN int MiscFeeType_LEVY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeType_LEVY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeType_LEVY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MiscFeeType_LEVY));
  return pyobj;
}


SWIGINTERN int MiscFeeType_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeType_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeType_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MiscFeeType_OTHER));
  return pyobj;
}


SWIGINTERN int MiscFeeType_MARKUP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeType_MARKUP is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeType_MARKUP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MiscFeeType_MARKUP));
  return pyobj;
}


SWIGINTERN int MiscFeeType_CONSUMPTION_TAX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeType_CONSUMPTION_TAX is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeType_CONSUMPTION_TAX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MiscFeeType_CONSUMPTION_TAX));
  return pyobj;
}


SWIGINTERN int ExecType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_NEW));
  return pyobj;
}


SWIGINTERN int ExecType_PARTIAL_FILL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_PARTIAL_FILL is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_PARTIAL_FILL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_PARTIAL_FILL));
  return pyobj;
}


SWIGINTERN int ExecType_FILL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_FILL is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_FILL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_FILL));
  return pyobj;
}


SWIGINTERN int ExecType_DONE_FOR_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_DONE_FOR_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_DONE_FOR_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_DONE_FOR_DAY));
  return pyobj;
}


SWIGINTERN int ExecType_CANCELED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_CANCELED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_CANCELED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_CANCELED));
  return pyobj;
}


SWIGINTERN int ExecType_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_REPLACE));
  return pyobj;
}


SWIGINTERN int ExecType_PENDING_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_PENDING_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_PENDING_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_PENDING_CANCEL));
  return pyobj;
}


SWIGINTERN int ExecType_STOPPED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_STOPPED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_STOPPED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_STOPPED));
  return pyobj;
}


SWIGINTERN int ExecType_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_REJECTED));
  return pyobj;
}


SWIGINTERN int ExecType_SUSPENDED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_SUSPENDED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_SUSPENDED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_SUSPENDED));
  return pyobj;
}


SWIGINTERN int ExecType_PENDING_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_PENDING_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_PENDING_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_PENDING_NEW));
  return pyobj;
}


SWIGINTERN int ExecType_CALCULATED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_CALCULATED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_CALCULATED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_CALCULATED));
  return pyobj;
}


SWIGINTERN int ExecType_EXPIRED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_EXPIRED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_EXPIRED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_EXPIRED));
  return pyobj;
}


SWIGINTERN int ExecType_RESTATED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_RESTATED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_RESTATED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_RESTATED));
  return pyobj;
}


SWIGINTERN int ExecType_PENDING_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_PENDING_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_PENDING_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_PENDING_REPLACE));
  return pyobj;
}


SWIGINTERN int ExecType_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_TRADE));
  return pyobj;
}


SWIGINTERN int ExecType_TRADE_CORRECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_TRADE_CORRECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_TRADE_CORRECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_TRADE_CORRECT));
  return pyobj;
}


SWIGINTERN int ExecType_TRADE_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_TRADE_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_TRADE_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_TRADE_CANCEL));
  return pyobj;
}


SWIGINTERN int ExecType_ORDER_STATUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecType_ORDER_STATUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecType_ORDER_STATUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecType_ORDER_STATUS));
  return pyobj;
}


SWIGINTERN int SettlCurrFxRateCalc_MULTIPLY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlCurrFxRateCalc_MULTIPLY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlCurrFxRateCalc_MULTIPLY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlCurrFxRateCalc_MULTIPLY));
  return pyobj;
}


SWIGINTERN int SettlCurrFxRateCalc_DIVIDE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlCurrFxRateCalc_DIVIDE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlCurrFxRateCalc_DIVIDE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlCurrFxRateCalc_DIVIDE));
  return pyobj;
}


SWIGINTERN int SettlInstMode_DEFAULT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstMode_DEFAULT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstMode_DEFAULT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlInstMode_DEFAULT));
  return pyobj;
}


SWIGINTERN int SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED));
  return pyobj;
}


SWIGINTERN int SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT));
  return pyobj;
}


SWIGINTERN int SettlInstMode_REQUEST_REJECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstMode_REQUEST_REJECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstMode_REQUEST_REJECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlInstMode_REQUEST_REJECT));
  return pyobj;
}


SWIGINTERN int SettlInstTransType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstTransType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstTransType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlInstTransType_NEW));
  return pyobj;
}


SWIGINTERN int SettlInstTransType_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstTransType_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstTransType_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlInstTransType_CANCEL));
  return pyobj;
}


SWIGINTERN int SettlInstTransType_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstTransType_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstTransType_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlInstTransType_REPLACE));
  return pyobj;
}


SWIGINTERN int SettlInstTransType_RESTATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstTransType_RESTATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstTransType_RESTATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlInstTransType_RESTATE));
  return pyobj;
}


SWIGINTERN int SettlInstSource_BROKERS_INSTRUCTIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstSource_BROKERS_INSTRUCTIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstSource_BROKERS_INSTRUCTIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlInstSource_BROKERS_INSTRUCTIONS));
  return pyobj;
}


SWIGINTERN int SettlInstSource_INSTITUTIONS_INSTRUCTIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstSource_INSTITUTIONS_INSTRUCTIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstSource_INSTITUTIONS_INSTRUCTIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlInstSource_INSTITUTIONS_INSTRUCTIONS));
  return pyobj;
}


SWIGINTERN int SettlInstSource_INVESTOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstSource_INVESTOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstSource_INVESTOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlInstSource_INVESTOR));
  return pyobj;
}


SWIGINTERN int SecurityType_EURO_SUPRANATIONAL_COUPONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_EURO_SUPRANATIONAL_COUPONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_EURO_SUPRANATIONAL_COUPONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_EURO_SUPRANATIONAL_COUPONS);
  return pyobj;
}


SWIGINTERN int SecurityType_FEDERAL_AGENCY_COUPON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_FEDERAL_AGENCY_COUPON is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_FEDERAL_AGENCY_COUPON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_FEDERAL_AGENCY_COUPON);
  return pyobj;
}


SWIGINTERN int SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_PRIVATE_EXPORT_FUNDING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_PRIVATE_EXPORT_FUNDING is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_PRIVATE_EXPORT_FUNDING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_PRIVATE_EXPORT_FUNDING);
  return pyobj;
}


SWIGINTERN int SecurityType_USD_SUPRANATIONAL_COUPONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_USD_SUPRANATIONAL_COUPONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_USD_SUPRANATIONAL_COUPONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_USD_SUPRANATIONAL_COUPONS);
  return pyobj;
}


SWIGINTERN int SecurityType_FUTURE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_FUTURE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_FUTURE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_FUTURE);
  return pyobj;
}


SWIGINTERN int SecurityType_OPTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_OPTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_OPTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_OPTION);
  return pyobj;
}


SWIGINTERN int SecurityType_CORPORATE_BOND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_CORPORATE_BOND is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_CORPORATE_BOND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_CORPORATE_BOND);
  return pyobj;
}


SWIGINTERN int SecurityType_CORPORATE_PRIVATE_PLACEMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_CORPORATE_PRIVATE_PLACEMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_CORPORATE_PRIVATE_PLACEMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_CORPORATE_PRIVATE_PLACEMENT);
  return pyobj;
}


SWIGINTERN int SecurityType_CONVERTIBLE_BOND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_CONVERTIBLE_BOND is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_CONVERTIBLE_BOND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_CONVERTIBLE_BOND);
  return pyobj;
}


SWIGINTERN int SecurityType_DUAL_CURRENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_DUAL_CURRENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_DUAL_CURRENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_DUAL_CURRENCY);
  return pyobj;
}


SWIGINTERN int SecurityType_EURO_CORPORATE_BOND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_EURO_CORPORATE_BOND is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_EURO_CORPORATE_BOND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_EURO_CORPORATE_BOND);
  return pyobj;
}


SWIGINTERN int SecurityType_INDEXED_LINKED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_INDEXED_LINKED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_INDEXED_LINKED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_INDEXED_LINKED);
  return pyobj;
}


SWIGINTERN int SecurityType_STRUCTURED_NOTES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_STRUCTURED_NOTES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_STRUCTURED_NOTES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_STRUCTURED_NOTES);
  return pyobj;
}


SWIGINTERN int SecurityType_YANKEE_CORPORATE_BOND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_YANKEE_CORPORATE_BOND is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_YANKEE_CORPORATE_BOND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_YANKEE_CORPORATE_BOND);
  return pyobj;
}


SWIGINTERN int SecurityType_FOREIGN_EXCHANGE_CONTRACT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_FOREIGN_EXCHANGE_CONTRACT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_FOREIGN_EXCHANGE_CONTRACT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_FOREIGN_EXCHANGE_CONTRACT);
  return pyobj;
}


SWIGINTERN int SecurityType_COMMON_STOCK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_COMMON_STOCK is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_COMMON_STOCK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_COMMON_STOCK);
  return pyobj;
}


SWIGINTERN int SecurityType_PREFERRED_STOCK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_PREFERRED_STOCK is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_PREFERRED_STOCK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_PREFERRED_STOCK);
  return pyobj;
}


SWIGINTERN int SecurityType_BRADY_BOND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_BRADY_BOND is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_BRADY_BOND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_BRADY_BOND);
  return pyobj;
}


SWIGINTERN int SecurityType_EURO_SOVEREIGNS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_EURO_SOVEREIGNS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_EURO_SOVEREIGNS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_EURO_SOVEREIGNS);
  return pyobj;
}


SWIGINTERN int SecurityType_US_TREASURY_BOND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_US_TREASURY_BOND is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_US_TREASURY_BOND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_US_TREASURY_BOND);
  return pyobj;
}


SWIGINTERN int SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES);
  return pyobj;
}


SWIGINTERN int SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_US_TREASURY_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_US_TREASURY_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_US_TREASURY_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_US_TREASURY_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_US_TREASURY_BILL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_US_TREASURY_BILL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_US_TREASURY_BILL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_US_TREASURY_BILL);
  return pyobj;
}


SWIGINTERN int SecurityType_REPURCHASE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_REPURCHASE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_REPURCHASE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_REPURCHASE);
  return pyobj;
}


SWIGINTERN int SecurityType_FORWARD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_FORWARD is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_FORWARD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_FORWARD);
  return pyobj;
}


SWIGINTERN int SecurityType_BUY_SELLBACK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_BUY_SELLBACK is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_BUY_SELLBACK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_BUY_SELLBACK);
  return pyobj;
}


SWIGINTERN int SecurityType_SECURITIES_LOAN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_SECURITIES_LOAN is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_SECURITIES_LOAN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_SECURITIES_LOAN);
  return pyobj;
}


SWIGINTERN int SecurityType_SECURITIES_PLEDGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_SECURITIES_PLEDGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_SECURITIES_PLEDGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_SECURITIES_PLEDGE);
  return pyobj;
}


SWIGINTERN int SecurityType_TERM_LOAN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_TERM_LOAN is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_TERM_LOAN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_TERM_LOAN);
  return pyobj;
}


SWIGINTERN int SecurityType_REVOLVER_LOAN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_REVOLVER_LOAN is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_REVOLVER_LOAN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_REVOLVER_LOAN);
  return pyobj;
}


SWIGINTERN int SecurityType_REVOLVER_TERM_LOAN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_REVOLVER_TERM_LOAN is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_REVOLVER_TERM_LOAN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_REVOLVER_TERM_LOAN);
  return pyobj;
}


SWIGINTERN int SecurityType_BRIDGE_LOAN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_BRIDGE_LOAN is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_BRIDGE_LOAN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_BRIDGE_LOAN);
  return pyobj;
}


SWIGINTERN int SecurityType_LETTER_OF_CREDIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_LETTER_OF_CREDIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_LETTER_OF_CREDIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_LETTER_OF_CREDIT);
  return pyobj;
}


SWIGINTERN int SecurityType_SWING_LINE_FACILITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_SWING_LINE_FACILITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_SWING_LINE_FACILITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_SWING_LINE_FACILITY);
  return pyobj;
}


SWIGINTERN int SecurityType_DEBTOR_IN_POSSESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_DEBTOR_IN_POSSESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_DEBTOR_IN_POSSESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_DEBTOR_IN_POSSESSION);
  return pyobj;
}


SWIGINTERN int SecurityType_DEFAULTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_DEFAULTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_DEFAULTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_DEFAULTED);
  return pyobj;
}


SWIGINTERN int SecurityType_WITHDRAWN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_WITHDRAWN is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_WITHDRAWN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_WITHDRAWN);
  return pyobj;
}


SWIGINTERN int SecurityType_REPLACED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_REPLACED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_REPLACED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_REPLACED);
  return pyobj;
}


SWIGINTERN int SecurityType_MATURED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_MATURED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_MATURED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_MATURED);
  return pyobj;
}


SWIGINTERN int SecurityType_AMENDED_AND_RESTATED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_AMENDED_AND_RESTATED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_AMENDED_AND_RESTATED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_AMENDED_AND_RESTATED);
  return pyobj;
}


SWIGINTERN int SecurityType_RETIRED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_RETIRED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_RETIRED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_RETIRED);
  return pyobj;
}


SWIGINTERN int SecurityType_BANKERS_ACCEPTANCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_BANKERS_ACCEPTANCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_BANKERS_ACCEPTANCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_BANKERS_ACCEPTANCE);
  return pyobj;
}


SWIGINTERN int SecurityType_BANK_NOTES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_BANK_NOTES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_BANK_NOTES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_BANK_NOTES);
  return pyobj;
}


SWIGINTERN int SecurityType_BILL_OF_EXCHANGES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_BILL_OF_EXCHANGES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_BILL_OF_EXCHANGES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_BILL_OF_EXCHANGES);
  return pyobj;
}


SWIGINTERN int SecurityType_CERTIFICATE_OF_DEPOSIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_CERTIFICATE_OF_DEPOSIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_CERTIFICATE_OF_DEPOSIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_CERTIFICATE_OF_DEPOSIT);
  return pyobj;
}


SWIGINTERN int SecurityType_CALL_LOANS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_CALL_LOANS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_CALL_LOANS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_CALL_LOANS);
  return pyobj;
}


SWIGINTERN int SecurityType_COMMERCIAL_PAPER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_COMMERCIAL_PAPER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_COMMERCIAL_PAPER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_COMMERCIAL_PAPER);
  return pyobj;
}


SWIGINTERN int SecurityType_DEPOSIT_NOTES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_DEPOSIT_NOTES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_DEPOSIT_NOTES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_DEPOSIT_NOTES);
  return pyobj;
}


SWIGINTERN int SecurityType_EURO_CERTIFICATE_OF_DEPOSIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_EURO_CERTIFICATE_OF_DEPOSIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_EURO_CERTIFICATE_OF_DEPOSIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_EURO_CERTIFICATE_OF_DEPOSIT);
  return pyobj;
}


SWIGINTERN int SecurityType_EURO_COMMERCIAL_PAPER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_EURO_COMMERCIAL_PAPER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_EURO_COMMERCIAL_PAPER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_EURO_COMMERCIAL_PAPER);
  return pyobj;
}


SWIGINTERN int SecurityType_LIQUIDITY_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_LIQUIDITY_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_LIQUIDITY_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_LIQUIDITY_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_MEDIUM_TERM_NOTES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_MEDIUM_TERM_NOTES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_MEDIUM_TERM_NOTES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_MEDIUM_TERM_NOTES);
  return pyobj;
}


SWIGINTERN int SecurityType_OVERNIGHT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_OVERNIGHT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_OVERNIGHT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_OVERNIGHT);
  return pyobj;
}


SWIGINTERN int SecurityType_PROMISSORY_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_PROMISSORY_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_PROMISSORY_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_PROMISSORY_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_PLAZOS_FIJOS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_PLAZOS_FIJOS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_PLAZOS_FIJOS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_PLAZOS_FIJOS);
  return pyobj;
}


SWIGINTERN int SecurityType_SHORT_TERM_LOAN_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_SHORT_TERM_LOAN_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_SHORT_TERM_LOAN_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_SHORT_TERM_LOAN_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_TIME_DEPOSIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_TIME_DEPOSIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_TIME_DEPOSIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_TIME_DEPOSIT);
  return pyobj;
}


SWIGINTERN int SecurityType_EXTENDED_COMM_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_EXTENDED_COMM_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_EXTENDED_COMM_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_EXTENDED_COMM_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT);
  return pyobj;
}


SWIGINTERN int SecurityType_ASSET_BACKED_SECURITIES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_ASSET_BACKED_SECURITIES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_ASSET_BACKED_SECURITIES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_ASSET_BACKED_SECURITIES);
  return pyobj;
}


SWIGINTERN int SecurityType_CORP_MORTGAGE_BACKED_SECURITIES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_CORP_MORTGAGE_BACKED_SECURITIES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_CORP_MORTGAGE_BACKED_SECURITIES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_CORP_MORTGAGE_BACKED_SECURITIES);
  return pyobj;
}


SWIGINTERN int SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION);
  return pyobj;
}


SWIGINTERN int SecurityType_IOETTE_MORTGAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_IOETTE_MORTGAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_IOETTE_MORTGAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_IOETTE_MORTGAGE);
  return pyobj;
}


SWIGINTERN int SecurityType_MORTGAGE_BACKED_SECURITIES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_MORTGAGE_BACKED_SECURITIES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_MORTGAGE_BACKED_SECURITIES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_MORTGAGE_BACKED_SECURITIES);
  return pyobj;
}


SWIGINTERN int SecurityType_MORTGAGE_INTEREST_ONLY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_MORTGAGE_INTEREST_ONLY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_MORTGAGE_INTEREST_ONLY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_MORTGAGE_INTEREST_ONLY);
  return pyobj;
}


SWIGINTERN int SecurityType_MORTGAGE_PRINCIPAL_ONLY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_MORTGAGE_PRINCIPAL_ONLY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_MORTGAGE_PRINCIPAL_ONLY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_MORTGAGE_PRINCIPAL_ONLY);
  return pyobj;
}


SWIGINTERN int SecurityType_MORTGAGE_PRIVATE_PLACEMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_MORTGAGE_PRIVATE_PLACEMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_MORTGAGE_PRIVATE_PLACEMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_MORTGAGE_PRIVATE_PLACEMENT);
  return pyobj;
}


SWIGINTERN int SecurityType_MISCELLANEOUS_PASS_THROUGH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_MISCELLANEOUS_PASS_THROUGH is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_MISCELLANEOUS_PASS_THROUGH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_MISCELLANEOUS_PASS_THROUGH);
  return pyobj;
}


SWIGINTERN int SecurityType_PFANDBRIEFE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_PFANDBRIEFE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_PFANDBRIEFE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_PFANDBRIEFE);
  return pyobj;
}


SWIGINTERN int SecurityType_TO_BE_ANNOUNCED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_TO_BE_ANNOUNCED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_TO_BE_ANNOUNCED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_TO_BE_ANNOUNCED);
  return pyobj;
}


SWIGINTERN int SecurityType_OTHER_ANTICIPATION_NOTES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_OTHER_ANTICIPATION_NOTES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_OTHER_ANTICIPATION_NOTES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_OTHER_ANTICIPATION_NOTES);
  return pyobj;
}


SWIGINTERN int SecurityType_CERTIFICATE_OF_OBLIGATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_CERTIFICATE_OF_OBLIGATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_CERTIFICATE_OF_OBLIGATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_CERTIFICATE_OF_OBLIGATION);
  return pyobj;
}


SWIGINTERN int SecurityType_CERTIFICATE_OF_PARTICIPATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_CERTIFICATE_OF_PARTICIPATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_CERTIFICATE_OF_PARTICIPATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_CERTIFICATE_OF_PARTICIPATION);
  return pyobj;
}


SWIGINTERN int SecurityType_GENERAL_OBLIGATION_BONDS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_GENERAL_OBLIGATION_BONDS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_GENERAL_OBLIGATION_BONDS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_GENERAL_OBLIGATION_BONDS);
  return pyobj;
}


SWIGINTERN int SecurityType_MANDATORY_TENDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_MANDATORY_TENDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_MANDATORY_TENDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_MANDATORY_TENDER);
  return pyobj;
}


SWIGINTERN int SecurityType_REVENUE_ANTICIPATION_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_REVENUE_ANTICIPATION_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_REVENUE_ANTICIPATION_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_REVENUE_ANTICIPATION_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_REVENUE_BONDS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_REVENUE_BONDS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_REVENUE_BONDS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_REVENUE_BONDS);
  return pyobj;
}


SWIGINTERN int SecurityType_SPECIAL_ASSESSMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_SPECIAL_ASSESSMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_SPECIAL_ASSESSMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_SPECIAL_ASSESSMENT);
  return pyobj;
}


SWIGINTERN int SecurityType_SPECIAL_OBLIGATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_SPECIAL_OBLIGATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_SPECIAL_OBLIGATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_SPECIAL_OBLIGATION);
  return pyobj;
}


SWIGINTERN int SecurityType_SPECIAL_TAX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_SPECIAL_TAX is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_SPECIAL_TAX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_SPECIAL_TAX);
  return pyobj;
}


SWIGINTERN int SecurityType_TAX_ANTICIPATION_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_TAX_ANTICIPATION_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_TAX_ANTICIPATION_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_TAX_ANTICIPATION_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_TAX_ALLOCATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_TAX_ALLOCATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_TAX_ALLOCATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_TAX_ALLOCATION);
  return pyobj;
}


SWIGINTERN int SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER);
  return pyobj;
}


SWIGINTERN int SecurityType_TAX_AND_REVENUE_ANTICIPATION_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_TAX_AND_REVENUE_ANTICIPATION_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_TAX_AND_REVENUE_ANTICIPATION_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_TAX_AND_REVENUE_ANTICIPATION_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_VARIABLE_RATE_DEMAND_NOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_VARIABLE_RATE_DEMAND_NOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_VARIABLE_RATE_DEMAND_NOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_VARIABLE_RATE_DEMAND_NOTE);
  return pyobj;
}


SWIGINTERN int SecurityType_WARRANT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_WARRANT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_WARRANT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_WARRANT);
  return pyobj;
}


SWIGINTERN int SecurityType_MUTUAL_FUND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_MUTUAL_FUND is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_MUTUAL_FUND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_MUTUAL_FUND);
  return pyobj;
}


SWIGINTERN int SecurityType_MULTI_LEG_INSTRUMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_MULTI_LEG_INSTRUMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_MULTI_LEG_INSTRUMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_MULTI_LEG_INSTRUMENT);
  return pyobj;
}


SWIGINTERN int SecurityType_NO_SECURITY_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_NO_SECURITY_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_NO_SECURITY_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_NO_SECURITY_TYPE);
  return pyobj;
}


SWIGINTERN int SecurityType_WILDCARD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityType_WILDCARD is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityType_WILDCARD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SecurityType_WILDCARD);
  return pyobj;
}


SWIGINTERN int StandInstDbType_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StandInstDbType_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *StandInstDbType_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::StandInstDbType_OTHER));
  return pyobj;
}


SWIGINTERN int StandInstDbType_DTC_SID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StandInstDbType_DTC_SID is read-only.");
  return 1;
}


SWIGINTERN PyObject *StandInstDbType_DTC_SID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::StandInstDbType_DTC_SID));
  return pyobj;
}


SWIGINTERN int StandInstDbType_THOMSON_ALERT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StandInstDbType_THOMSON_ALERT is read-only.");
  return 1;
}


SWIGINTERN PyObject *StandInstDbType_THOMSON_ALERT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::StandInstDbType_THOMSON_ALERT));
  return pyobj;
}


SWIGINTERN int StandInstDbType_A_GLOBAL_CUSTODIAN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StandInstDbType_A_GLOBAL_CUSTODIAN is read-only.");
  return 1;
}


SWIGINTERN PyObject *StandInstDbType_A_GLOBAL_CUSTODIAN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::StandInstDbType_A_GLOBAL_CUSTODIAN));
  return pyobj;
}


SWIGINTERN int StandInstDbType_ACCOUNTNET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StandInstDbType_ACCOUNTNET is read-only.");
  return 1;
}


SWIGINTERN PyObject *StandInstDbType_ACCOUNTNET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::StandInstDbType_ACCOUNTNET));
  return pyobj;
}


SWIGINTERN int SettlDeliveryType_VERSUS_PAYMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlDeliveryType_VERSUS_PAYMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlDeliveryType_VERSUS_PAYMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SettlDeliveryType_VERSUS_PAYMENT));
  return pyobj;
}


SWIGINTERN int SettlDeliveryType_FREE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlDeliveryType_FREE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlDeliveryType_FREE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SettlDeliveryType_FREE));
  return pyobj;
}


SWIGINTERN int SettlDeliveryType_TRI_PARTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlDeliveryType_TRI_PARTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlDeliveryType_TRI_PARTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SettlDeliveryType_TRI_PARTY));
  return pyobj;
}


SWIGINTERN int SettlDeliveryType_HOLD_IN_CUSTODY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlDeliveryType_HOLD_IN_CUSTODY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlDeliveryType_HOLD_IN_CUSTODY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SettlDeliveryType_HOLD_IN_CUSTODY));
  return pyobj;
}


SWIGINTERN int AllocLinkType_F_X_NETTING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocLinkType_F_X_NETTING is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocLinkType_F_X_NETTING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocLinkType_F_X_NETTING));
  return pyobj;
}


SWIGINTERN int AllocLinkType_F_X_SWAP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocLinkType_F_X_SWAP is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocLinkType_F_X_SWAP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocLinkType_F_X_SWAP));
  return pyobj;
}


SWIGINTERN int CoveredOrUncovered_COVERED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CoveredOrUncovered_COVERED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CoveredOrUncovered_COVERED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CoveredOrUncovered_COVERED));
  return pyobj;
}


SWIGINTERN int CoveredOrUncovered_UNCOVERED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CoveredOrUncovered_UNCOVERED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CoveredOrUncovered_UNCOVERED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CoveredOrUncovered_UNCOVERED));
  return pyobj;
}


SWIGINTERN int AllocHandlInst_MATCH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocHandlInst_MATCH is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocHandlInst_MATCH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocHandlInst_MATCH));
  return pyobj;
}


SWIGINTERN int AllocHandlInst_FORWARD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocHandlInst_FORWARD is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocHandlInst_FORWARD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocHandlInst_FORWARD));
  return pyobj;
}


SWIGINTERN int AllocHandlInst_FORWARD_AND_MATCH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocHandlInst_FORWARD_AND_MATCH is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocHandlInst_FORWARD_AND_MATCH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocHandlInst_FORWARD_AND_MATCH));
  return pyobj;
}


SWIGINTERN int RoutingType_TARGET_FIRM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoutingType_TARGET_FIRM is read-only.");
  return 1;
}


SWIGINTERN PyObject *RoutingType_TARGET_FIRM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RoutingType_TARGET_FIRM));
  return pyobj;
}


SWIGINTERN int RoutingType_TARGET_LIST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoutingType_TARGET_LIST is read-only.");
  return 1;
}


SWIGINTERN PyObject *RoutingType_TARGET_LIST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RoutingType_TARGET_LIST));
  return pyobj;
}


SWIGINTERN int RoutingType_BLOCK_FIRM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoutingType_BLOCK_FIRM is read-only.");
  return 1;
}


SWIGINTERN PyObject *RoutingType_BLOCK_FIRM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RoutingType_BLOCK_FIRM));
  return pyobj;
}


SWIGINTERN int RoutingType_BLOCK_LIST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoutingType_BLOCK_LIST is read-only.");
  return 1;
}


SWIGINTERN PyObject *RoutingType_BLOCK_LIST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RoutingType_BLOCK_LIST));
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_MUNIAAA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_MUNIAAA is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_MUNIAAA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_MUNIAAA);
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_FUTURESWAP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_FUTURESWAP is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_FUTURESWAP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_FUTURESWAP);
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_LIBID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_LIBID is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_LIBID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_LIBID);
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_LIBOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_LIBOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_LIBOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_LIBOR);
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_OTHER);
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_SWAP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_SWAP is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_SWAP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_SWAP);
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_TREASURY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_TREASURY is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_TREASURY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_TREASURY);
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_EURIBOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_EURIBOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_EURIBOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_EURIBOR);
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_PFANDBRIEFE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_PFANDBRIEFE is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_PFANDBRIEFE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_PFANDBRIEFE);
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_EONIA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_EONIA is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_EONIA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_EONIA);
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_SONIA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_SONIA is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_SONIA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_SONIA);
  return pyobj;
}


SWIGINTERN int BenchmarkCurveName_EUREPO_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BenchmarkCurveName_EUREPO is read-only.");
  return 1;
}


SWIGINTERN PyObject *BenchmarkCurveName_EUREPO_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BenchmarkCurveName_EUREPO);
  return pyobj;
}


SWIGINTERN int StipulationType_AMT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_AMT is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_AMT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_AMT);
  return pyobj;
}


SWIGINTERN int StipulationType_AUTO_REINVESTMENT_AT_OR_BETTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_AUTO_REINVESTMENT_AT_OR_BETTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_AUTO_REINVESTMENT_AT_OR_BETTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_AUTO_REINVESTMENT_AT_OR_BETTER);
  return pyobj;
}


SWIGINTERN int StipulationType_BANK_QUALIFIED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_BANK_QUALIFIED is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_BANK_QUALIFIED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_BANK_QUALIFIED);
  return pyobj;
}


SWIGINTERN int StipulationType_BARGAIN_CONDITIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_BARGAIN_CONDITIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_BARGAIN_CONDITIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_BARGAIN_CONDITIONS);
  return pyobj;
}


SWIGINTERN int StipulationType_COUPON_RANGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_COUPON_RANGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_COUPON_RANGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_COUPON_RANGE);
  return pyobj;
}


SWIGINTERN int StipulationType_ISO_CURRENCY_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_ISO_CURRENCY_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_ISO_CURRENCY_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_ISO_CURRENCY_CODE);
  return pyobj;
}


SWIGINTERN int StipulationType_CUSTOM_START_END_DATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_CUSTOM_START_END_DATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_CUSTOM_START_END_DATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_CUSTOM_START_END_DATE);
  return pyobj;
}


SWIGINTERN int StipulationType_GEOGRAPHICS_AND_PERCENT_RANGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_GEOGRAPHICS_AND_PERCENT_RANGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_GEOGRAPHICS_AND_PERCENT_RANGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_GEOGRAPHICS_AND_PERCENT_RANGE);
  return pyobj;
}


SWIGINTERN int StipulationType_VALUATION_DISCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_VALUATION_DISCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_VALUATION_DISCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_VALUATION_DISCOUNT);
  return pyobj;
}


SWIGINTERN int StipulationType_INSURED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_INSURED is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_INSURED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_INSURED);
  return pyobj;
}


SWIGINTERN int StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE);
  return pyobj;
}


SWIGINTERN int StipulationType_ISSUERS_TICKER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_ISSUERS_TICKER is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_ISSUERS_TICKER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_ISSUERS_TICKER);
  return pyobj;
}


SWIGINTERN int StipulationType_ISSUE_SIZE_RANGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_ISSUE_SIZE_RANGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_ISSUE_SIZE_RANGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_ISSUE_SIZE_RANGE);
  return pyobj;
}


SWIGINTERN int StipulationType_LOOKBACK_DAYS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_LOOKBACK_DAYS is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_LOOKBACK_DAYS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_LOOKBACK_DAYS);
  return pyobj;
}


SWIGINTERN int StipulationType_EXPLICIT_LOT_IDENTIFIER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_EXPLICIT_LOT_IDENTIFIER is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_EXPLICIT_LOT_IDENTIFIER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_EXPLICIT_LOT_IDENTIFIER);
  return pyobj;
}


SWIGINTERN int StipulationType_LOT_VARIANCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_LOT_VARIANCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_LOT_VARIANCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_LOT_VARIANCE);
  return pyobj;
}


SWIGINTERN int StipulationType_MATURITY_YEAR_AND_MONTH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_MATURITY_YEAR_AND_MONTH is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_MATURITY_YEAR_AND_MONTH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_MATURITY_YEAR_AND_MONTH);
  return pyobj;
}


SWIGINTERN int StipulationType_MATURITY_RANGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_MATURITY_RANGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_MATURITY_RANGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_MATURITY_RANGE);
  return pyobj;
}


SWIGINTERN int StipulationType_MAXIMUM_SUBSTITUTIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_MAXIMUM_SUBSTITUTIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_MAXIMUM_SUBSTITUTIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_MAXIMUM_SUBSTITUTIONS);
  return pyobj;
}


SWIGINTERN int StipulationType_MINIMUM_QUANTITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_MINIMUM_QUANTITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_MINIMUM_QUANTITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_MINIMUM_QUANTITY);
  return pyobj;
}


SWIGINTERN int StipulationType_MINIMUM_INCREMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_MINIMUM_INCREMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_MINIMUM_INCREMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_MINIMUM_INCREMENT);
  return pyobj;
}


SWIGINTERN int StipulationType_MINIMUM_DENOMINATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_MINIMUM_DENOMINATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_MINIMUM_DENOMINATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_MINIMUM_DENOMINATION);
  return pyobj;
}


SWIGINTERN int StipulationType_PAYMENT_FREQUENCY_CALENDAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_PAYMENT_FREQUENCY_CALENDAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_PAYMENT_FREQUENCY_CALENDAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_PAYMENT_FREQUENCY_CALENDAR);
  return pyobj;
}


SWIGINTERN int StipulationType_NUMBER_OF_PIECES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_NUMBER_OF_PIECES is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_NUMBER_OF_PIECES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_NUMBER_OF_PIECES);
  return pyobj;
}


SWIGINTERN int StipulationType_POOLS_MAXIMUM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_POOLS_MAXIMUM is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_POOLS_MAXIMUM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_POOLS_MAXIMUM);
  return pyobj;
}


SWIGINTERN int StipulationType_POOLS_PER_MILLION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_POOLS_PER_MILLION is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_POOLS_PER_MILLION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_POOLS_PER_MILLION);
  return pyobj;
}


SWIGINTERN int StipulationType_POOLS_PER_LOT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_POOLS_PER_LOT is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_POOLS_PER_LOT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_POOLS_PER_LOT);
  return pyobj;
}


SWIGINTERN int StipulationType_POOLS_PER_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_POOLS_PER_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_POOLS_PER_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_POOLS_PER_TRADE);
  return pyobj;
}


SWIGINTERN int StipulationType_PRICE_RANGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_PRICE_RANGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_PRICE_RANGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_PRICE_RANGE);
  return pyobj;
}


SWIGINTERN int StipulationType_PRICING_FREQUENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_PRICING_FREQUENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_PRICING_FREQUENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_PRICING_FREQUENCY);
  return pyobj;
}


SWIGINTERN int StipulationType_PRODUCTION_YEAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_PRODUCTION_YEAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_PRODUCTION_YEAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_PRODUCTION_YEAR);
  return pyobj;
}


SWIGINTERN int StipulationType_CALL_PROTECTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_CALL_PROTECTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_CALL_PROTECTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_CALL_PROTECTION);
  return pyobj;
}


SWIGINTERN int StipulationType_PURPOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_PURPOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_PURPOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_PURPOSE);
  return pyobj;
}


SWIGINTERN int StipulationType_BENCHMARK_PRICE_SOURCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_BENCHMARK_PRICE_SOURCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_BENCHMARK_PRICE_SOURCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_BENCHMARK_PRICE_SOURCE);
  return pyobj;
}


SWIGINTERN int StipulationType_RATING_SOURCE_AND_RANGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_RATING_SOURCE_AND_RANGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_RATING_SOURCE_AND_RANGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_RATING_SOURCE_AND_RANGE);
  return pyobj;
}


SWIGINTERN int StipulationType_RESTRICTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_RESTRICTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_RESTRICTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_RESTRICTED);
  return pyobj;
}


SWIGINTERN int StipulationType_MARKET_SECTOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_MARKET_SECTOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_MARKET_SECTOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_MARKET_SECTOR);
  return pyobj;
}


SWIGINTERN int StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED);
  return pyobj;
}


SWIGINTERN int StipulationType_STRUCTURE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_STRUCTURE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_STRUCTURE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_STRUCTURE);
  return pyobj;
}


SWIGINTERN int StipulationType_SUBSTITUTIONS_FREQUENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_SUBSTITUTIONS_FREQUENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_SUBSTITUTIONS_FREQUENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_SUBSTITUTIONS_FREQUENCY);
  return pyobj;
}


SWIGINTERN int StipulationType_SUBSTITUTIONS_LEFT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_SUBSTITUTIONS_LEFT is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_SUBSTITUTIONS_LEFT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_SUBSTITUTIONS_LEFT);
  return pyobj;
}


SWIGINTERN int StipulationType_FREEFORM_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_FREEFORM_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_FREEFORM_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_FREEFORM_TEXT);
  return pyobj;
}


SWIGINTERN int StipulationType_TRADE_VARIANCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_TRADE_VARIANCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_TRADE_VARIANCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_TRADE_VARIANCE);
  return pyobj;
}


SWIGINTERN int StipulationType_WEIGHTED_AVERAGE_COUPON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_WEIGHTED_AVERAGE_COUPON is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_WEIGHTED_AVERAGE_COUPON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_WEIGHTED_AVERAGE_COUPON);
  return pyobj;
}


SWIGINTERN int StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON);
  return pyobj;
}


SWIGINTERN int StipulationType_WEIGHTED_AVERAGE_LOAN_AGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_WEIGHTED_AVERAGE_LOAN_AGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_WEIGHTED_AVERAGE_LOAN_AGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_WEIGHTED_AVERAGE_LOAN_AGE);
  return pyobj;
}


SWIGINTERN int StipulationType_WEIGHTED_AVERAGE_MATURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_WEIGHTED_AVERAGE_MATURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_WEIGHTED_AVERAGE_MATURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_WEIGHTED_AVERAGE_MATURITY);
  return pyobj;
}


SWIGINTERN int StipulationType_WHOLE_POOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_WHOLE_POOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_WHOLE_POOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_WHOLE_POOL);
  return pyobj;
}


SWIGINTERN int StipulationType_YIELD_RANGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_YIELD_RANGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_YIELD_RANGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_YIELD_RANGE);
  return pyobj;
}


SWIGINTERN int StipulationType_SINGLE_MONTHLY_MORTALITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_SINGLE_MONTHLY_MORTALITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_SINGLE_MONTHLY_MORTALITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_SINGLE_MONTHLY_MORTALITY);
  return pyobj;
}


SWIGINTERN int StipulationType_CONSTANT_PREPAYMENT_RATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_CONSTANT_PREPAYMENT_RATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_CONSTANT_PREPAYMENT_RATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_CONSTANT_PREPAYMENT_RATE);
  return pyobj;
}


SWIGINTERN int StipulationType_CONSTANT_PREPAYMENT_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_CONSTANT_PREPAYMENT_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_CONSTANT_PREPAYMENT_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_CONSTANT_PREPAYMENT_YIELD);
  return pyobj;
}


SWIGINTERN int StipulationType_CONSTANT_PREPAYMENT_PENALTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_CONSTANT_PREPAYMENT_PENALTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_CONSTANT_PREPAYMENT_PENALTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_CONSTANT_PREPAYMENT_PENALTY);
  return pyobj;
}


SWIGINTERN int StipulationType_ABSOLUTE_PREPAYMENT_SPEED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_ABSOLUTE_PREPAYMENT_SPEED is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_ABSOLUTE_PREPAYMENT_SPEED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_ABSOLUTE_PREPAYMENT_SPEED);
  return pyobj;
}


SWIGINTERN int StipulationType_MONTHLY_PREPAYMENT_RATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_MONTHLY_PREPAYMENT_RATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_MONTHLY_PREPAYMENT_RATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_MONTHLY_PREPAYMENT_RATE);
  return pyobj;
}


SWIGINTERN int StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE);
  return pyobj;
}


SWIGINTERN int StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE);
  return pyobj;
}


SWIGINTERN int StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE);
  return pyobj;
}


SWIGINTERN int StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE);
  return pyobj;
}


SWIGINTERN int StipulationValue_SPECIAL_CUM_DIVIDEND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_SPECIAL_CUM_DIVIDEND is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_SPECIAL_CUM_DIVIDEND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_SPECIAL_CUM_DIVIDEND);
  return pyobj;
}


SWIGINTERN int StipulationValue_SPECIAL_EX_DIVIDEND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_SPECIAL_EX_DIVIDEND is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_SPECIAL_EX_DIVIDEND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_SPECIAL_EX_DIVIDEND);
  return pyobj;
}


SWIGINTERN int StipulationValue_SPECIAL_CUM_COUPON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_SPECIAL_CUM_COUPON is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_SPECIAL_CUM_COUPON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_SPECIAL_CUM_COUPON);
  return pyobj;
}


SWIGINTERN int StipulationValue_SPECIAL_EX_COUPON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_SPECIAL_EX_COUPON is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_SPECIAL_EX_COUPON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_SPECIAL_EX_COUPON);
  return pyobj;
}


SWIGINTERN int StipulationValue_SPECIAL_CUM_BONUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_SPECIAL_CUM_BONUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_SPECIAL_CUM_BONUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_SPECIAL_CUM_BONUS);
  return pyobj;
}


SWIGINTERN int StipulationValue_SPECIAL_EX_BONUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_SPECIAL_EX_BONUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_SPECIAL_EX_BONUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_SPECIAL_EX_BONUS);
  return pyobj;
}


SWIGINTERN int StipulationValue_SPECIAL_CUM_RIGHTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_SPECIAL_CUM_RIGHTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_SPECIAL_CUM_RIGHTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_SPECIAL_CUM_RIGHTS);
  return pyobj;
}


SWIGINTERN int StipulationValue_SPECIAL_EX_RIGHTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_SPECIAL_EX_RIGHTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_SPECIAL_EX_RIGHTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_SPECIAL_EX_RIGHTS);
  return pyobj;
}


SWIGINTERN int StipulationValue_SPECIAL_CUM_CAPITAL_REPAYMENTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_SPECIAL_CUM_CAPITAL_REPAYMENTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_SPECIAL_CUM_CAPITAL_REPAYMENTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_SPECIAL_CUM_CAPITAL_REPAYMENTS);
  return pyobj;
}


SWIGINTERN int StipulationValue_SPECIAL_EX_CAPITAL_REPAYMENTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_SPECIAL_EX_CAPITAL_REPAYMENTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_SPECIAL_EX_CAPITAL_REPAYMENTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_SPECIAL_EX_CAPITAL_REPAYMENTS);
  return pyobj;
}


SWIGINTERN int StipulationValue_CASH_SETTLEMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_CASH_SETTLEMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_CASH_SETTLEMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_CASH_SETTLEMENT);
  return pyobj;
}


SWIGINTERN int StipulationValue_SPECIAL_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_SPECIAL_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_SPECIAL_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_SPECIAL_PRICE);
  return pyobj;
}


SWIGINTERN int StipulationValue_REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES);
  return pyobj;
}


SWIGINTERN int StipulationValue_GUARANTEED_DELIVERY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StipulationValue_GUARANTEED_DELIVERY is read-only.");
  return 1;
}


SWIGINTERN PyObject *StipulationValue_GUARANTEED_DELIVERY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::StipulationValue_GUARANTEED_DELIVERY);
  return pyobj;
}


SWIGINTERN int YieldType_AFTER_TAX_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_AFTER_TAX_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_AFTER_TAX_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_AFTER_TAX_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_ANNUAL_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_ANNUAL_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_ANNUAL_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_ANNUAL_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_AT_ISSUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_AT_ISSUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_AT_ISSUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_AT_ISSUE);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_TO_AVERAGE_MATURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_TO_AVERAGE_MATURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_TO_AVERAGE_MATURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_TO_AVERAGE_MATURITY);
  return pyobj;
}


SWIGINTERN int YieldType_BOOK_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_BOOK_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_BOOK_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_BOOK_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_TO_NEXT_CALL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_TO_NEXT_CALL is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_TO_NEXT_CALL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_TO_NEXT_CALL);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_CHANGE_SINCE_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_CHANGE_SINCE_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_CHANGE_SINCE_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_CHANGE_SINCE_CLOSE);
  return pyobj;
}


SWIGINTERN int YieldType_CLOSING_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_CLOSING_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_CLOSING_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_CLOSING_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_COMPOUND_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_COMPOUND_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_COMPOUND_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_COMPOUND_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_CURRENT_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_CURRENT_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_CURRENT_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_CURRENT_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_TRUE_GROSS_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_TRUE_GROSS_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_TRUE_GROSS_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_TRUE_GROSS_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_GOVERNMENT_EQUIVALENT_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_GOVERNMENT_EQUIVALENT_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_GOVERNMENT_EQUIVALENT_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_GOVERNMENT_EQUIVALENT_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_WITH_INFLATION_ASSUMPTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_WITH_INFLATION_ASSUMPTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_WITH_INFLATION_ASSUMPTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_WITH_INFLATION_ASSUMPTION);
  return pyobj;
}


SWIGINTERN int YieldType_INVERSE_FLOATER_BOND_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_INVERSE_FLOATER_BOND_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_INVERSE_FLOATER_BOND_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_INVERSE_FLOATER_BOND_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_MOST_RECENT_CLOSING_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_MOST_RECENT_CLOSING_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_MOST_RECENT_CLOSING_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_MOST_RECENT_CLOSING_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_CLOSING_YIELD_MOST_RECENT_MONTH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_CLOSING_YIELD_MOST_RECENT_MONTH is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_CLOSING_YIELD_MOST_RECENT_MONTH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_CLOSING_YIELD_MOST_RECENT_MONTH);
  return pyobj;
}


SWIGINTERN int YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER);
  return pyobj;
}


SWIGINTERN int YieldType_CLOSING_YIELD_MOST_RECENT_YEAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_CLOSING_YIELD_MOST_RECENT_YEAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_CLOSING_YIELD_MOST_RECENT_YEAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_CLOSING_YIELD_MOST_RECENT_YEAR);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE);
  return pyobj;
}


SWIGINTERN int YieldType_MARK_TO_MARKET_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_MARK_TO_MARKET_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_MARK_TO_MARKET_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_MARK_TO_MARKET_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_TO_MATURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_TO_MATURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_TO_MATURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_TO_MATURITY);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_TO_NEXT_REFUND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_TO_NEXT_REFUND is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_TO_NEXT_REFUND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_TO_NEXT_REFUND);
  return pyobj;
}


SWIGINTERN int YieldType_OPEN_AVERAGE_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_OPEN_AVERAGE_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_OPEN_AVERAGE_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_OPEN_AVERAGE_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_TO_NEXT_PUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_TO_NEXT_PUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_TO_NEXT_PUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_TO_NEXT_PUT);
  return pyobj;
}


SWIGINTERN int YieldType_PREVIOUS_CLOSE_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_PREVIOUS_CLOSE_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_PREVIOUS_CLOSE_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_PREVIOUS_CLOSE_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_PROCEEDS_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_PROCEEDS_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_PROCEEDS_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_PROCEEDS_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_SEMI_ANNUAL_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_SEMI_ANNUAL_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_SEMI_ANNUAL_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_SEMI_ANNUAL_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE);
  return pyobj;
}


SWIGINTERN int YieldType_SIMPLE_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_SIMPLE_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_SIMPLE_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_SIMPLE_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_TAX_EQUIVALENT_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_TAX_EQUIVALENT_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_TAX_EQUIVALENT_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_TAX_EQUIVALENT_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_TO_TENDER_DATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_TO_TENDER_DATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_TO_TENDER_DATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_TO_TENDER_DATE);
  return pyobj;
}


SWIGINTERN int YieldType_TRUE_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_TRUE_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_TRUE_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_TRUE_YIELD);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_VALUE_OF_1_32_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_VALUE_OF_1_32 is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_VALUE_OF_1_32_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_VALUE_OF_1_32);
  return pyobj;
}


SWIGINTERN int YieldType_YIELD_TO_WORST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable YieldType_YIELD_TO_WORST is read-only.");
  return 1;
}


SWIGINTERN PyObject *YieldType_YIELD_TO_WORST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::YieldType_YIELD_TO_WORST);
  return pyobj;
}


SWIGINTERN int SubscriptionRequestType_SNAPSHOT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SubscriptionRequestType_SNAPSHOT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SubscriptionRequestType_SNAPSHOT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SubscriptionRequestType_SNAPSHOT));
  return pyobj;
}


SWIGINTERN int SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES));
  return pyobj;
}


SWIGINTERN int SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST));
  return pyobj;
}


SWIGINTERN int MDUpdateType_FULL_REFRESH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDUpdateType_FULL_REFRESH is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDUpdateType_FULL_REFRESH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MDUpdateType_FULL_REFRESH));
  return pyobj;
}


SWIGINTERN int MDUpdateType_INCREMENTAL_REFRESH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDUpdateType_INCREMENTAL_REFRESH is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDUpdateType_INCREMENTAL_REFRESH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MDUpdateType_INCREMENTAL_REFRESH));
  return pyobj;
}


SWIGINTERN int MDEntryType_BID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_BID is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_BID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_BID));
  return pyobj;
}


SWIGINTERN int MDEntryType_OFFER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_OFFER is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_OFFER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_OFFER));
  return pyobj;
}


SWIGINTERN int MDEntryType_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_TRADE));
  return pyobj;
}


SWIGINTERN int MDEntryType_INDEX_VALUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_INDEX_VALUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_INDEX_VALUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_INDEX_VALUE));
  return pyobj;
}


SWIGINTERN int MDEntryType_OPENING_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_OPENING_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_OPENING_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_OPENING_PRICE));
  return pyobj;
}


SWIGINTERN int MDEntryType_CLOSING_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_CLOSING_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_CLOSING_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_CLOSING_PRICE));
  return pyobj;
}


SWIGINTERN int MDEntryType_SETTLEMENT_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_SETTLEMENT_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_SETTLEMENT_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_SETTLEMENT_PRICE));
  return pyobj;
}


SWIGINTERN int MDEntryType_TRADING_SESSION_HIGH_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_TRADING_SESSION_HIGH_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_TRADING_SESSION_HIGH_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_TRADING_SESSION_HIGH_PRICE));
  return pyobj;
}


SWIGINTERN int MDEntryType_TRADING_SESSION_LOW_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_TRADING_SESSION_LOW_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_TRADING_SESSION_LOW_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_TRADING_SESSION_LOW_PRICE));
  return pyobj;
}


SWIGINTERN int MDEntryType_TRADING_SESSION_VWAP_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_TRADING_SESSION_VWAP_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_TRADING_SESSION_VWAP_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_TRADING_SESSION_VWAP_PRICE));
  return pyobj;
}


SWIGINTERN int MDEntryType_IMBALANCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_IMBALANCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_IMBALANCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_IMBALANCE));
  return pyobj;
}


SWIGINTERN int MDEntryType_TRADE_VOLUME_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_TRADE_VOLUME is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_TRADE_VOLUME_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_TRADE_VOLUME));
  return pyobj;
}


SWIGINTERN int MDEntryType_OPEN_INTEREST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDEntryType_OPEN_INTEREST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDEntryType_OPEN_INTEREST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDEntryType_OPEN_INTEREST));
  return pyobj;
}


SWIGINTERN int TickDirection_PLUS_TICK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TickDirection_PLUS_TICK is read-only.");
  return 1;
}


SWIGINTERN PyObject *TickDirection_PLUS_TICK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TickDirection_PLUS_TICK));
  return pyobj;
}


SWIGINTERN int TickDirection_ZERO_PLUS_TICK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TickDirection_ZERO_PLUS_TICK is read-only.");
  return 1;
}


SWIGINTERN PyObject *TickDirection_ZERO_PLUS_TICK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TickDirection_ZERO_PLUS_TICK));
  return pyobj;
}


SWIGINTERN int TickDirection_MINUS_TICK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TickDirection_MINUS_TICK is read-only.");
  return 1;
}


SWIGINTERN PyObject *TickDirection_MINUS_TICK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TickDirection_MINUS_TICK));
  return pyobj;
}


SWIGINTERN int TickDirection_ZERO_MINUS_TICK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TickDirection_ZERO_MINUS_TICK is read-only.");
  return 1;
}


SWIGINTERN PyObject *TickDirection_ZERO_MINUS_TICK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TickDirection_ZERO_MINUS_TICK));
  return pyobj;
}


SWIGINTERN int QuoteCondition_OPEN_ACTIVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCondition_OPEN_ACTIVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCondition_OPEN_ACTIVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::QuoteCondition_OPEN_ACTIVE));
  return pyobj;
}


SWIGINTERN int QuoteCondition_CLOSED_INACTIVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCondition_CLOSED_INACTIVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCondition_CLOSED_INACTIVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::QuoteCondition_CLOSED_INACTIVE));
  return pyobj;
}


SWIGINTERN int QuoteCondition_EXCHANGE_BEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCondition_EXCHANGE_BEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCondition_EXCHANGE_BEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::QuoteCondition_EXCHANGE_BEST));
  return pyobj;
}


SWIGINTERN int QuoteCondition_CONSOLIDATED_BEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCondition_CONSOLIDATED_BEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCondition_CONSOLIDATED_BEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::QuoteCondition_CONSOLIDATED_BEST));
  return pyobj;
}


SWIGINTERN int QuoteCondition_LOCKED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCondition_LOCKED is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCondition_LOCKED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::QuoteCondition_LOCKED));
  return pyobj;
}


SWIGINTERN int QuoteCondition_CROSSED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCondition_CROSSED is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCondition_CROSSED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::QuoteCondition_CROSSED));
  return pyobj;
}


SWIGINTERN int QuoteCondition_DEPTH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCondition_DEPTH is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCondition_DEPTH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::QuoteCondition_DEPTH));
  return pyobj;
}


SWIGINTERN int QuoteCondition_FAST_TRADING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCondition_FAST_TRADING is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCondition_FAST_TRADING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::QuoteCondition_FAST_TRADING));
  return pyobj;
}


SWIGINTERN int QuoteCondition_NON_FIRM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCondition_NON_FIRM is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCondition_NON_FIRM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::QuoteCondition_NON_FIRM));
  return pyobj;
}


SWIGINTERN int TradeCondition_CASH_MARKET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_CASH_MARKET is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_CASH_MARKET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_CASH_MARKET));
  return pyobj;
}


SWIGINTERN int TradeCondition_AVERAGE_PRICE_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_AVERAGE_PRICE_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_AVERAGE_PRICE_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_AVERAGE_PRICE_TRADE));
  return pyobj;
}


SWIGINTERN int TradeCondition_CASH_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_CASH_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_CASH_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_CASH_TRADE));
  return pyobj;
}


SWIGINTERN int TradeCondition_NEXT_DAY_MARKET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_NEXT_DAY_MARKET is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_NEXT_DAY_MARKET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_NEXT_DAY_MARKET));
  return pyobj;
}


SWIGINTERN int TradeCondition_OPENING_REOPENING_TRADE_DETAIL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_OPENING_REOPENING_TRADE_DETAIL is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_OPENING_REOPENING_TRADE_DETAIL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_OPENING_REOPENING_TRADE_DETAIL));
  return pyobj;
}


SWIGINTERN int TradeCondition_INTRADAY_TRADE_DETAIL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_INTRADAY_TRADE_DETAIL is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_INTRADAY_TRADE_DETAIL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_INTRADAY_TRADE_DETAIL));
  return pyobj;
}


SWIGINTERN int TradeCondition_RULE127_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_RULE127 is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_RULE127_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_RULE127));
  return pyobj;
}


SWIGINTERN int TradeCondition_RULE155_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_RULE155 is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_RULE155_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_RULE155));
  return pyobj;
}


SWIGINTERN int TradeCondition_SOLD_LAST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_SOLD_LAST is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_SOLD_LAST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_SOLD_LAST));
  return pyobj;
}


SWIGINTERN int TradeCondition_NEXT_DAY_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_NEXT_DAY_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_NEXT_DAY_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_NEXT_DAY_TRADE));
  return pyobj;
}


SWIGINTERN int TradeCondition_OPENED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_OPENED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_OPENED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_OPENED));
  return pyobj;
}


SWIGINTERN int TradeCondition_SELLER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_SELLER is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_SELLER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_SELLER));
  return pyobj;
}


SWIGINTERN int TradeCondition_SOLD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_SOLD is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_SOLD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_SOLD));
  return pyobj;
}


SWIGINTERN int TradeCondition_STOPPED_STOCK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_STOPPED_STOCK is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_STOPPED_STOCK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_STOPPED_STOCK));
  return pyobj;
}


SWIGINTERN int TradeCondition_IMBALANCE_MORE_BUYERS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_IMBALANCE_MORE_BUYERS is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_IMBALANCE_MORE_BUYERS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_IMBALANCE_MORE_BUYERS));
  return pyobj;
}


SWIGINTERN int TradeCondition_IMBALANCE_MORE_SELLERS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_IMBALANCE_MORE_SELLERS is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_IMBALANCE_MORE_SELLERS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_IMBALANCE_MORE_SELLERS));
  return pyobj;
}


SWIGINTERN int TradeCondition_OPENING_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeCondition_OPENING_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeCondition_OPENING_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::TradeCondition_OPENING_PRICE));
  return pyobj;
}


SWIGINTERN int MDUpdateAction_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDUpdateAction_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDUpdateAction_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDUpdateAction_NEW));
  return pyobj;
}


SWIGINTERN int MDUpdateAction_CHANGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDUpdateAction_CHANGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDUpdateAction_CHANGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDUpdateAction_CHANGE));
  return pyobj;
}


SWIGINTERN int MDUpdateAction_DELETE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDUpdateAction_DELETE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDUpdateAction_DELETE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDUpdateAction_DELETE));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_UNKNOWN_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_UNKNOWN_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_UNKNOWN_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_UNKNOWN_SYMBOL));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_DUPLICATE_MDREQID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_DUPLICATE_MDREQID is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_DUPLICATE_MDREQID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_DUPLICATE_MDREQID));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_INSUFFICIENT_BANDWIDTH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_INSUFFICIENT_BANDWIDTH is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_INSUFFICIENT_BANDWIDTH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_INSUFFICIENT_BANDWIDTH));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_INSUFFICIENT_PERMISSIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_INSUFFICIENT_PERMISSIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_INSUFFICIENT_PERMISSIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_INSUFFICIENT_PERMISSIONS));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_UNSUPPORTED_MARKETDEPTH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_UNSUPPORTED_MARKETDEPTH is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_UNSUPPORTED_MARKETDEPTH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_UNSUPPORTED_MARKETDEPTH));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_UNSUPPORTED_MDUPDATETYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_UNSUPPORTED_MDUPDATETYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_UNSUPPORTED_MDUPDATETYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_UNSUPPORTED_MDUPDATETYPE));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_UNSUPPORTED_MDENTRYTYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_UNSUPPORTED_MDENTRYTYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_UNSUPPORTED_MDENTRYTYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_UNSUPPORTED_MDENTRYTYPE));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_UNSUPPORTED_SCOPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_UNSUPPORTED_SCOPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_UNSUPPORTED_SCOPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_UNSUPPORTED_SCOPE));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG));
  return pyobj;
}


SWIGINTERN int MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE));
  return pyobj;
}


SWIGINTERN int DeleteReason_CANCELATION_TRADE_BUST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DeleteReason_CANCELATION_TRADE_BUST is read-only.");
  return 1;
}


SWIGINTERN PyObject *DeleteReason_CANCELATION_TRADE_BUST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DeleteReason_CANCELATION_TRADE_BUST));
  return pyobj;
}


SWIGINTERN int DeleteReason_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DeleteReason_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *DeleteReason_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DeleteReason_ERROR));
  return pyobj;
}


SWIGINTERN int OpenCloseSettlFlag_DAILY_OPEN_CLOSE_SETTLEMENT_ENTRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenCloseSettlFlag_DAILY_OPEN_CLOSE_SETTLEMENT_ENTRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenCloseSettlFlag_DAILY_OPEN_CLOSE_SETTLEMENT_ENTRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenCloseSettlFlag_DAILY_OPEN_CLOSE_SETTLEMENT_ENTRY));
  return pyobj;
}


SWIGINTERN int OpenCloseSettlFlag_SESSION_OPEN_CLOSE_SETTLEMENT_ENTRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenCloseSettlFlag_SESSION_OPEN_CLOSE_SETTLEMENT_ENTRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenCloseSettlFlag_SESSION_OPEN_CLOSE_SETTLEMENT_ENTRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenCloseSettlFlag_SESSION_OPEN_CLOSE_SETTLEMENT_ENTRY));
  return pyobj;
}


SWIGINTERN int OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY));
  return pyobj;
}


SWIGINTERN int OpenCloseSettlFlag_EXPECTED_ENTRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenCloseSettlFlag_EXPECTED_ENTRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenCloseSettlFlag_EXPECTED_ENTRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenCloseSettlFlag_EXPECTED_ENTRY));
  return pyobj;
}


SWIGINTERN int OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY));
  return pyobj;
}


SWIGINTERN int OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE));
  return pyobj;
}


SWIGINTERN int FinancialStatus_BANKRUPT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FinancialStatus_BANKRUPT is read-only.");
  return 1;
}


SWIGINTERN PyObject *FinancialStatus_BANKRUPT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::FinancialStatus_BANKRUPT));
  return pyobj;
}


SWIGINTERN int FinancialStatus_PENDING_DELISTING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FinancialStatus_PENDING_DELISTING is read-only.");
  return 1;
}


SWIGINTERN PyObject *FinancialStatus_PENDING_DELISTING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::FinancialStatus_PENDING_DELISTING));
  return pyobj;
}


SWIGINTERN int CorporateAction_EX_DIVIDEND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CorporateAction_EX_DIVIDEND is read-only.");
  return 1;
}


SWIGINTERN PyObject *CorporateAction_EX_DIVIDEND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CorporateAction_EX_DIVIDEND));
  return pyobj;
}


SWIGINTERN int CorporateAction_EX_DISTRIBUTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CorporateAction_EX_DISTRIBUTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *CorporateAction_EX_DISTRIBUTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CorporateAction_EX_DISTRIBUTION));
  return pyobj;
}


SWIGINTERN int CorporateAction_EX_RIGHTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CorporateAction_EX_RIGHTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *CorporateAction_EX_RIGHTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CorporateAction_EX_RIGHTS));
  return pyobj;
}


SWIGINTERN int CorporateAction_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CorporateAction_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *CorporateAction_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CorporateAction_NEW));
  return pyobj;
}


SWIGINTERN int CorporateAction_EX_INTEREST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CorporateAction_EX_INTEREST is read-only.");
  return 1;
}


SWIGINTERN PyObject *CorporateAction_EX_INTEREST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CorporateAction_EX_INTEREST));
  return pyobj;
}


SWIGINTERN int QuoteStatus_ACCEPTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_ACCEPTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_ACCEPTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_ACCEPTED));
  return pyobj;
}


SWIGINTERN int QuoteStatus_CANCELED_FOR_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_CANCELED_FOR_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_CANCELED_FOR_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_CANCELED_FOR_SYMBOL));
  return pyobj;
}


SWIGINTERN int QuoteStatus_CANCELED_FOR_SECURITY_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_CANCELED_FOR_SECURITY_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_CANCELED_FOR_SECURITY_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_CANCELED_FOR_SECURITY_TYPE));
  return pyobj;
}


SWIGINTERN int QuoteStatus_CANCELED_FOR_UNDERLYING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_CANCELED_FOR_UNDERLYING is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_CANCELED_FOR_UNDERLYING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_CANCELED_FOR_UNDERLYING));
  return pyobj;
}


SWIGINTERN int QuoteStatus_CANCELED_ALL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_CANCELED_ALL is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_CANCELED_ALL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_CANCELED_ALL));
  return pyobj;
}


SWIGINTERN int QuoteStatus_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_REJECTED));
  return pyobj;
}


SWIGINTERN int QuoteStatus_REMOVED_FROM_MARKET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_REMOVED_FROM_MARKET is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_REMOVED_FROM_MARKET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_REMOVED_FROM_MARKET));
  return pyobj;
}


SWIGINTERN int QuoteStatus_EXPIRED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_EXPIRED is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_EXPIRED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_EXPIRED));
  return pyobj;
}


SWIGINTERN int QuoteStatus_QUERY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_QUERY is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_QUERY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_QUERY));
  return pyobj;
}


SWIGINTERN int QuoteStatus_QUOTE_NOT_FOUND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_QUOTE_NOT_FOUND is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_QUOTE_NOT_FOUND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_QUOTE_NOT_FOUND));
  return pyobj;
}


SWIGINTERN int QuoteStatus_PENDING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_PENDING is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_PENDING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_PENDING));
  return pyobj;
}


SWIGINTERN int QuoteStatus_PASS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_PASS is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_PASS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_PASS));
  return pyobj;
}


SWIGINTERN int QuoteStatus_LOCKED_MARKET_WARNING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_LOCKED_MARKET_WARNING is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_LOCKED_MARKET_WARNING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_LOCKED_MARKET_WARNING));
  return pyobj;
}


SWIGINTERN int QuoteStatus_CROSS_MARKET_WARNING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_CROSS_MARKET_WARNING is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_CROSS_MARKET_WARNING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_CROSS_MARKET_WARNING));
  return pyobj;
}


SWIGINTERN int QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET));
  return pyobj;
}


SWIGINTERN int QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET));
  return pyobj;
}


SWIGINTERN int QuoteCancelType_CANCEL_FOR_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCancelType_CANCEL_FOR_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCancelType_CANCEL_FOR_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteCancelType_CANCEL_FOR_SYMBOL));
  return pyobj;
}


SWIGINTERN int QuoteCancelType_CANCEL_FOR_SECURITY_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCancelType_CANCEL_FOR_SECURITY_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCancelType_CANCEL_FOR_SECURITY_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteCancelType_CANCEL_FOR_SECURITY_TYPE));
  return pyobj;
}


SWIGINTERN int QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL));
  return pyobj;
}


SWIGINTERN int QuoteCancelType_CANCEL_ALL_QUOTES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteCancelType_CANCEL_ALL_QUOTES is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteCancelType_CANCEL_ALL_QUOTES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteCancelType_CANCEL_ALL_QUOTES));
  return pyobj;
}


SWIGINTERN int QuoteRejectReason_UNKNOWN_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRejectReason_UNKNOWN_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRejectReason_UNKNOWN_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRejectReason_UNKNOWN_SYMBOL));
  return pyobj;
}


SWIGINTERN int QuoteRejectReason_EXCHANGE_CLOSED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRejectReason_EXCHANGE_CLOSED is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRejectReason_EXCHANGE_CLOSED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRejectReason_EXCHANGE_CLOSED));
  return pyobj;
}


SWIGINTERN int QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT));
  return pyobj;
}


SWIGINTERN int QuoteRejectReason_TOO_LATE_TO_ENTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRejectReason_TOO_LATE_TO_ENTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRejectReason_TOO_LATE_TO_ENTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRejectReason_TOO_LATE_TO_ENTER));
  return pyobj;
}


SWIGINTERN int QuoteRejectReason_UNKNOWN_QUOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRejectReason_UNKNOWN_QUOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRejectReason_UNKNOWN_QUOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRejectReason_UNKNOWN_QUOTE));
  return pyobj;
}


SWIGINTERN int QuoteRejectReason_DUPLICATE_QUOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRejectReason_DUPLICATE_QUOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRejectReason_DUPLICATE_QUOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRejectReason_DUPLICATE_QUOTE));
  return pyobj;
}


SWIGINTERN int QuoteRejectReason_INVALID_BID_ASK_SPREAD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRejectReason_INVALID_BID_ASK_SPREAD is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRejectReason_INVALID_BID_ASK_SPREAD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRejectReason_INVALID_BID_ASK_SPREAD));
  return pyobj;
}


SWIGINTERN int QuoteRejectReason_INVALID_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRejectReason_INVALID_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRejectReason_INVALID_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRejectReason_INVALID_PRICE));
  return pyobj;
}


SWIGINTERN int QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY));
  return pyobj;
}


SWIGINTERN int QuoteResponseLevel_NO_ACKNOWLEDGEMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteResponseLevel_NO_ACKNOWLEDGEMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteResponseLevel_NO_ACKNOWLEDGEMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteResponseLevel_NO_ACKNOWLEDGEMENT));
  return pyobj;
}


SWIGINTERN int QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES));
  return pyobj;
}


SWIGINTERN int QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES));
  return pyobj;
}


SWIGINTERN int QuoteRequestType_MANUAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRequestType_MANUAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRequestType_MANUAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRequestType_MANUAL));
  return pyobj;
}


SWIGINTERN int QuoteRequestType_AUTOMATIC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRequestType_AUTOMATIC is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRequestType_AUTOMATIC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRequestType_AUTOMATIC));
  return pyobj;
}


SWIGINTERN int SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS));
  return pyobj;
}


SWIGINTERN int SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED));
  return pyobj;
}


SWIGINTERN int SecurityRequestType_REQUEST_LIST_SECURITY_TYPES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityRequestType_REQUEST_LIST_SECURITY_TYPES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityRequestType_REQUEST_LIST_SECURITY_TYPES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityRequestType_REQUEST_LIST_SECURITY_TYPES));
  return pyobj;
}


SWIGINTERN int SecurityRequestType_REQUEST_LIST_SECURITIES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityRequestType_REQUEST_LIST_SECURITIES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityRequestType_REQUEST_LIST_SECURITIES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityRequestType_REQUEST_LIST_SECURITIES));
  return pyobj;
}


SWIGINTERN int SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS));
  return pyobj;
}


SWIGINTERN int SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE));
  return pyobj;
}


SWIGINTERN int SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST));
  return pyobj;
}


SWIGINTERN int SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST));
  return pyobj;
}


SWIGINTERN int SecurityResponseType_REJECT_SECURITY_PROPOSAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityResponseType_REJECT_SECURITY_PROPOSAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityResponseType_REJECT_SECURITY_PROPOSAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityResponseType_REJECT_SECURITY_PROPOSAL));
  return pyobj;
}


SWIGINTERN int SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_OPENING_DELAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_OPENING_DELAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_OPENING_DELAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_OPENING_DELAY));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_TRADING_HALT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_TRADING_HALT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_TRADING_HALT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_TRADING_HALT));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_RESUME_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_RESUME is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_RESUME_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_RESUME));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_NO_OPEN_NO_RESUME_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_NO_OPEN_NO_RESUME is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_NO_OPEN_NO_RESUME_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_NO_OPEN_NO_RESUME));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_PRICE_INDICATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_PRICE_INDICATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_PRICE_INDICATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_PRICE_INDICATION));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_TRADING_RANGE_INDICATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_TRADING_RANGE_INDICATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_TRADING_RANGE_INDICATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_TRADING_RANGE_INDICATION));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_MARKET_IMBALANCE_BUY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_MARKET_IMBALANCE_BUY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_MARKET_IMBALANCE_BUY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_MARKET_IMBALANCE_BUY));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_MARKET_IMBALANCE_SELL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_MARKET_IMBALANCE_SELL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_MARKET_IMBALANCE_SELL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_MARKET_IMBALANCE_SELL));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_NOT_ASSIGNED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_NOT_ASSIGNED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_NOT_ASSIGNED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_NOT_ASSIGNED));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_NO_MARKET_IMBALANCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_NO_MARKET_IMBALANCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_NO_MARKET_IMBALANCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_NO_MARKET_IMBALANCE));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_ITS_PRE_OPENING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_ITS_PRE_OPENING is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_ITS_PRE_OPENING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_ITS_PRE_OPENING));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_NEW_PRICE_INDICATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_NEW_PRICE_INDICATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_NEW_PRICE_INDICATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_NEW_PRICE_INDICATION));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_TRADE_DISSEMINATION_TIME_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_TRADE_DISSEMINATION_TIME is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_TRADE_DISSEMINATION_TIME_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_TRADE_DISSEMINATION_TIME));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_READY_TO_TRADE_START_OF_SESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_READY_TO_TRADE_START_OF_SESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_READY_TO_TRADE_START_OF_SESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_READY_TO_TRADE_START_OF_SESSION));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_UNKNOWN_OR_INVALID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_UNKNOWN_OR_INVALID is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_UNKNOWN_OR_INVALID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_UNKNOWN_OR_INVALID));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_PRE_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_PRE_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_PRE_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_PRE_OPEN));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_OPENING_ROTATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_OPENING_ROTATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_OPENING_ROTATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_OPENING_ROTATION));
  return pyobj;
}


SWIGINTERN int SecurityTradingStatus_FAST_MARKET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityTradingStatus_FAST_MARKET is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityTradingStatus_FAST_MARKET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityTradingStatus_FAST_MARKET));
  return pyobj;
}


SWIGINTERN int HaltReason_ORDER_IMBALANCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HaltReason_ORDER_IMBALANCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *HaltReason_ORDER_IMBALANCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::HaltReason_ORDER_IMBALANCE));
  return pyobj;
}


SWIGINTERN int HaltReason_EQUIPMENT_CHANGEOVER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HaltReason_EQUIPMENT_CHANGEOVER is read-only.");
  return 1;
}


SWIGINTERN PyObject *HaltReason_EQUIPMENT_CHANGEOVER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::HaltReason_EQUIPMENT_CHANGEOVER));
  return pyobj;
}


SWIGINTERN int HaltReason_NEWS_PENDING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HaltReason_NEWS_PENDING is read-only.");
  return 1;
}


SWIGINTERN PyObject *HaltReason_NEWS_PENDING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::HaltReason_NEWS_PENDING));
  return pyobj;
}


SWIGINTERN int HaltReason_NEWS_DISSEMINATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HaltReason_NEWS_DISSEMINATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *HaltReason_NEWS_DISSEMINATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::HaltReason_NEWS_DISSEMINATION));
  return pyobj;
}


SWIGINTERN int HaltReason_ORDER_INFLUX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HaltReason_ORDER_INFLUX is read-only.");
  return 1;
}


SWIGINTERN PyObject *HaltReason_ORDER_INFLUX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::HaltReason_ORDER_INFLUX));
  return pyobj;
}


SWIGINTERN int HaltReason_ADDITIONAL_INFORMATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HaltReason_ADDITIONAL_INFORMATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *HaltReason_ADDITIONAL_INFORMATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::HaltReason_ADDITIONAL_INFORMATION));
  return pyobj;
}


SWIGINTERN int Adjustment_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Adjustment_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Adjustment_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Adjustment_CANCEL));
  return pyobj;
}


SWIGINTERN int Adjustment_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Adjustment_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Adjustment_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Adjustment_ERROR));
  return pyobj;
}


SWIGINTERN int Adjustment_CORRECTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Adjustment_CORRECTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *Adjustment_CORRECTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Adjustment_CORRECTION));
  return pyobj;
}


SWIGINTERN int TradSesMethod_ELECTRONIC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesMethod_ELECTRONIC is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesMethod_ELECTRONIC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesMethod_ELECTRONIC));
  return pyobj;
}


SWIGINTERN int TradSesMethod_OPEN_OUTCRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesMethod_OPEN_OUTCRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesMethod_OPEN_OUTCRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesMethod_OPEN_OUTCRY));
  return pyobj;
}


SWIGINTERN int TradSesMethod_TWO_PARTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesMethod_TWO_PARTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesMethod_TWO_PARTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesMethod_TWO_PARTY));
  return pyobj;
}


SWIGINTERN int TradSesMode_TESTING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesMode_TESTING is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesMode_TESTING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesMode_TESTING));
  return pyobj;
}


SWIGINTERN int TradSesMode_SIMULATED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesMode_SIMULATED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesMode_SIMULATED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesMode_SIMULATED));
  return pyobj;
}


SWIGINTERN int TradSesMode_PRODUCTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesMode_PRODUCTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesMode_PRODUCTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesMode_PRODUCTION));
  return pyobj;
}


SWIGINTERN int TradSesStatus_UNKNOWN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesStatus_UNKNOWN is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesStatus_UNKNOWN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesStatus_UNKNOWN));
  return pyobj;
}


SWIGINTERN int TradSesStatus_HALTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesStatus_HALTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesStatus_HALTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesStatus_HALTED));
  return pyobj;
}


SWIGINTERN int TradSesStatus_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesStatus_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesStatus_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesStatus_OPEN));
  return pyobj;
}


SWIGINTERN int TradSesStatus_CLOSED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesStatus_CLOSED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesStatus_CLOSED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesStatus_CLOSED));
  return pyobj;
}


SWIGINTERN int TradSesStatus_PRE_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesStatus_PRE_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesStatus_PRE_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesStatus_PRE_OPEN));
  return pyobj;
}


SWIGINTERN int TradSesStatus_PRE_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesStatus_PRE_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesStatus_PRE_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesStatus_PRE_CLOSE));
  return pyobj;
}


SWIGINTERN int TradSesStatus_REQUEST_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesStatus_REQUEST_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesStatus_REQUEST_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesStatus_REQUEST_REJECTED));
  return pyobj;
}


SWIGINTERN int MessageEncoding_ISO_2022_JP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MessageEncoding_ISO_2022_JP is read-only.");
  return 1;
}


SWIGINTERN PyObject *MessageEncoding_ISO_2022_JP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MessageEncoding_ISO_2022_JP);
  return pyobj;
}


SWIGINTERN int MessageEncoding_EUC_JP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MessageEncoding_EUC_JP is read-only.");
  return 1;
}


SWIGINTERN PyObject *MessageEncoding_EUC_JP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MessageEncoding_EUC_JP);
  return pyobj;
}


SWIGINTERN int MessageEncoding_SHIFT_JIS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MessageEncoding_SHIFT_JIS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MessageEncoding_SHIFT_JIS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MessageEncoding_SHIFT_JIS);
  return pyobj;
}


SWIGINTERN int MessageEncoding_UTF_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MessageEncoding_UTF_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *MessageEncoding_UTF_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MessageEncoding_UTF_8);
  return pyobj;
}


SWIGINTERN int QuoteEntryRejectReason_UNKNOWN_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteEntryRejectReason_UNKNOWN_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteEntryRejectReason_UNKNOWN_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteEntryRejectReason_UNKNOWN_SYMBOL));
  return pyobj;
}


SWIGINTERN int QuoteEntryRejectReason_EXCHANGE_CLOSED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteEntryRejectReason_EXCHANGE_CLOSED is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteEntryRejectReason_EXCHANGE_CLOSED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteEntryRejectReason_EXCHANGE_CLOSED));
  return pyobj;
}


SWIGINTERN int QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT));
  return pyobj;
}


SWIGINTERN int QuoteEntryRejectReason_TOO_LATE_TO_ENTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteEntryRejectReason_TOO_LATE_TO_ENTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteEntryRejectReason_TOO_LATE_TO_ENTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteEntryRejectReason_TOO_LATE_TO_ENTER));
  return pyobj;
}


SWIGINTERN int QuoteEntryRejectReason_UNKNOWN_QUOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteEntryRejectReason_UNKNOWN_QUOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteEntryRejectReason_UNKNOWN_QUOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteEntryRejectReason_UNKNOWN_QUOTE));
  return pyobj;
}


SWIGINTERN int QuoteEntryRejectReason_DUPLICATE_QUOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteEntryRejectReason_DUPLICATE_QUOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteEntryRejectReason_DUPLICATE_QUOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteEntryRejectReason_DUPLICATE_QUOTE));
  return pyobj;
}


SWIGINTERN int QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD));
  return pyobj;
}


SWIGINTERN int QuoteEntryRejectReason_INVALID_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteEntryRejectReason_INVALID_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteEntryRejectReason_INVALID_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteEntryRejectReason_INVALID_PRICE));
  return pyobj;
}


SWIGINTERN int QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_INVALID_TAG_NUMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_INVALID_TAG_NUMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_INVALID_TAG_NUMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_INVALID_TAG_NUMBER));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_REQUIRED_TAG_MISSING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_REQUIRED_TAG_MISSING is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_REQUIRED_TAG_MISSING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_REQUIRED_TAG_MISSING));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_UNDEFINED_TAG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_UNDEFINED_TAG is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_UNDEFINED_TAG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_UNDEFINED_TAG));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_VALUE_IS_INCORRECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_VALUE_IS_INCORRECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_VALUE_IS_INCORRECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_VALUE_IS_INCORRECT));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_DECRYPTION_PROBLEM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_DECRYPTION_PROBLEM is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_DECRYPTION_PROBLEM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_DECRYPTION_PROBLEM));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_SIGNATURE_PROBLEM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_SIGNATURE_PROBLEM is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_SIGNATURE_PROBLEM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_SIGNATURE_PROBLEM));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_COMPID_PROBLEM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_COMPID_PROBLEM is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_COMPID_PROBLEM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_COMPID_PROBLEM));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_INVALID_MSGTYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_INVALID_MSGTYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_INVALID_MSGTYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_INVALID_MSGTYPE));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_XML_VALIDATION_ERROR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_XML_VALIDATION_ERROR is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_XML_VALIDATION_ERROR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_XML_VALIDATION_ERROR));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SessionRejectReason_OTHER));
  return pyobj;
}


SWIGINTERN int BidRequestTransType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidRequestTransType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidRequestTransType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BidRequestTransType_NEW));
  return pyobj;
}


SWIGINTERN int BidRequestTransType_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidRequestTransType_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidRequestTransType_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BidRequestTransType_CANCEL));
  return pyobj;
}


SWIGINTERN int ExecRestatementReason_GT_CORPORATE_ACTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecRestatementReason_GT_CORPORATE_ACTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecRestatementReason_GT_CORPORATE_ACTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExecRestatementReason_GT_CORPORATE_ACTION));
  return pyobj;
}


SWIGINTERN int ExecRestatementReason_GT_RENEWAL_RESTATEMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecRestatementReason_GT_RENEWAL_RESTATEMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecRestatementReason_GT_RENEWAL_RESTATEMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExecRestatementReason_GT_RENEWAL_RESTATEMENT));
  return pyobj;
}


SWIGINTERN int ExecRestatementReason_VERBAL_CHANGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecRestatementReason_VERBAL_CHANGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecRestatementReason_VERBAL_CHANGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExecRestatementReason_VERBAL_CHANGE));
  return pyobj;
}


SWIGINTERN int ExecRestatementReason_REPRICING_OF_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecRestatementReason_REPRICING_OF_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecRestatementReason_REPRICING_OF_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExecRestatementReason_REPRICING_OF_ORDER));
  return pyobj;
}


SWIGINTERN int ExecRestatementReason_BROKER_OPTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecRestatementReason_BROKER_OPTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecRestatementReason_BROKER_OPTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExecRestatementReason_BROKER_OPTION));
  return pyobj;
}


SWIGINTERN int ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY));
  return pyobj;
}


SWIGINTERN int ExecRestatementReason_CANCEL_ON_TRADING_HALT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecRestatementReason_CANCEL_ON_TRADING_HALT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecRestatementReason_CANCEL_ON_TRADING_HALT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExecRestatementReason_CANCEL_ON_TRADING_HALT));
  return pyobj;
}


SWIGINTERN int ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE));
  return pyobj;
}


SWIGINTERN int ExecRestatementReason_MARKET_OPTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecRestatementReason_MARKET_OPTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecRestatementReason_MARKET_OPTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExecRestatementReason_MARKET_OPTION));
  return pyobj;
}


SWIGINTERN int ExecRestatementReason_CANCELED_NOT_BEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecRestatementReason_CANCELED_NOT_BEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecRestatementReason_CANCELED_NOT_BEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExecRestatementReason_CANCELED_NOT_BEST));
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BusinessRejectReason_OTHER));
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_UNKOWN_ID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_UNKOWN_ID is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_UNKOWN_ID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BusinessRejectReason_UNKOWN_ID));
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_UNKNOWN_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_UNKNOWN_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_UNKNOWN_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BusinessRejectReason_UNKNOWN_SECURITY));
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE));
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_APPLICATION_NOT_AVAILABLE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_APPLICATION_NOT_AVAILABLE is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_APPLICATION_NOT_AVAILABLE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BusinessRejectReason_APPLICATION_NOT_AVAILABLE));
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING));
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_NOT_AUTHORIZED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_NOT_AUTHORIZED is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_NOT_AUTHORIZED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BusinessRejectReason_NOT_AUTHORIZED));
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME));
  return pyobj;
}


SWIGINTERN int MsgDirection_SEND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgDirection_SEND is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgDirection_SEND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MsgDirection_SEND));
  return pyobj;
}


SWIGINTERN int MsgDirection_RECEIVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MsgDirection_RECEIVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MsgDirection_RECEIVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MsgDirection_RECEIVE));
  return pyobj;
}


SWIGINTERN int DiscretionInst_RELATED_TO_DISPLAYED_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionInst_RELATED_TO_DISPLAYED_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionInst_RELATED_TO_DISPLAYED_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DiscretionInst_RELATED_TO_DISPLAYED_PRICE));
  return pyobj;
}


SWIGINTERN int DiscretionInst_RELATED_TO_MARKET_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionInst_RELATED_TO_MARKET_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionInst_RELATED_TO_MARKET_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DiscretionInst_RELATED_TO_MARKET_PRICE));
  return pyobj;
}


SWIGINTERN int DiscretionInst_RELATED_TO_PRIMARY_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionInst_RELATED_TO_PRIMARY_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionInst_RELATED_TO_PRIMARY_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DiscretionInst_RELATED_TO_PRIMARY_PRICE));
  return pyobj;
}


SWIGINTERN int DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE));
  return pyobj;
}


SWIGINTERN int DiscretionInst_RELATED_TO_MIDPOINT_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionInst_RELATED_TO_MIDPOINT_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionInst_RELATED_TO_MIDPOINT_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DiscretionInst_RELATED_TO_MIDPOINT_PRICE));
  return pyobj;
}


SWIGINTERN int DiscretionInst_RELATED_TO_LAST_TRADE_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionInst_RELATED_TO_LAST_TRADE_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionInst_RELATED_TO_LAST_TRADE_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DiscretionInst_RELATED_TO_LAST_TRADE_PRICE));
  return pyobj;
}


SWIGINTERN int DiscretionInst_RELATED_TO_VWAP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionInst_RELATED_TO_VWAP is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionInst_RELATED_TO_VWAP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DiscretionInst_RELATED_TO_VWAP));
  return pyobj;
}


SWIGINTERN int BidType_NON_DISCLOSED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidType_NON_DISCLOSED is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidType_NON_DISCLOSED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BidType_NON_DISCLOSED));
  return pyobj;
}


SWIGINTERN int BidType_DISCLOSED_STYLE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidType_DISCLOSED_STYLE is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidType_DISCLOSED_STYLE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BidType_DISCLOSED_STYLE));
  return pyobj;
}


SWIGINTERN int BidType_NO_BIDDING_PROCESS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidType_NO_BIDDING_PROCESS is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidType_NO_BIDDING_PROCESS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BidType_NO_BIDDING_PROCESS));
  return pyobj;
}


SWIGINTERN int BidDescriptorType_SECTOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidDescriptorType_SECTOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidDescriptorType_SECTOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BidDescriptorType_SECTOR));
  return pyobj;
}


SWIGINTERN int BidDescriptorType_COUNTRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidDescriptorType_COUNTRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidDescriptorType_COUNTRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BidDescriptorType_COUNTRY));
  return pyobj;
}


SWIGINTERN int BidDescriptorType_INDEX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidDescriptorType_INDEX is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidDescriptorType_INDEX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BidDescriptorType_INDEX));
  return pyobj;
}


SWIGINTERN int SideValueInd_SIDEVALUE1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SideValueInd_SIDEVALUE1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *SideValueInd_SIDEVALUE1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SideValueInd_SIDEVALUE1));
  return pyobj;
}


SWIGINTERN int SideValueInd_SIDEVALUE2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SideValueInd_SIDEVALUE2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *SideValueInd_SIDEVALUE2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SideValueInd_SIDEVALUE2));
  return pyobj;
}


SWIGINTERN int LiquidityIndType_FIVEDAY_MOVING_AVERAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LiquidityIndType_FIVEDAY_MOVING_AVERAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *LiquidityIndType_FIVEDAY_MOVING_AVERAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::LiquidityIndType_FIVEDAY_MOVING_AVERAGE));
  return pyobj;
}


SWIGINTERN int LiquidityIndType_TWENTYDAY_MOVING_AVERAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LiquidityIndType_TWENTYDAY_MOVING_AVERAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *LiquidityIndType_TWENTYDAY_MOVING_AVERAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::LiquidityIndType_TWENTYDAY_MOVING_AVERAGE));
  return pyobj;
}


SWIGINTERN int LiquidityIndType_NORMAL_MARKET_SIZE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LiquidityIndType_NORMAL_MARKET_SIZE is read-only.");
  return 1;
}


SWIGINTERN PyObject *LiquidityIndType_NORMAL_MARKET_SIZE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::LiquidityIndType_NORMAL_MARKET_SIZE));
  return pyobj;
}


SWIGINTERN int LiquidityIndType_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LiquidityIndType_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *LiquidityIndType_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::LiquidityIndType_OTHER));
  return pyobj;
}


SWIGINTERN int ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST));
  return pyobj;
}


SWIGINTERN int ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS));
  return pyobj;
}


SWIGINTERN int ProgRptReqs_REAL_TIME_EXECUTION_REPORTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ProgRptReqs_REAL_TIME_EXECUTION_REPORTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ProgRptReqs_REAL_TIME_EXECUTION_REPORTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ProgRptReqs_REAL_TIME_EXECUTION_REPORTS));
  return pyobj;
}


SWIGINTERN int IncTaxInd_NET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IncTaxInd_NET is read-only.");
  return 1;
}


SWIGINTERN PyObject *IncTaxInd_NET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::IncTaxInd_NET));
  return pyobj;
}


SWIGINTERN int IncTaxInd_GROSS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IncTaxInd_GROSS is read-only.");
  return 1;
}


SWIGINTERN PyObject *IncTaxInd_GROSS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::IncTaxInd_GROSS));
  return pyobj;
}


SWIGINTERN int BidTradeType_RISK_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidTradeType_RISK_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidTradeType_RISK_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BidTradeType_RISK_TRADE));
  return pyobj;
}


SWIGINTERN int BidTradeType_VWAP_GUARANTEE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidTradeType_VWAP_GUARANTEE is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidTradeType_VWAP_GUARANTEE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BidTradeType_VWAP_GUARANTEE));
  return pyobj;
}


SWIGINTERN int BidTradeType_AGENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidTradeType_AGENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidTradeType_AGENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BidTradeType_AGENCY));
  return pyobj;
}


SWIGINTERN int BidTradeType_GUARANTEED_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BidTradeType_GUARANTEED_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *BidTradeType_GUARANTEED_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BidTradeType_GUARANTEED_CLOSE));
  return pyobj;
}


SWIGINTERN int BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION));
  return pyobj;
}


SWIGINTERN int BasisPxType_CLOSING_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_CLOSING_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_CLOSING_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_CLOSING_PRICE));
  return pyobj;
}


SWIGINTERN int BasisPxType_CURRENT_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_CURRENT_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_CURRENT_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_CURRENT_PRICE));
  return pyobj;
}


SWIGINTERN int BasisPxType_SQ_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_SQ is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_SQ_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_SQ));
  return pyobj;
}


SWIGINTERN int BasisPxType_VWAP_THROUGH_A_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_VWAP_THROUGH_A_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_VWAP_THROUGH_A_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_VWAP_THROUGH_A_DAY));
  return pyobj;
}


SWIGINTERN int BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_VWAP_THROUGH_A_MORNING_SESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_VWAP_THROUGH_A_MORNING_SESSION));
  return pyobj;
}


SWIGINTERN int BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION));
  return pyobj;
}


SWIGINTERN int BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI));
  return pyobj;
}


SWIGINTERN int BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI));
  return pyobj;
}


SWIGINTERN int BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI));
  return pyobj;
}


SWIGINTERN int BasisPxType_STRIKE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_STRIKE is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_STRIKE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_STRIKE));
  return pyobj;
}


SWIGINTERN int BasisPxType_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_OPEN));
  return pyobj;
}


SWIGINTERN int BasisPxType_OTHERS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BasisPxType_OTHERS is read-only.");
  return 1;
}


SWIGINTERN PyObject *BasisPxType_OTHERS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BasisPxType_OTHERS));
  return pyobj;
}


SWIGINTERN int PriceType_PERCENTAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PriceType_PERCENTAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PriceType_PERCENTAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PriceType_PERCENTAGE));
  return pyobj;
}


SWIGINTERN int PriceType_PER_UNIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PriceType_PER_UNIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PriceType_PER_UNIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PriceType_PER_UNIT));
  return pyobj;
}


SWIGINTERN int PriceType_FIXED_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PriceType_FIXED_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PriceType_FIXED_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PriceType_FIXED_AMOUNT));
  return pyobj;
}


SWIGINTERN int PriceType_DISCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PriceType_DISCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PriceType_DISCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PriceType_DISCOUNT));
  return pyobj;
}


SWIGINTERN int PriceType_PREMIUM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PriceType_PREMIUM is read-only.");
  return 1;
}


SWIGINTERN PyObject *PriceType_PREMIUM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PriceType_PREMIUM));
  return pyobj;
}


SWIGINTERN int PriceType_SPREAD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PriceType_SPREAD is read-only.");
  return 1;
}


SWIGINTERN PyObject *PriceType_SPREAD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PriceType_SPREAD));
  return pyobj;
}


SWIGINTERN int PriceType_TED_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PriceType_TED_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PriceType_TED_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PriceType_TED_PRICE));
  return pyobj;
}


SWIGINTERN int PriceType_TED_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PriceType_TED_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *PriceType_TED_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PriceType_TED_YIELD));
  return pyobj;
}


SWIGINTERN int PriceType_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PriceType_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *PriceType_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PriceType_YIELD));
  return pyobj;
}


SWIGINTERN int GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION));
  return pyobj;
}


SWIGINTERN int GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES is read-only.");
  return 1;
}


SWIGINTERN PyObject *GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES));
  return pyobj;
}


SWIGINTERN int GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE is read-only.");
  return 1;
}


SWIGINTERN PyObject *GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE));
  return pyobj;
}


SWIGINTERN int ListStatusType_ACK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListStatusType_ACK is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListStatusType_ACK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListStatusType_ACK));
  return pyobj;
}


SWIGINTERN int ListStatusType_RESPONSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListStatusType_RESPONSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListStatusType_RESPONSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListStatusType_RESPONSE));
  return pyobj;
}


SWIGINTERN int ListStatusType_TIMED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListStatusType_TIMED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListStatusType_TIMED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListStatusType_TIMED));
  return pyobj;
}


SWIGINTERN int ListStatusType_EXECSTARTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListStatusType_EXECSTARTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListStatusType_EXECSTARTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListStatusType_EXECSTARTED));
  return pyobj;
}


SWIGINTERN int ListStatusType_ALLDONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListStatusType_ALLDONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListStatusType_ALLDONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListStatusType_ALLDONE));
  return pyobj;
}


SWIGINTERN int ListStatusType_ALERT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListStatusType_ALERT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListStatusType_ALERT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListStatusType_ALERT));
  return pyobj;
}


SWIGINTERN int NetGrossInd_NET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NetGrossInd_NET is read-only.");
  return 1;
}


SWIGINTERN PyObject *NetGrossInd_NET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::NetGrossInd_NET));
  return pyobj;
}


SWIGINTERN int NetGrossInd_GROSS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NetGrossInd_GROSS is read-only.");
  return 1;
}


SWIGINTERN PyObject *NetGrossInd_GROSS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::NetGrossInd_GROSS));
  return pyobj;
}


SWIGINTERN int ListOrderStatus_INBIDDINGPROCESS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListOrderStatus_INBIDDINGPROCESS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListOrderStatus_INBIDDINGPROCESS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListOrderStatus_INBIDDINGPROCESS));
  return pyobj;
}


SWIGINTERN int ListOrderStatus_RECEIVEDFOREXECUTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListOrderStatus_RECEIVEDFOREXECUTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListOrderStatus_RECEIVEDFOREXECUTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListOrderStatus_RECEIVEDFOREXECUTION));
  return pyobj;
}


SWIGINTERN int ListOrderStatus_EXECUTING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListOrderStatus_EXECUTING is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListOrderStatus_EXECUTING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListOrderStatus_EXECUTING));
  return pyobj;
}


SWIGINTERN int ListOrderStatus_CANCELING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListOrderStatus_CANCELING is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListOrderStatus_CANCELING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListOrderStatus_CANCELING));
  return pyobj;
}


SWIGINTERN int ListOrderStatus_ALERT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListOrderStatus_ALERT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListOrderStatus_ALERT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListOrderStatus_ALERT));
  return pyobj;
}


SWIGINTERN int ListOrderStatus_ALL_DONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListOrderStatus_ALL_DONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListOrderStatus_ALL_DONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListOrderStatus_ALL_DONE));
  return pyobj;
}


SWIGINTERN int ListOrderStatus_REJECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListOrderStatus_REJECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListOrderStatus_REJECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ListOrderStatus_REJECT));
  return pyobj;
}


SWIGINTERN int ListExecInstType_IMMEDIATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListExecInstType_IMMEDIATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListExecInstType_IMMEDIATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ListExecInstType_IMMEDIATE));
  return pyobj;
}


SWIGINTERN int ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION));
  return pyobj;
}


SWIGINTERN int ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN));
  return pyobj;
}


SWIGINTERN int ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP));
  return pyobj;
}


SWIGINTERN int ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW is read-only.");
  return 1;
}


SWIGINTERN PyObject *ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW));
  return pyobj;
}


SWIGINTERN int CxlRejResponseTo_ORDER_CANCEL_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlRejResponseTo_ORDER_CANCEL_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlRejResponseTo_ORDER_CANCEL_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CxlRejResponseTo_ORDER_CANCEL_REQUEST));
  return pyobj;
}


SWIGINTERN int CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST));
  return pyobj;
}


SWIGINTERN int MultiLegReportingType_SINGLE_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MultiLegReportingType_SINGLE_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MultiLegReportingType_SINGLE_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MultiLegReportingType_SINGLE_SECURITY));
  return pyobj;
}


SWIGINTERN int MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY));
  return pyobj;
}


SWIGINTERN int MultiLegReportingType_MULTI_LEG_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MultiLegReportingType_MULTI_LEG_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MultiLegReportingType_MULTI_LEG_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MultiLegReportingType_MULTI_LEG_SECURITY));
  return pyobj;
}


SWIGINTERN int PartyIDSource_BIC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_BIC is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_BIC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_BIC));
  return pyobj;
}


SWIGINTERN int PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER));
  return pyobj;
}


SWIGINTERN int PartyIDSource_PROPRIETARY_CUSTOM_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_PROPRIETARY_CUSTOM_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_PROPRIETARY_CUSTOM_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_PROPRIETARY_CUSTOM_CODE));
  return pyobj;
}


SWIGINTERN int PartyIDSource_ISO_COUNTRY_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_ISO_COUNTRY_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_ISO_COUNTRY_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_ISO_COUNTRY_CODE));
  return pyobj;
}


SWIGINTERN int PartyIDSource_SETTLEMENT_ENTITY_LOCATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_SETTLEMENT_ENTITY_LOCATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_SETTLEMENT_ENTITY_LOCATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_SETTLEMENT_ENTITY_LOCATION));
  return pyobj;
}


SWIGINTERN int PartyIDSource_MIC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_MIC is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_MIC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_MIC));
  return pyobj;
}


SWIGINTERN int PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE));
  return pyobj;
}


SWIGINTERN int PartyIDSource_KOREAN_INVESTOR_ID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_KOREAN_INVESTOR_ID is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_KOREAN_INVESTOR_ID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_KOREAN_INVESTOR_ID));
  return pyobj;
}


SWIGINTERN int PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID));
  return pyobj;
}


SWIGINTERN int PartyIDSource_TAIWANESE_TRADING_ACCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_TAIWANESE_TRADING_ACCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_TAIWANESE_TRADING_ACCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_TAIWANESE_TRADING_ACCOUNT));
  return pyobj;
}


SWIGINTERN int PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY_NUMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY_NUMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY_NUMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY_NUMBER));
  return pyobj;
}


SWIGINTERN int PartyIDSource_CHINESE_B_SHARE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_CHINESE_B_SHARE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_CHINESE_B_SHARE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_CHINESE_B_SHARE));
  return pyobj;
}


SWIGINTERN int PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER));
  return pyobj;
}


SWIGINTERN int PartyIDSource_US_SOCIAL_SECURITY_NUMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_US_SOCIAL_SECURITY_NUMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_US_SOCIAL_SECURITY_NUMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_US_SOCIAL_SECURITY_NUMBER));
  return pyobj;
}


SWIGINTERN int PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER));
  return pyobj;
}


SWIGINTERN int PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER));
  return pyobj;
}


SWIGINTERN int PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER));
  return pyobj;
}


SWIGINTERN int PartyIDSource_DIRECTED_BROKER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyIDSource_DIRECTED_BROKER is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyIDSource_DIRECTED_BROKER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PartyIDSource_DIRECTED_BROKER));
  return pyobj;
}


SWIGINTERN int PartyRole_EXECUTING_FIRM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyRole_EXECUTING_FIRM is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyRole_EXECUTING_FIRM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PartyRole_EXECUTING_FIRM));
  return pyobj;
}


SWIGINTERN int PartyRole_BROKER_OF_CREDIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyRole_BROKER_OF_CREDIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyRole_BROKER_OF_CREDIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PartyRole_BROKER_OF_CREDIT));
  return pyobj;
}


SWIGINTERN int PartyRole_CLIENT_ID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyRole_CLIENT_ID is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyRole_CLIENT_ID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PartyRole_CLIENT_ID));
  return pyobj;
}


SWIGINTERN int PartyRole_CLEARING_FIRM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyRole_CLEARING_FIRM is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyRole_CLEARING_FIRM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PartyRole_CLEARING_FIRM));
  return pyobj;
}


SWIGINTERN int PartyRole_INVESTOR_ID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyRole_INVESTOR_ID is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyRole_INVESTOR_ID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PartyRole_INVESTOR_ID));
  return pyobj;
}


SWIGINTERN int PartyRole_INTRODUCING_FIRM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyRole_INTRODUCING_FIRM is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyRole_INTRODUCING_FIRM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PartyRole_INTRODUCING_FIRM));
  return pyobj;
}


SWIGINTERN int PartyRole_ENTERING_FIRM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyRole_ENTERING_FIRM is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyRole_ENTERING_FIRM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PartyRole_ENTERING_FIRM));
  return pyobj;
}


SWIGINTERN int PartyRole_LOCATE_LENDING_FIRM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyRole_LOCATE_LENDING_FIRM is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyRole_LOCATE_LENDING_FIRM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PartyRole_LOCATE_LENDING_FIRM));
  return pyobj;
}


SWIGINTERN int PartyRole_FUND_MANAGER_CLIENT_ID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PartyRole_FUND_MANAGER_CLIENT_ID is read-only.");
  return 1;
}


SWIGINTERN PyObject *PartyRole_FUND_MANAGER_CLIENT_ID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PartyRole_FUND_MANAGER_CLIENT_ID));
  return pyobj;
}


SWIGINTERN int Product_AGENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_AGENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_AGENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_AGENCY));
  return pyobj;
}


SWIGINTERN int Product_COMMODITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_COMMODITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_COMMODITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_COMMODITY));
  return pyobj;
}


SWIGINTERN int Product_CORPORATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_CORPORATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_CORPORATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_CORPORATE));
  return pyobj;
}


SWIGINTERN int Product_CURRENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_CURRENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_CURRENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_CURRENCY));
  return pyobj;
}


SWIGINTERN int Product_EQUITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_EQUITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_EQUITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_EQUITY));
  return pyobj;
}


SWIGINTERN int Product_GOVERNMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_GOVERNMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_GOVERNMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_GOVERNMENT));
  return pyobj;
}


SWIGINTERN int Product_INDEX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_INDEX is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_INDEX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_INDEX));
  return pyobj;
}


SWIGINTERN int Product_LOAN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_LOAN is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_LOAN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_LOAN));
  return pyobj;
}


SWIGINTERN int Product_MONEYMARKET_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_MONEYMARKET is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_MONEYMARKET_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_MONEYMARKET));
  return pyobj;
}


SWIGINTERN int Product_MORTGAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_MORTGAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_MORTGAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_MORTGAGE));
  return pyobj;
}


SWIGINTERN int Product_MUNICIPAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_MUNICIPAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_MUNICIPAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_MUNICIPAL));
  return pyobj;
}


SWIGINTERN int Product_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_OTHER));
  return pyobj;
}


SWIGINTERN int Product_FINANCING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Product_FINANCING is read-only.");
  return 1;
}


SWIGINTERN PyObject *Product_FINANCING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::Product_FINANCING));
  return pyobj;
}


SWIGINTERN int QuantityType_SHARES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuantityType_SHARES is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuantityType_SHARES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuantityType_SHARES));
  return pyobj;
}


SWIGINTERN int QuantityType_BONDS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuantityType_BONDS is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuantityType_BONDS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuantityType_BONDS));
  return pyobj;
}


SWIGINTERN int QuantityType_CURRENTFACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuantityType_CURRENTFACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuantityType_CURRENTFACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuantityType_CURRENTFACE));
  return pyobj;
}


SWIGINTERN int QuantityType_ORIGINALFACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuantityType_ORIGINALFACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuantityType_ORIGINALFACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuantityType_ORIGINALFACE));
  return pyobj;
}


SWIGINTERN int QuantityType_CURRENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuantityType_CURRENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuantityType_CURRENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuantityType_CURRENCY));
  return pyobj;
}


SWIGINTERN int QuantityType_CONTRACTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuantityType_CONTRACTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuantityType_CONTRACTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuantityType_CONTRACTS));
  return pyobj;
}


SWIGINTERN int QuantityType_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuantityType_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuantityType_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuantityType_OTHER));
  return pyobj;
}


SWIGINTERN int QuantityType_PAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuantityType_PAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuantityType_PAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuantityType_PAR));
  return pyobj;
}


SWIGINTERN int RoundingDirection_ROUND_TO_NEAREST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoundingDirection_ROUND_TO_NEAREST is read-only.");
  return 1;
}


SWIGINTERN PyObject *RoundingDirection_ROUND_TO_NEAREST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::RoundingDirection_ROUND_TO_NEAREST));
  return pyobj;
}


SWIGINTERN int RoundingDirection_ROUND_DOWN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoundingDirection_ROUND_DOWN is read-only.");
  return 1;
}


SWIGINTERN PyObject *RoundingDirection_ROUND_DOWN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::RoundingDirection_ROUND_DOWN));
  return pyobj;
}


SWIGINTERN int RoundingDirection_ROUND_UP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoundingDirection_ROUND_UP is read-only.");
  return 1;
}


SWIGINTERN PyObject *RoundingDirection_ROUND_UP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::RoundingDirection_ROUND_UP));
  return pyobj;
}


SWIGINTERN int DistribPaymentMethod_CREST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DistribPaymentMethod_CREST is read-only.");
  return 1;
}


SWIGINTERN PyObject *DistribPaymentMethod_CREST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DistribPaymentMethod_CREST));
  return pyobj;
}


SWIGINTERN int DistribPaymentMethod_NSCC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DistribPaymentMethod_NSCC is read-only.");
  return 1;
}


SWIGINTERN PyObject *DistribPaymentMethod_NSCC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DistribPaymentMethod_NSCC));
  return pyobj;
}


SWIGINTERN int DistribPaymentMethod_EUROCLEAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DistribPaymentMethod_EUROCLEAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *DistribPaymentMethod_EUROCLEAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DistribPaymentMethod_EUROCLEAR));
  return pyobj;
}


SWIGINTERN int DistribPaymentMethod_CLEARSTREAM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DistribPaymentMethod_CLEARSTREAM is read-only.");
  return 1;
}


SWIGINTERN PyObject *DistribPaymentMethod_CLEARSTREAM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DistribPaymentMethod_CLEARSTREAM));
  return pyobj;
}


SWIGINTERN int DistribPaymentMethod_CHEQUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DistribPaymentMethod_CHEQUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DistribPaymentMethod_CHEQUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DistribPaymentMethod_CHEQUE));
  return pyobj;
}


SWIGINTERN int DistribPaymentMethod_TELEGRAPHIC_TRANSFER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DistribPaymentMethod_TELEGRAPHIC_TRANSFER is read-only.");
  return 1;
}


SWIGINTERN PyObject *DistribPaymentMethod_TELEGRAPHIC_TRANSFER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DistribPaymentMethod_TELEGRAPHIC_TRANSFER));
  return pyobj;
}


SWIGINTERN int DistribPaymentMethod_FEDWIRE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DistribPaymentMethod_FEDWIRE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DistribPaymentMethod_FEDWIRE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DistribPaymentMethod_FEDWIRE));
  return pyobj;
}


SWIGINTERN int DistribPaymentMethod_DIRECT_CREDIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DistribPaymentMethod_DIRECT_CREDIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *DistribPaymentMethod_DIRECT_CREDIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DistribPaymentMethod_DIRECT_CREDIT));
  return pyobj;
}


SWIGINTERN int DistribPaymentMethod_ACH_CREDIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DistribPaymentMethod_ACH_CREDIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *DistribPaymentMethod_ACH_CREDIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DistribPaymentMethod_ACH_CREDIT));
  return pyobj;
}


SWIGINTERN int CancellationRights_NO_EXECUTION_ONLY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CancellationRights_NO_EXECUTION_ONLY is read-only.");
  return 1;
}


SWIGINTERN PyObject *CancellationRights_NO_EXECUTION_ONLY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CancellationRights_NO_EXECUTION_ONLY));
  return pyobj;
}


SWIGINTERN int CancellationRights_NO_WAIVER_AGREEMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CancellationRights_NO_WAIVER_AGREEMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CancellationRights_NO_WAIVER_AGREEMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CancellationRights_NO_WAIVER_AGREEMENT));
  return pyobj;
}


SWIGINTERN int CancellationRights_NO_INSTITUTIONAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CancellationRights_NO_INSTITUTIONAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *CancellationRights_NO_INSTITUTIONAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CancellationRights_NO_INSTITUTIONAL));
  return pyobj;
}


SWIGINTERN int MoneyLaunderingStatus_PASSED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MoneyLaunderingStatus_PASSED is read-only.");
  return 1;
}


SWIGINTERN PyObject *MoneyLaunderingStatus_PASSED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MoneyLaunderingStatus_PASSED));
  return pyobj;
}


SWIGINTERN int MoneyLaunderingStatus_NOT_CHECKED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MoneyLaunderingStatus_NOT_CHECKED is read-only.");
  return 1;
}


SWIGINTERN PyObject *MoneyLaunderingStatus_NOT_CHECKED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MoneyLaunderingStatus_NOT_CHECKED));
  return pyobj;
}


SWIGINTERN int MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT));
  return pyobj;
}


SWIGINTERN int MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION));
  return pyobj;
}


SWIGINTERN int MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION));
  return pyobj;
}


SWIGINTERN int ExecPriceType_BID_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecPriceType_BID_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecPriceType_BID_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecPriceType_BID_PRICE));
  return pyobj;
}


SWIGINTERN int ExecPriceType_CREATION_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecPriceType_CREATION_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecPriceType_CREATION_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecPriceType_CREATION_PRICE));
  return pyobj;
}


SWIGINTERN int ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT));
  return pyobj;
}


SWIGINTERN int ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT));
  return pyobj;
}


SWIGINTERN int ExecPriceType_OFFER_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecPriceType_OFFER_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecPriceType_OFFER_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecPriceType_OFFER_PRICE));
  return pyobj;
}


SWIGINTERN int ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT));
  return pyobj;
}


SWIGINTERN int ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT));
  return pyobj;
}


SWIGINTERN int ExecPriceType_SINGLE_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecPriceType_SINGLE_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecPriceType_SINGLE_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecPriceType_SINGLE_PRICE));
  return pyobj;
}


SWIGINTERN int TradeReportTransType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportTransType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportTransType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportTransType_NEW));
  return pyobj;
}


SWIGINTERN int TradeReportTransType_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportTransType_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportTransType_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportTransType_CANCEL));
  return pyobj;
}


SWIGINTERN int TradeReportTransType_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportTransType_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportTransType_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportTransType_REPLACE));
  return pyobj;
}


SWIGINTERN int TradeReportTransType_RELEASE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportTransType_RELEASE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportTransType_RELEASE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportTransType_RELEASE));
  return pyobj;
}


SWIGINTERN int TradeReportTransType_REVERSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportTransType_REVERSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportTransType_REVERSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportTransType_REVERSE));
  return pyobj;
}


SWIGINTERN int PaymentMethod_CREST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PaymentMethod_CREST is read-only.");
  return 1;
}


SWIGINTERN PyObject *PaymentMethod_CREST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PaymentMethod_CREST));
  return pyobj;
}


SWIGINTERN int PaymentMethod_NSCC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PaymentMethod_NSCC is read-only.");
  return 1;
}


SWIGINTERN PyObject *PaymentMethod_NSCC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PaymentMethod_NSCC));
  return pyobj;
}


SWIGINTERN int PaymentMethod_EUROCLEAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PaymentMethod_EUROCLEAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *PaymentMethod_EUROCLEAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PaymentMethod_EUROCLEAR));
  return pyobj;
}


SWIGINTERN int PaymentMethod_CLEARSTREAM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PaymentMethod_CLEARSTREAM is read-only.");
  return 1;
}


SWIGINTERN PyObject *PaymentMethod_CLEARSTREAM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PaymentMethod_CLEARSTREAM));
  return pyobj;
}


SWIGINTERN int PaymentMethod_CHEQUE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PaymentMethod_CHEQUE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PaymentMethod_CHEQUE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PaymentMethod_CHEQUE));
  return pyobj;
}


SWIGINTERN int PaymentMethod_TELEGRAPHIC_TRANSFER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PaymentMethod_TELEGRAPHIC_TRANSFER is read-only.");
  return 1;
}


SWIGINTERN PyObject *PaymentMethod_TELEGRAPHIC_TRANSFER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PaymentMethod_TELEGRAPHIC_TRANSFER));
  return pyobj;
}


SWIGINTERN int PaymentMethod_FEDWIRE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PaymentMethod_FEDWIRE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PaymentMethod_FEDWIRE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PaymentMethod_FEDWIRE));
  return pyobj;
}


SWIGINTERN int PaymentMethod_DEBIT_CARD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PaymentMethod_DEBIT_CARD is read-only.");
  return 1;
}


SWIGINTERN PyObject *PaymentMethod_DEBIT_CARD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PaymentMethod_DEBIT_CARD));
  return pyobj;
}


SWIGINTERN int PaymentMethod_DIRECT_DEBIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PaymentMethod_DIRECT_DEBIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PaymentMethod_DIRECT_DEBIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PaymentMethod_DIRECT_DEBIT));
  return pyobj;
}


SWIGINTERN int TaxAdvantageType_NONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TaxAdvantageType_NONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TaxAdvantageType_NONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TaxAdvantageType_NONE));
  return pyobj;
}


SWIGINTERN int TaxAdvantageType_MAXI_ISA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TaxAdvantageType_MAXI_ISA is read-only.");
  return 1;
}


SWIGINTERN PyObject *TaxAdvantageType_MAXI_ISA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TaxAdvantageType_MAXI_ISA));
  return pyobj;
}


SWIGINTERN int TaxAdvantageType_TESSA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TaxAdvantageType_TESSA is read-only.");
  return 1;
}


SWIGINTERN PyObject *TaxAdvantageType_TESSA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TaxAdvantageType_TESSA));
  return pyobj;
}


SWIGINTERN int TaxAdvantageType_MINI_CASH_ISA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TaxAdvantageType_MINI_CASH_ISA is read-only.");
  return 1;
}


SWIGINTERN PyObject *TaxAdvantageType_MINI_CASH_ISA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TaxAdvantageType_MINI_CASH_ISA));
  return pyobj;
}


SWIGINTERN int TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA is read-only.");
  return 1;
}


SWIGINTERN PyObject *TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA));
  return pyobj;
}


SWIGINTERN int TaxAdvantageType_MINI_INSURANCE_ISA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TaxAdvantageType_MINI_INSURANCE_ISA is read-only.");
  return 1;
}


SWIGINTERN PyObject *TaxAdvantageType_MINI_INSURANCE_ISA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TaxAdvantageType_MINI_INSURANCE_ISA));
  return pyobj;
}


SWIGINTERN int TaxAdvantageType_CURRENT_YEAR_PAYMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TaxAdvantageType_CURRENT_YEAR_PAYMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *TaxAdvantageType_CURRENT_YEAR_PAYMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TaxAdvantageType_CURRENT_YEAR_PAYMENT));
  return pyobj;
}


SWIGINTERN int TaxAdvantageType_PRIOR_YEAR_PAYMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TaxAdvantageType_PRIOR_YEAR_PAYMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *TaxAdvantageType_PRIOR_YEAR_PAYMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TaxAdvantageType_PRIOR_YEAR_PAYMENT));
  return pyobj;
}


SWIGINTERN int TaxAdvantageType_ASSET_TRANSFER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TaxAdvantageType_ASSET_TRANSFER is read-only.");
  return 1;
}


SWIGINTERN PyObject *TaxAdvantageType_ASSET_TRANSFER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TaxAdvantageType_ASSET_TRANSFER));
  return pyobj;
}


SWIGINTERN int TaxAdvantageType_EMPLOYEE_PRIOR_YEAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TaxAdvantageType_EMPLOYEE_PRIOR_YEAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *TaxAdvantageType_EMPLOYEE_PRIOR_YEAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TaxAdvantageType_EMPLOYEE_PRIOR_YEAR));
  return pyobj;
}


SWIGINTERN int TaxAdvantageType_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TaxAdvantageType_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *TaxAdvantageType_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TaxAdvantageType_OTHER));
  return pyobj;
}


SWIGINTERN int FundRenewWaiv_YES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FundRenewWaiv_YES is read-only.");
  return 1;
}


SWIGINTERN PyObject *FundRenewWaiv_YES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::FundRenewWaiv_YES));
  return pyobj;
}


SWIGINTERN int FundRenewWaiv_NO_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FundRenewWaiv_NO is read-only.");
  return 1;
}


SWIGINTERN PyObject *FundRenewWaiv_NO_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::FundRenewWaiv_NO));
  return pyobj;
}


SWIGINTERN int RegistStatus_ACCEPTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistStatus_ACCEPTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistStatus_ACCEPTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::RegistStatus_ACCEPTED));
  return pyobj;
}


SWIGINTERN int RegistStatus_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistStatus_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistStatus_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::RegistStatus_REJECTED));
  return pyobj;
}


SWIGINTERN int RegistStatus_HELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistStatus_HELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistStatus_HELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::RegistStatus_HELD));
  return pyobj;
}


SWIGINTERN int RegistStatus_REMINDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistStatus_REMINDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistStatus_REMINDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::RegistStatus_REMINDER));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM));
  return pyobj;
}


SWIGINTERN int RegistRejReasonCode_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistRejReasonCode_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistRejReasonCode_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::RegistRejReasonCode_OTHER));
  return pyobj;
}


SWIGINTERN int RegistTransType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistTransType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistTransType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::RegistTransType_NEW));
  return pyobj;
}


SWIGINTERN int RegistTransType_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistTransType_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistTransType_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::RegistTransType_REPLACE));
  return pyobj;
}


SWIGINTERN int RegistTransType_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RegistTransType_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *RegistTransType_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::RegistTransType_CANCEL));
  return pyobj;
}


SWIGINTERN int OwnershipType_JOINT_INVESTORS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnershipType_JOINT_INVESTORS is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnershipType_JOINT_INVESTORS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OwnershipType_JOINT_INVESTORS));
  return pyobj;
}


SWIGINTERN int OwnershipType_TENANTS_IN_COMMON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnershipType_TENANTS_IN_COMMON is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnershipType_TENANTS_IN_COMMON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OwnershipType_TENANTS_IN_COMMON));
  return pyobj;
}


SWIGINTERN int OwnershipType_JOINT_TRUSTEES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnershipType_JOINT_TRUSTEES is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnershipType_JOINT_TRUSTEES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OwnershipType_JOINT_TRUSTEES));
  return pyobj;
}


SWIGINTERN int ContAmtType_COMMISSION_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ContAmtType_COMMISSION_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ContAmtType_COMMISSION_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ContAmtType_COMMISSION_AMOUNT));
  return pyobj;
}


SWIGINTERN int ContAmtType_COMMISSION_PERCENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ContAmtType_COMMISSION_PERCENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ContAmtType_COMMISSION_PERCENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ContAmtType_COMMISSION_PERCENT));
  return pyobj;
}


SWIGINTERN int ContAmtType_INITIAL_CHARGE_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ContAmtType_INITIAL_CHARGE_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ContAmtType_INITIAL_CHARGE_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ContAmtType_INITIAL_CHARGE_AMOUNT));
  return pyobj;
}


SWIGINTERN int ContAmtType_INITIAL_CHARGE_PERCENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ContAmtType_INITIAL_CHARGE_PERCENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ContAmtType_INITIAL_CHARGE_PERCENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ContAmtType_INITIAL_CHARGE_PERCENT));
  return pyobj;
}


SWIGINTERN int ContAmtType_DISCOUNT_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ContAmtType_DISCOUNT_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ContAmtType_DISCOUNT_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ContAmtType_DISCOUNT_AMOUNT));
  return pyobj;
}


SWIGINTERN int ContAmtType_DISCOUNT_PERCENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ContAmtType_DISCOUNT_PERCENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ContAmtType_DISCOUNT_PERCENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ContAmtType_DISCOUNT_PERCENT));
  return pyobj;
}


SWIGINTERN int ContAmtType_DILUTION_LEVY_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ContAmtType_DILUTION_LEVY_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ContAmtType_DILUTION_LEVY_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ContAmtType_DILUTION_LEVY_AMOUNT));
  return pyobj;
}


SWIGINTERN int ContAmtType_DILUTION_LEVY_PERCENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ContAmtType_DILUTION_LEVY_PERCENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ContAmtType_DILUTION_LEVY_PERCENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ContAmtType_DILUTION_LEVY_PERCENT));
  return pyobj;
}


SWIGINTERN int ContAmtType_EXIT_CHARGE_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ContAmtType_EXIT_CHARGE_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ContAmtType_EXIT_CHARGE_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ContAmtType_EXIT_CHARGE_AMOUNT));
  return pyobj;
}


SWIGINTERN int OwnerType_INDIVIDUAL_INVESTOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnerType_INDIVIDUAL_INVESTOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnerType_INDIVIDUAL_INVESTOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OwnerType_INDIVIDUAL_INVESTOR));
  return pyobj;
}


SWIGINTERN int OwnerType_PUBLIC_COMPANY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnerType_PUBLIC_COMPANY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnerType_PUBLIC_COMPANY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OwnerType_PUBLIC_COMPANY));
  return pyobj;
}


SWIGINTERN int OwnerType_PRIVATE_COMPANY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnerType_PRIVATE_COMPANY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnerType_PRIVATE_COMPANY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OwnerType_PRIVATE_COMPANY));
  return pyobj;
}


SWIGINTERN int OwnerType_INDIVIDUAL_TRUSTEE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnerType_INDIVIDUAL_TRUSTEE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnerType_INDIVIDUAL_TRUSTEE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OwnerType_INDIVIDUAL_TRUSTEE));
  return pyobj;
}


SWIGINTERN int OwnerType_COMPANY_TRUSTEE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnerType_COMPANY_TRUSTEE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnerType_COMPANY_TRUSTEE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OwnerType_COMPANY_TRUSTEE));
  return pyobj;
}


SWIGINTERN int OwnerType_PENSION_PLAN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnerType_PENSION_PLAN is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnerType_PENSION_PLAN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OwnerType_PENSION_PLAN));
  return pyobj;
}


SWIGINTERN int OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT));
  return pyobj;
}


SWIGINTERN int OwnerType_TRUSTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnerType_TRUSTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnerType_TRUSTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OwnerType_TRUSTS));
  return pyobj;
}


SWIGINTERN int OwnerType_FIDUCIARIES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OwnerType_FIDUCIARIES is read-only.");
  return 1;
}


SWIGINTERN PyObject *OwnerType_FIDUCIARIES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::OwnerType_FIDUCIARIES));
  return pyobj;
}


SWIGINTERN int OrderCapacity_AGENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderCapacity_AGENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderCapacity_AGENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderCapacity_AGENCY));
  return pyobj;
}


SWIGINTERN int OrderCapacity_PROPRIETARY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderCapacity_PROPRIETARY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderCapacity_PROPRIETARY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderCapacity_PROPRIETARY));
  return pyobj;
}


SWIGINTERN int OrderCapacity_INDIVIDUAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderCapacity_INDIVIDUAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderCapacity_INDIVIDUAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderCapacity_INDIVIDUAL));
  return pyobj;
}


SWIGINTERN int OrderCapacity_PRINCIPAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderCapacity_PRINCIPAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderCapacity_PRINCIPAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderCapacity_PRINCIPAL));
  return pyobj;
}


SWIGINTERN int OrderCapacity_RISKLESS_PRINCIPAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderCapacity_RISKLESS_PRINCIPAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderCapacity_RISKLESS_PRINCIPAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderCapacity_RISKLESS_PRINCIPAL));
  return pyobj;
}


SWIGINTERN int OrderCapacity_AGENT_FOR_OTHER_MEMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderCapacity_AGENT_FOR_OTHER_MEMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderCapacity_AGENT_FOR_OTHER_MEMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderCapacity_AGENT_FOR_OTHER_MEMBER));
  return pyobj;
}


SWIGINTERN int OrderRestrictions_PROGRAM_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderRestrictions_PROGRAM_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderRestrictions_PROGRAM_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderRestrictions_PROGRAM_TRADE));
  return pyobj;
}


SWIGINTERN int OrderRestrictions_INDEX_ARBITRAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderRestrictions_INDEX_ARBITRAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderRestrictions_INDEX_ARBITRAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderRestrictions_INDEX_ARBITRAGE));
  return pyobj;
}


SWIGINTERN int OrderRestrictions_NON_INDEX_ARBITRAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderRestrictions_NON_INDEX_ARBITRAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderRestrictions_NON_INDEX_ARBITRAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderRestrictions_NON_INDEX_ARBITRAGE));
  return pyobj;
}


SWIGINTERN int OrderRestrictions_COMPETING_MARKET_MAKER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderRestrictions_COMPETING_MARKET_MAKER is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderRestrictions_COMPETING_MARKET_MAKER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderRestrictions_COMPETING_MARKET_MAKER));
  return pyobj;
}


SWIGINTERN int OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY));
  return pyobj;
}


SWIGINTERN int OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY));
  return pyobj;
}


SWIGINTERN int OrderRestrictions_FOREIGN_ENTITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderRestrictions_FOREIGN_ENTITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderRestrictions_FOREIGN_ENTITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderRestrictions_FOREIGN_ENTITY));
  return pyobj;
}


SWIGINTERN int OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT));
  return pyobj;
}


SWIGINTERN int OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE));
  return pyobj;
}


SWIGINTERN int OrderRestrictions_RISKLESS_ARBITRAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OrderRestrictions_RISKLESS_ARBITRAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OrderRestrictions_RISKLESS_ARBITRAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OrderRestrictions_RISKLESS_ARBITRAGE));
  return pyobj;
}


SWIGINTERN int MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY));
  return pyobj;
}


SWIGINTERN int MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY));
  return pyobj;
}


SWIGINTERN int MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT));
  return pyobj;
}


SWIGINTERN int MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE));
  return pyobj;
}


SWIGINTERN int MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE));
  return pyobj;
}


SWIGINTERN int MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION));
  return pyobj;
}


SWIGINTERN int MassCancelRequestType_CANCEL_ALL_ORDERS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRequestType_CANCEL_ALL_ORDERS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRequestType_CANCEL_ALL_ORDERS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRequestType_CANCEL_ALL_ORDERS));
  return pyobj;
}


SWIGINTERN int MassCancelResponse_CANCEL_REQUEST_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelResponse_CANCEL_REQUEST_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelResponse_CANCEL_REQUEST_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelResponse_CANCEL_REQUEST_REJECTED));
  return pyobj;
}


SWIGINTERN int MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY));
  return pyobj;
}


SWIGINTERN int MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY));
  return pyobj;
}


SWIGINTERN int MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT));
  return pyobj;
}


SWIGINTERN int MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE));
  return pyobj;
}


SWIGINTERN int MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE));
  return pyobj;
}


SWIGINTERN int MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION));
  return pyobj;
}


SWIGINTERN int MassCancelResponse_CANCEL_ALL_ORDERS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelResponse_CANCEL_ALL_ORDERS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelResponse_CANCEL_ALL_ORDERS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelResponse_CANCEL_ALL_ORDERS));
  return pyobj;
}


SWIGINTERN int MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED));
  return pyobj;
}


SWIGINTERN int MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY));
  return pyobj;
}


SWIGINTERN int MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING));
  return pyobj;
}


SWIGINTERN int MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT));
  return pyobj;
}


SWIGINTERN int MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE));
  return pyobj;
}


SWIGINTERN int MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE));
  return pyobj;
}


SWIGINTERN int MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION));
  return pyobj;
}


SWIGINTERN int QuoteType_INDICATIVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteType_INDICATIVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteType_INDICATIVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteType_INDICATIVE));
  return pyobj;
}


SWIGINTERN int QuoteType_TRADEABLE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteType_TRADEABLE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteType_TRADEABLE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteType_TRADEABLE));
  return pyobj;
}


SWIGINTERN int QuoteType_RESTRICTED_TRADEABLE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteType_RESTRICTED_TRADEABLE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteType_RESTRICTED_TRADEABLE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteType_RESTRICTED_TRADEABLE));
  return pyobj;
}


SWIGINTERN int QuoteType_COUNTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteType_COUNTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteType_COUNTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteType_COUNTER));
  return pyobj;
}


SWIGINTERN int CashMargin_CASH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CashMargin_CASH is read-only.");
  return 1;
}


SWIGINTERN PyObject *CashMargin_CASH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CashMargin_CASH));
  return pyobj;
}


SWIGINTERN int CashMargin_MARGIN_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CashMargin_MARGIN_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *CashMargin_MARGIN_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CashMargin_MARGIN_OPEN));
  return pyobj;
}


SWIGINTERN int CashMargin_MARGIN_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CashMargin_MARGIN_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CashMargin_MARGIN_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CashMargin_MARGIN_CLOSE));
  return pyobj;
}


SWIGINTERN int Scope_LOCAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Scope_LOCAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Scope_LOCAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Scope_LOCAL));
  return pyobj;
}


SWIGINTERN int Scope_NATIONAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Scope_NATIONAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Scope_NATIONAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Scope_NATIONAL));
  return pyobj;
}


SWIGINTERN int Scope_GLOBAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Scope_GLOBAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Scope_GLOBAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Scope_GLOBAL));
  return pyobj;
}


SWIGINTERN int CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT));
  return pyobj;
}


SWIGINTERN int CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED));
  return pyobj;
}


SWIGINTERN int CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE));
  return pyobj;
}


SWIGINTERN int CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE));
  return pyobj;
}


SWIGINTERN int CrossPrioritization_NONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CrossPrioritization_NONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CrossPrioritization_NONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CrossPrioritization_NONE));
  return pyobj;
}


SWIGINTERN int CrossPrioritization_BUY_SIDE_IS_PRIORITIZED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CrossPrioritization_BUY_SIDE_IS_PRIORITIZED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CrossPrioritization_BUY_SIDE_IS_PRIORITIZED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CrossPrioritization_BUY_SIDE_IS_PRIORITIZED));
  return pyobj;
}


SWIGINTERN int CrossPrioritization_SELL_SIDE_IS_PRIORITIZED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CrossPrioritization_SELL_SIDE_IS_PRIORITIZED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CrossPrioritization_SELL_SIDE_IS_PRIORITIZED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CrossPrioritization_SELL_SIDE_IS_PRIORITIZED));
  return pyobj;
}


SWIGINTERN int NoSides_ONE_SIDE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NoSides_ONE_SIDE is read-only.");
  return 1;
}


SWIGINTERN PyObject *NoSides_ONE_SIDE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::NoSides_ONE_SIDE));
  return pyobj;
}


SWIGINTERN int NoSides_BOTH_SIDES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NoSides_BOTH_SIDES is read-only.");
  return 1;
}


SWIGINTERN PyObject *NoSides_BOTH_SIDES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::NoSides_BOTH_SIDES));
  return pyobj;
}


SWIGINTERN int SecurityListRequestType_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityListRequestType_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityListRequestType_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityListRequestType_SYMBOL));
  return pyobj;
}


SWIGINTERN int SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE));
  return pyobj;
}


SWIGINTERN int SecurityListRequestType_PRODUCT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityListRequestType_PRODUCT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityListRequestType_PRODUCT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityListRequestType_PRODUCT));
  return pyobj;
}


SWIGINTERN int SecurityListRequestType_TRADINGSESSIONID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityListRequestType_TRADINGSESSIONID is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityListRequestType_TRADINGSESSIONID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityListRequestType_TRADINGSESSIONID));
  return pyobj;
}


SWIGINTERN int SecurityListRequestType_ALL_SECURITIES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityListRequestType_ALL_SECURITIES is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityListRequestType_ALL_SECURITIES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityListRequestType_ALL_SECURITIES));
  return pyobj;
}


SWIGINTERN int SecurityRequestResult_VALID_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityRequestResult_VALID_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityRequestResult_VALID_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityRequestResult_VALID_REQUEST));
  return pyobj;
}


SWIGINTERN int SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST));
  return pyobj;
}


SWIGINTERN int SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA));
  return pyobj;
}


SWIGINTERN int SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA));
  return pyobj;
}


SWIGINTERN int SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE));
  return pyobj;
}


SWIGINTERN int SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED));
  return pyobj;
}


SWIGINTERN int MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY));
  return pyobj;
}


SWIGINTERN int MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY));
  return pyobj;
}


SWIGINTERN int MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY));
  return pyobj;
}


SWIGINTERN int TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID));
  return pyobj;
}


SWIGINTERN int TradeRequestType_ALL_TRADES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestType_ALL_TRADES is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestType_ALL_TRADES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestType_ALL_TRADES));
  return pyobj;
}


SWIGINTERN int TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST));
  return pyobj;
}


SWIGINTERN int TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA));
  return pyobj;
}


SWIGINTERN int TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA));
  return pyobj;
}


SWIGINTERN int TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA));
  return pyobj;
}


SWIGINTERN int MatchStatus_COMPARED_MATCHED_OR_AFFIRMED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MatchStatus_COMPARED_MATCHED_OR_AFFIRMED is read-only.");
  return 1;
}


SWIGINTERN PyObject *MatchStatus_COMPARED_MATCHED_OR_AFFIRMED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MatchStatus_COMPARED_MATCHED_OR_AFFIRMED));
  return pyobj;
}


SWIGINTERN int MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED is read-only.");
  return 1;
}


SWIGINTERN PyObject *MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED));
  return pyobj;
}


SWIGINTERN int MatchStatus_ADVISORY_OR_ALERT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MatchStatus_ADVISORY_OR_ALERT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MatchStatus_ADVISORY_OR_ALERT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::MatchStatus_ADVISORY_OR_ALERT));
  return pyobj;
}


SWIGINTERN int ClearingInstruction_PROCESS_NORMALLY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingInstruction_PROCESS_NORMALLY is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingInstruction_PROCESS_NORMALLY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ClearingInstruction_PROCESS_NORMALLY));
  return pyobj;
}


SWIGINTERN int ClearingInstruction_EXCLUDE_FROM_ALL_NETTING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingInstruction_EXCLUDE_FROM_ALL_NETTING is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingInstruction_EXCLUDE_FROM_ALL_NETTING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ClearingInstruction_EXCLUDE_FROM_ALL_NETTING));
  return pyobj;
}


SWIGINTERN int ClearingInstruction_BILATERAL_NETTING_ONLY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingInstruction_BILATERAL_NETTING_ONLY is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingInstruction_BILATERAL_NETTING_ONLY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ClearingInstruction_BILATERAL_NETTING_ONLY));
  return pyobj;
}


SWIGINTERN int ClearingInstruction_EX_CLEARING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingInstruction_EX_CLEARING is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingInstruction_EX_CLEARING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ClearingInstruction_EX_CLEARING));
  return pyobj;
}


SWIGINTERN int ClearingInstruction_SPECIAL_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingInstruction_SPECIAL_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingInstruction_SPECIAL_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ClearingInstruction_SPECIAL_TRADE));
  return pyobj;
}


SWIGINTERN int ClearingInstruction_MULTILATERAL_NETTING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingInstruction_MULTILATERAL_NETTING is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingInstruction_MULTILATERAL_NETTING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ClearingInstruction_MULTILATERAL_NETTING));
  return pyobj;
}


SWIGINTERN int ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY));
  return pyobj;
}


SWIGINTERN int ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY));
  return pyobj;
}


SWIGINTERN int ClearingInstruction_MANUAL_MODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingInstruction_MANUAL_MODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingInstruction_MANUAL_MODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ClearingInstruction_MANUAL_MODE));
  return pyobj;
}


SWIGINTERN int ClearingInstruction_AUTOMATIC_POSTING_MODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingInstruction_AUTOMATIC_POSTING_MODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingInstruction_AUTOMATIC_POSTING_MODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ClearingInstruction_AUTOMATIC_POSTING_MODE));
  return pyobj;
}


SWIGINTERN int AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS is read-only.");
  return 1;
}


SWIGINTERN PyObject *AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS));
  return pyobj;
}


SWIGINTERN int AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS is read-only.");
  return 1;
}


SWIGINTERN PyObject *AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS));
  return pyobj;
}


SWIGINTERN int AccountType_HOUSE_TRADER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AccountType_HOUSE_TRADER is read-only.");
  return 1;
}


SWIGINTERN PyObject *AccountType_HOUSE_TRADER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AccountType_HOUSE_TRADER));
  return pyobj;
}


SWIGINTERN int AccountType_FLOOR_TRADER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AccountType_FLOOR_TRADER is read-only.");
  return 1;
}


SWIGINTERN PyObject *AccountType_FLOOR_TRADER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AccountType_FLOOR_TRADER));
  return pyobj;
}


SWIGINTERN int AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED));
  return pyobj;
}


SWIGINTERN int AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED));
  return pyobj;
}


SWIGINTERN int AccountType_JOINT_BACKOFFICE_ACCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AccountType_JOINT_BACKOFFICE_ACCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *AccountType_JOINT_BACKOFFICE_ACCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AccountType_JOINT_BACKOFFICE_ACCOUNT));
  return pyobj;
}


SWIGINTERN int CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT));
  return pyobj;
}


SWIGINTERN int CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT));
  return pyobj;
}


SWIGINTERN int CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER));
  return pyobj;
}


SWIGINTERN int CustOrderCapacity_ALL_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CustOrderCapacity_ALL_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *CustOrderCapacity_ALL_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CustOrderCapacity_ALL_OTHER));
  return pyobj;
}


SWIGINTERN int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY));
  return pyobj;
}


SWIGINTERN int MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY));
  return pyobj;
}


SWIGINTERN int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT));
  return pyobj;
}


SWIGINTERN int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE));
  return pyobj;
}


SWIGINTERN int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE));
  return pyobj;
}


SWIGINTERN int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION));
  return pyobj;
}


SWIGINTERN int MassStatusReqType_STATUS_FOR_ALL_ORDERS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassStatusReqType_STATUS_FOR_ALL_ORDERS is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassStatusReqType_STATUS_FOR_ALL_ORDERS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MassStatusReqType_STATUS_FOR_ALL_ORDERS));
  return pyobj;
}


SWIGINTERN int MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID is read-only.");
  return 1;
}


SWIGINTERN PyObject *MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID));
  return pyobj;
}


SWIGINTERN int DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR));
  return pyobj;
}


SWIGINTERN int DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING is read-only.");
  return 1;
}


SWIGINTERN PyObject *DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING));
  return pyobj;
}


SWIGINTERN int DayBookingInst_ACCUMULATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DayBookingInst_ACCUMULATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DayBookingInst_ACCUMULATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DayBookingInst_ACCUMULATE));
  return pyobj;
}


SWIGINTERN int BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT));
  return pyobj;
}


SWIGINTERN int BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER));
  return pyobj;
}


SWIGINTERN int BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE));
  return pyobj;
}


SWIGINTERN int PreallocMethod_PRO_RATA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PreallocMethod_PRO_RATA is read-only.");
  return 1;
}


SWIGINTERN PyObject *PreallocMethod_PRO_RATA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PreallocMethod_PRO_RATA));
  return pyobj;
}


SWIGINTERN int PreallocMethod_DO_NOT_PRO_RATA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PreallocMethod_DO_NOT_PRO_RATA is read-only.");
  return 1;
}


SWIGINTERN PyObject *PreallocMethod_DO_NOT_PRO_RATA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::PreallocMethod_DO_NOT_PRO_RATA));
  return pyobj;
}


SWIGINTERN int AllocType_CALCULATED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocType_CALCULATED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocType_CALCULATED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocType_CALCULATED));
  return pyobj;
}


SWIGINTERN int AllocType_PRELIMINARY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocType_PRELIMINARY is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocType_PRELIMINARY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocType_PRELIMINARY));
  return pyobj;
}


SWIGINTERN int AllocType_READY_TO_BOOK_SINGLE_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocType_READY_TO_BOOK_SINGLE_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocType_READY_TO_BOOK_SINGLE_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocType_READY_TO_BOOK_SINGLE_ORDER));
  return pyobj;
}


SWIGINTERN int AllocType_WAREHOUSE_INSTRUCTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocType_WAREHOUSE_INSTRUCTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocType_WAREHOUSE_INSTRUCTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocType_WAREHOUSE_INSTRUCTION));
  return pyobj;
}


SWIGINTERN int AllocType_REQUEST_TO_INTERMEDIARY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocType_REQUEST_TO_INTERMEDIARY is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocType_REQUEST_TO_INTERMEDIARY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocType_REQUEST_TO_INTERMEDIARY));
  return pyobj;
}


SWIGINTERN int ClearingFeeIndicator_CBOE_MEMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingFeeIndicator_CBOE_MEMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingFeeIndicator_CBOE_MEMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ClearingFeeIndicator_CBOE_MEMBER);
  return pyobj;
}


SWIGINTERN int ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER);
  return pyobj;
}


SWIGINTERN int ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER);
  return pyobj;
}


SWIGINTERN int ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS);
  return pyobj;
}


SWIGINTERN int ClearingFeeIndicator_FIRMS_106H_AND_106J_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingFeeIndicator_FIRMS_106H_AND_106J is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingFeeIndicator_FIRMS_106H_AND_106J_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ClearingFeeIndicator_FIRMS_106H_AND_106J);
  return pyobj;
}


SWIGINTERN int ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS);
  return pyobj;
}


SWIGINTERN int ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES);
  return pyobj;
}


SWIGINTERN int ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES is read-only.");
  return 1;
}


SWIGINTERN PyObject *ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES);
  return pyobj;
}


SWIGINTERN int PriorityIndicator_PRIORITY_UNCHANGED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PriorityIndicator_PRIORITY_UNCHANGED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PriorityIndicator_PRIORITY_UNCHANGED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PriorityIndicator_PRIORITY_UNCHANGED));
  return pyobj;
}


SWIGINTERN int PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE));
  return pyobj;
}


SWIGINTERN int QuoteRequestRejectReason_UNKNOWN_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRequestRejectReason_UNKNOWN_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRequestRejectReason_UNKNOWN_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRequestRejectReason_UNKNOWN_SYMBOL));
  return pyobj;
}


SWIGINTERN int QuoteRequestRejectReason_EXCHANGE_CLOSED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRequestRejectReason_EXCHANGE_CLOSED is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRequestRejectReason_EXCHANGE_CLOSED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRequestRejectReason_EXCHANGE_CLOSED));
  return pyobj;
}


SWIGINTERN int QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT));
  return pyobj;
}


SWIGINTERN int QuoteRequestRejectReason_TOO_LATE_TO_ENTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRequestRejectReason_TOO_LATE_TO_ENTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRequestRejectReason_TOO_LATE_TO_ENTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRequestRejectReason_TOO_LATE_TO_ENTER));
  return pyobj;
}


SWIGINTERN int QuoteRequestRejectReason_INVALID_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRequestRejectReason_INVALID_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRequestRejectReason_INVALID_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRequestRejectReason_INVALID_PRICE));
  return pyobj;
}


SWIGINTERN int QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE));
  return pyobj;
}


SWIGINTERN int QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY));
  return pyobj;
}


SWIGINTERN int QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT));
  return pyobj;
}


SWIGINTERN int QuoteRequestRejectReason_NO_INVENTORY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRequestRejectReason_NO_INVENTORY is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRequestRejectReason_NO_INVENTORY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRequestRejectReason_NO_INVENTORY));
  return pyobj;
}


SWIGINTERN int AcctIDSource_BIC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AcctIDSource_BIC is read-only.");
  return 1;
}


SWIGINTERN PyObject *AcctIDSource_BIC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AcctIDSource_BIC));
  return pyobj;
}


SWIGINTERN int AcctIDSource_SID_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AcctIDSource_SID_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *AcctIDSource_SID_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AcctIDSource_SID_CODE));
  return pyobj;
}


SWIGINTERN int AcctIDSource_TFM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AcctIDSource_TFM is read-only.");
  return 1;
}


SWIGINTERN PyObject *AcctIDSource_TFM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AcctIDSource_TFM));
  return pyobj;
}


SWIGINTERN int AcctIDSource_OMGEO_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AcctIDSource_OMGEO is read-only.");
  return 1;
}


SWIGINTERN PyObject *AcctIDSource_OMGEO_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AcctIDSource_OMGEO));
  return pyobj;
}


SWIGINTERN int AcctIDSource_DTCC_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AcctIDSource_DTCC_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *AcctIDSource_DTCC_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AcctIDSource_DTCC_CODE));
  return pyobj;
}


SWIGINTERN int ConfirmStatus_RECEIVED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmStatus_RECEIVED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmStatus_RECEIVED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmStatus_RECEIVED));
  return pyobj;
}


SWIGINTERN int ConfirmStatus_MISMATCHED_ACCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmStatus_MISMATCHED_ACCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmStatus_MISMATCHED_ACCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmStatus_MISMATCHED_ACCOUNT));
  return pyobj;
}


SWIGINTERN int ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS));
  return pyobj;
}


SWIGINTERN int ConfirmStatus_CONFIRMED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmStatus_CONFIRMED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmStatus_CONFIRMED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmStatus_CONFIRMED));
  return pyobj;
}


SWIGINTERN int ConfirmStatus_REQUEST_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmStatus_REQUEST_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmStatus_REQUEST_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmStatus_REQUEST_REJECTED));
  return pyobj;
}


SWIGINTERN int ConfirmTransType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmTransType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmTransType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmTransType_NEW));
  return pyobj;
}


SWIGINTERN int ConfirmTransType_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmTransType_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmTransType_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmTransType_REPLACE));
  return pyobj;
}


SWIGINTERN int ConfirmTransType_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmTransType_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmTransType_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmTransType_CANCEL));
  return pyobj;
}


SWIGINTERN int DeliveryForm_BOOKENTRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DeliveryForm_BOOKENTRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *DeliveryForm_BOOKENTRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DeliveryForm_BOOKENTRY));
  return pyobj;
}


SWIGINTERN int DeliveryForm_BEARER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DeliveryForm_BEARER is read-only.");
  return 1;
}


SWIGINTERN PyObject *DeliveryForm_BEARER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DeliveryForm_BEARER));
  return pyobj;
}


SWIGINTERN int LegSwapType_PAR_FOR_PAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LegSwapType_PAR_FOR_PAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *LegSwapType_PAR_FOR_PAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::LegSwapType_PAR_FOR_PAR));
  return pyobj;
}


SWIGINTERN int LegSwapType_MODIFIED_DURATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LegSwapType_MODIFIED_DURATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *LegSwapType_MODIFIED_DURATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::LegSwapType_MODIFIED_DURATION));
  return pyobj;
}


SWIGINTERN int LegSwapType_RISK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LegSwapType_RISK is read-only.");
  return 1;
}


SWIGINTERN PyObject *LegSwapType_RISK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::LegSwapType_RISK));
  return pyobj;
}


SWIGINTERN int LegSwapType_PROCEEDS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LegSwapType_PROCEEDS is read-only.");
  return 1;
}


SWIGINTERN PyObject *LegSwapType_PROCEEDS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::LegSwapType_PROCEEDS));
  return pyobj;
}


SWIGINTERN int QuotePriceType_PERCENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuotePriceType_PERCENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuotePriceType_PERCENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuotePriceType_PERCENT));
  return pyobj;
}


SWIGINTERN int QuotePriceType_PER_SHARE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuotePriceType_PER_SHARE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuotePriceType_PER_SHARE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuotePriceType_PER_SHARE));
  return pyobj;
}


SWIGINTERN int QuotePriceType_FIXED_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuotePriceType_FIXED_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuotePriceType_FIXED_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuotePriceType_FIXED_AMOUNT));
  return pyobj;
}


SWIGINTERN int QuotePriceType_DISCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuotePriceType_DISCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuotePriceType_DISCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuotePriceType_DISCOUNT));
  return pyobj;
}


SWIGINTERN int QuotePriceType_PREMIUM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuotePriceType_PREMIUM is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuotePriceType_PREMIUM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuotePriceType_PREMIUM));
  return pyobj;
}


SWIGINTERN int QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK));
  return pyobj;
}


SWIGINTERN int QuotePriceType_TED_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuotePriceType_TED_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuotePriceType_TED_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuotePriceType_TED_PRICE));
  return pyobj;
}


SWIGINTERN int QuotePriceType_TED_YIELD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuotePriceType_TED_YIELD is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuotePriceType_TED_YIELD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuotePriceType_TED_YIELD));
  return pyobj;
}


SWIGINTERN int QuotePriceType_YIELD_SPREAD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuotePriceType_YIELD_SPREAD is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuotePriceType_YIELD_SPREAD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuotePriceType_YIELD_SPREAD));
  return pyobj;
}


SWIGINTERN int QuoteRespType_HIT_LIFT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRespType_HIT_LIFT is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRespType_HIT_LIFT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRespType_HIT_LIFT));
  return pyobj;
}


SWIGINTERN int QuoteRespType_COUNTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRespType_COUNTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRespType_COUNTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRespType_COUNTER));
  return pyobj;
}


SWIGINTERN int QuoteRespType_EXPIRED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRespType_EXPIRED is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRespType_EXPIRED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRespType_EXPIRED));
  return pyobj;
}


SWIGINTERN int QuoteRespType_COVER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRespType_COVER is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRespType_COVER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRespType_COVER));
  return pyobj;
}


SWIGINTERN int QuoteRespType_DONE_AWAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRespType_DONE_AWAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRespType_DONE_AWAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRespType_DONE_AWAY));
  return pyobj;
}


SWIGINTERN int QuoteRespType_PASS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QuoteRespType_PASS is read-only.");
  return 1;
}


SWIGINTERN PyObject *QuoteRespType_PASS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QuoteRespType_PASS));
  return pyobj;
}


SWIGINTERN int PosType_TRANSACTION_QUANTITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_TRANSACTION_QUANTITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_TRANSACTION_QUANTITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_TRANSACTION_QUANTITY);
  return pyobj;
}


SWIGINTERN int PosType_INTRA_SPREAD_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_INTRA_SPREAD_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_INTRA_SPREAD_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_INTRA_SPREAD_QTY);
  return pyobj;
}


SWIGINTERN int PosType_INTER_SPREAD_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_INTER_SPREAD_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_INTER_SPREAD_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_INTER_SPREAD_QTY);
  return pyobj;
}


SWIGINTERN int PosType_END_OF_DAY_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_END_OF_DAY_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_END_OF_DAY_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_END_OF_DAY_QTY);
  return pyobj;
}


SWIGINTERN int PosType_START_OF_DAY_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_START_OF_DAY_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_START_OF_DAY_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_START_OF_DAY_QTY);
  return pyobj;
}


SWIGINTERN int PosType_OPTION_EXERCISE_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_OPTION_EXERCISE_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_OPTION_EXERCISE_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_OPTION_EXERCISE_QTY);
  return pyobj;
}


SWIGINTERN int PosType_OPTION_ASSIGNMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_OPTION_ASSIGNMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_OPTION_ASSIGNMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_OPTION_ASSIGNMENT);
  return pyobj;
}


SWIGINTERN int PosType_TRANSACTION_FROM_EXERCISE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_TRANSACTION_FROM_EXERCISE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_TRANSACTION_FROM_EXERCISE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_TRANSACTION_FROM_EXERCISE);
  return pyobj;
}


SWIGINTERN int PosType_TRANSACTION_FROM_ASSIGNMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_TRANSACTION_FROM_ASSIGNMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_TRANSACTION_FROM_ASSIGNMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_TRANSACTION_FROM_ASSIGNMENT);
  return pyobj;
}


SWIGINTERN int PosType_PIT_TRADE_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_PIT_TRADE_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_PIT_TRADE_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_PIT_TRADE_QTY);
  return pyobj;
}


SWIGINTERN int PosType_TRANSFER_TRADE_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_TRANSFER_TRADE_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_TRANSFER_TRADE_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_TRANSFER_TRADE_QTY);
  return pyobj;
}


SWIGINTERN int PosType_ELECTRONIC_TRADE_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_ELECTRONIC_TRADE_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_ELECTRONIC_TRADE_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_ELECTRONIC_TRADE_QTY);
  return pyobj;
}


SWIGINTERN int PosType_ALLOCATION_TRADE_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_ALLOCATION_TRADE_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_ALLOCATION_TRADE_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_ALLOCATION_TRADE_QTY);
  return pyobj;
}


SWIGINTERN int PosType_ADJUSTMENT_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_ADJUSTMENT_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_ADJUSTMENT_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_ADJUSTMENT_QTY);
  return pyobj;
}


SWIGINTERN int PosType_AS_OF_TRADE_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_AS_OF_TRADE_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_AS_OF_TRADE_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_AS_OF_TRADE_QTY);
  return pyobj;
}


SWIGINTERN int PosType_DELIVERY_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_DELIVERY_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_DELIVERY_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_DELIVERY_QTY);
  return pyobj;
}


SWIGINTERN int PosType_TOTAL_TRANSACTION_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_TOTAL_TRANSACTION_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_TOTAL_TRANSACTION_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_TOTAL_TRANSACTION_QTY);
  return pyobj;
}


SWIGINTERN int PosType_CROSS_MARGIN_QTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_CROSS_MARGIN_QTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_CROSS_MARGIN_QTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_CROSS_MARGIN_QTY);
  return pyobj;
}


SWIGINTERN int PosType_INTEGRAL_SPLIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosType_INTEGRAL_SPLIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosType_INTEGRAL_SPLIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosType_INTEGRAL_SPLIT);
  return pyobj;
}


SWIGINTERN int PosQtyStatus_SUBMITTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosQtyStatus_SUBMITTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosQtyStatus_SUBMITTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosQtyStatus_SUBMITTED));
  return pyobj;
}


SWIGINTERN int PosQtyStatus_ACCEPTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosQtyStatus_ACCEPTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosQtyStatus_ACCEPTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosQtyStatus_ACCEPTED));
  return pyobj;
}


SWIGINTERN int PosQtyStatus_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosQtyStatus_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosQtyStatus_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosQtyStatus_REJECTED));
  return pyobj;
}


SWIGINTERN int PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT);
  return pyobj;
}


SWIGINTERN int PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT);
  return pyobj;
}


SWIGINTERN int PosAmtType_TRADE_VARIATION_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosAmtType_TRADE_VARIATION_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosAmtType_TRADE_VARIATION_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosAmtType_TRADE_VARIATION_AMOUNT);
  return pyobj;
}


SWIGINTERN int PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT);
  return pyobj;
}


SWIGINTERN int PosAmtType_PREMIUM_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosAmtType_PREMIUM_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosAmtType_PREMIUM_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosAmtType_PREMIUM_AMOUNT);
  return pyobj;
}


SWIGINTERN int PosAmtType_CASH_RESIDUAL_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosAmtType_CASH_RESIDUAL_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosAmtType_CASH_RESIDUAL_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosAmtType_CASH_RESIDUAL_AMOUNT);
  return pyobj;
}


SWIGINTERN int PosAmtType_CASH_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosAmtType_CASH_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosAmtType_CASH_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosAmtType_CASH_AMOUNT);
  return pyobj;
}


SWIGINTERN int PosAmtType_VALUE_ADJUSTED_AMOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosAmtType_VALUE_ADJUSTED_AMOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosAmtType_VALUE_ADJUSTED_AMOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PosAmtType_VALUE_ADJUSTED_AMOUNT);
  return pyobj;
}


SWIGINTERN int PosTransType_EXERCISE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosTransType_EXERCISE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosTransType_EXERCISE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosTransType_EXERCISE));
  return pyobj;
}


SWIGINTERN int PosTransType_DO_NOT_EXERCISE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosTransType_DO_NOT_EXERCISE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosTransType_DO_NOT_EXERCISE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosTransType_DO_NOT_EXERCISE));
  return pyobj;
}


SWIGINTERN int PosTransType_POSITION_ADJUSTMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosTransType_POSITION_ADJUSTMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosTransType_POSITION_ADJUSTMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosTransType_POSITION_ADJUSTMENT));
  return pyobj;
}


SWIGINTERN int PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION));
  return pyobj;
}


SWIGINTERN int PosTransType_PLEDGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosTransType_PLEDGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosTransType_PLEDGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosTransType_PLEDGE));
  return pyobj;
}


SWIGINTERN int PosMaintAction_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosMaintAction_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosMaintAction_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosMaintAction_NEW));
  return pyobj;
}


SWIGINTERN int PosMaintAction_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosMaintAction_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosMaintAction_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosMaintAction_REPLACE));
  return pyobj;
}


SWIGINTERN int PosMaintAction_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosMaintAction_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosMaintAction_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosMaintAction_CANCEL));
  return pyobj;
}


SWIGINTERN int AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION is read-only.");
  return 1;
}


SWIGINTERN PyObject *AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION));
  return pyobj;
}


SWIGINTERN int AdjustmentType_DELTA_PLUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AdjustmentType_DELTA_PLUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *AdjustmentType_DELTA_PLUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AdjustmentType_DELTA_PLUS));
  return pyobj;
}


SWIGINTERN int AdjustmentType_DELTA_MINUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AdjustmentType_DELTA_MINUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *AdjustmentType_DELTA_MINUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AdjustmentType_DELTA_MINUS));
  return pyobj;
}


SWIGINTERN int AdjustmentType_FINAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AdjustmentType_FINAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *AdjustmentType_FINAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AdjustmentType_FINAL));
  return pyobj;
}


SWIGINTERN int PosMaintStatus_ACCEPTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosMaintStatus_ACCEPTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosMaintStatus_ACCEPTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosMaintStatus_ACCEPTED));
  return pyobj;
}


SWIGINTERN int PosMaintStatus_ACCEPTED_WITH_WARNINGS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosMaintStatus_ACCEPTED_WITH_WARNINGS is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosMaintStatus_ACCEPTED_WITH_WARNINGS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosMaintStatus_ACCEPTED_WITH_WARNINGS));
  return pyobj;
}


SWIGINTERN int PosMaintStatus_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosMaintStatus_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosMaintStatus_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosMaintStatus_REJECTED));
  return pyobj;
}


SWIGINTERN int PosMaintStatus_COMPLETED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosMaintStatus_COMPLETED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosMaintStatus_COMPLETED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosMaintStatus_COMPLETED));
  return pyobj;
}


SWIGINTERN int PosMaintStatus_COMPLETED_WITH_WARNINGS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosMaintStatus_COMPLETED_WITH_WARNINGS is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosMaintStatus_COMPLETED_WITH_WARNINGS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosMaintStatus_COMPLETED_WITH_WARNINGS));
  return pyobj;
}


SWIGINTERN int PosMaintResult_SUCCESSFUL_COMPLETION_NO_WARNINGS_OR_ERRORS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosMaintResult_SUCCESSFUL_COMPLETION_NO_WARNINGS_OR_ERRORS is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosMaintResult_SUCCESSFUL_COMPLETION_NO_WARNINGS_OR_ERRORS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosMaintResult_SUCCESSFUL_COMPLETION_NO_WARNINGS_OR_ERRORS));
  return pyobj;
}


SWIGINTERN int PosMaintResult_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosMaintResult_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosMaintResult_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosMaintResult_REJECTED));
  return pyobj;
}


SWIGINTERN int PosReqType_POSITIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqType_POSITIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqType_POSITIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqType_POSITIONS));
  return pyobj;
}


SWIGINTERN int PosReqType_TRADES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqType_TRADES is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqType_TRADES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqType_TRADES));
  return pyobj;
}


SWIGINTERN int PosReqType_EXERCISES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqType_EXERCISES is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqType_EXERCISES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqType_EXERCISES));
  return pyobj;
}


SWIGINTERN int PosReqType_ASSIGNMENTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqType_ASSIGNMENTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqType_ASSIGNMENTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqType_ASSIGNMENTS));
  return pyobj;
}


SWIGINTERN int ResponseTransportType_INBAND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ResponseTransportType_INBAND is read-only.");
  return 1;
}


SWIGINTERN PyObject *ResponseTransportType_INBAND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ResponseTransportType_INBAND));
  return pyobj;
}


SWIGINTERN int ResponseTransportType_OUT_OF_BAND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ResponseTransportType_OUT_OF_BAND is read-only.");
  return 1;
}


SWIGINTERN PyObject *ResponseTransportType_OUT_OF_BAND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ResponseTransportType_OUT_OF_BAND));
  return pyobj;
}


SWIGINTERN int PosReqResult_VALID_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqResult_VALID_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqResult_VALID_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqResult_VALID_REQUEST));
  return pyobj;
}


SWIGINTERN int PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST));
  return pyobj;
}


SWIGINTERN int PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA));
  return pyobj;
}


SWIGINTERN int PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS));
  return pyobj;
}


SWIGINTERN int PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED));
  return pyobj;
}


SWIGINTERN int PosReqResult_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqResult_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqResult_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqResult_OTHER));
  return pyobj;
}


SWIGINTERN int PosReqStatus_COMPLETED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqStatus_COMPLETED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqStatus_COMPLETED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqStatus_COMPLETED));
  return pyobj;
}


SWIGINTERN int PosReqStatus_COMPLETED_WITH_WARNINGS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqStatus_COMPLETED_WITH_WARNINGS is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqStatus_COMPLETED_WITH_WARNINGS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqStatus_COMPLETED_WITH_WARNINGS));
  return pyobj;
}


SWIGINTERN int PosReqStatus_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PosReqStatus_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PosReqStatus_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PosReqStatus_REJECTED));
  return pyobj;
}


SWIGINTERN int SettlPriceType_FINAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlPriceType_FINAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlPriceType_FINAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SettlPriceType_FINAL));
  return pyobj;
}


SWIGINTERN int SettlPriceType_THEORETICAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlPriceType_THEORETICAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlPriceType_THEORETICAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SettlPriceType_THEORETICAL));
  return pyobj;
}


SWIGINTERN int AssignmentMethod_RANDOM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AssignmentMethod_RANDOM is read-only.");
  return 1;
}


SWIGINTERN PyObject *AssignmentMethod_RANDOM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::AssignmentMethod_RANDOM));
  return pyobj;
}


SWIGINTERN int AssignmentMethod_PRORATA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AssignmentMethod_PRORATA is read-only.");
  return 1;
}


SWIGINTERN PyObject *AssignmentMethod_PRORATA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::AssignmentMethod_PRORATA));
  return pyobj;
}


SWIGINTERN int ExerciseMethod_AUTOMATIC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExerciseMethod_AUTOMATIC is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExerciseMethod_AUTOMATIC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExerciseMethod_AUTOMATIC));
  return pyobj;
}


SWIGINTERN int ExerciseMethod_MANUAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExerciseMethod_MANUAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExerciseMethod_MANUAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExerciseMethod_MANUAL));
  return pyobj;
}


SWIGINTERN int TradeRequestResult_SUCCESSFUL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestResult_SUCCESSFUL is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestResult_SUCCESSFUL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestResult_SUCCESSFUL));
  return pyobj;
}


SWIGINTERN int TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT));
  return pyobj;
}


SWIGINTERN int TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED));
  return pyobj;
}


SWIGINTERN int TradeRequestResult_INVALID_PARTIES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestResult_INVALID_PARTIES is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestResult_INVALID_PARTIES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestResult_INVALID_PARTIES));
  return pyobj;
}


SWIGINTERN int TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED));
  return pyobj;
}


SWIGINTERN int TradeRequestResult_INVALID_DESTINATION_REQUESTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestResult_INVALID_DESTINATION_REQUESTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestResult_INVALID_DESTINATION_REQUESTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestResult_INVALID_DESTINATION_REQUESTED));
  return pyobj;
}


SWIGINTERN int TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED));
  return pyobj;
}


SWIGINTERN int TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST));
  return pyobj;
}


SWIGINTERN int TradeRequestStatus_ACCEPTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestStatus_ACCEPTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestStatus_ACCEPTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestStatus_ACCEPTED));
  return pyobj;
}


SWIGINTERN int TradeRequestStatus_COMPLETED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestStatus_COMPLETED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestStatus_COMPLETED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestStatus_COMPLETED));
  return pyobj;
}


SWIGINTERN int TradeRequestStatus_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeRequestStatus_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeRequestStatus_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeRequestStatus_REJECTED));
  return pyobj;
}


SWIGINTERN int TradeReportRejectReason_SUCCESSFUL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportRejectReason_SUCCESSFUL is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportRejectReason_SUCCESSFUL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportRejectReason_SUCCESSFUL));
  return pyobj;
}


SWIGINTERN int TradeReportRejectReason_INVALID_PARTY_INFORMATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportRejectReason_INVALID_PARTY_INFORMATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportRejectReason_INVALID_PARTY_INFORMATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportRejectReason_INVALID_PARTY_INFORMATION));
  return pyobj;
}


SWIGINTERN int TradeReportRejectReason_UNKNOWN_INSTRUMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportRejectReason_UNKNOWN_INSTRUMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportRejectReason_UNKNOWN_INSTRUMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportRejectReason_UNKNOWN_INSTRUMENT));
  return pyobj;
}


SWIGINTERN int TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES));
  return pyobj;
}


SWIGINTERN int TradeReportRejectReason_INVALID_TRADE_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportRejectReason_INVALID_TRADE_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportRejectReason_INVALID_TRADE_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportRejectReason_INVALID_TRADE_TYPE));
  return pyobj;
}


SWIGINTERN int SideMultiLegReportingType_SINGLE_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SideMultiLegReportingType_SINGLE_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SideMultiLegReportingType_SINGLE_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SideMultiLegReportingType_SINGLE_SECURITY));
  return pyobj;
}


SWIGINTERN int SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY));
  return pyobj;
}


SWIGINTERN int SideMultiLegReportingType_MULTI_LEG_SECURITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SideMultiLegReportingType_MULTI_LEG_SECURITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SideMultiLegReportingType_MULTI_LEG_SECURITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SideMultiLegReportingType_MULTI_LEG_SECURITY));
  return pyobj;
}


SWIGINTERN int TrdRegTimestampType_EXECUTION_TIME_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdRegTimestampType_EXECUTION_TIME is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdRegTimestampType_EXECUTION_TIME_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdRegTimestampType_EXECUTION_TIME));
  return pyobj;
}


SWIGINTERN int TrdRegTimestampType_TIME_IN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdRegTimestampType_TIME_IN is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdRegTimestampType_TIME_IN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdRegTimestampType_TIME_IN));
  return pyobj;
}


SWIGINTERN int TrdRegTimestampType_TIME_OUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdRegTimestampType_TIME_OUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdRegTimestampType_TIME_OUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdRegTimestampType_TIME_OUT));
  return pyobj;
}


SWIGINTERN int TrdRegTimestampType_BROKER_RECEIPT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdRegTimestampType_BROKER_RECEIPT is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdRegTimestampType_BROKER_RECEIPT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdRegTimestampType_BROKER_RECEIPT));
  return pyobj;
}


SWIGINTERN int TrdRegTimestampType_BROKER_EXECUTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdRegTimestampType_BROKER_EXECUTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdRegTimestampType_BROKER_EXECUTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdRegTimestampType_BROKER_EXECUTION));
  return pyobj;
}


SWIGINTERN int ConfirmType_STATUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmType_STATUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmType_STATUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmType_STATUS));
  return pyobj;
}


SWIGINTERN int ConfirmType_CONFIRMATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmType_CONFIRMATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmType_CONFIRMATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmType_CONFIRMATION));
  return pyobj;
}


SWIGINTERN int ConfirmType_CONFIRMATION_REQUEST_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmType_CONFIRMATION_REQUEST_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmType_CONFIRMATION_REQUEST_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmType_CONFIRMATION_REQUEST_REJECTED));
  return pyobj;
}


SWIGINTERN int ConfirmRejReason_MISMATCHED_ACCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmRejReason_MISMATCHED_ACCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmRejReason_MISMATCHED_ACCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmRejReason_MISMATCHED_ACCOUNT));
  return pyobj;
}


SWIGINTERN int ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS));
  return pyobj;
}


SWIGINTERN int BookingType_REGULAR_BOOKING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BookingType_REGULAR_BOOKING is read-only.");
  return 1;
}


SWIGINTERN PyObject *BookingType_REGULAR_BOOKING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BookingType_REGULAR_BOOKING));
  return pyobj;
}


SWIGINTERN int BookingType_CFD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BookingType_CFD is read-only.");
  return 1;
}


SWIGINTERN PyObject *BookingType_CFD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BookingType_CFD));
  return pyobj;
}


SWIGINTERN int BookingType_TOTAL_RETURN_SWAP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BookingType_TOTAL_RETURN_SWAP is read-only.");
  return 1;
}


SWIGINTERN PyObject *BookingType_TOTAL_RETURN_SWAP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::BookingType_TOTAL_RETURN_SWAP));
  return pyobj;
}


SWIGINTERN int AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS));
  return pyobj;
}


SWIGINTERN int AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED));
  return pyobj;
}


SWIGINTERN int AllocSettlInstType_FULL_DETAILS_PROVIDED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocSettlInstType_FULL_DETAILS_PROVIDED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocSettlInstType_FULL_DETAILS_PROVIDED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocSettlInstType_FULL_DETAILS_PROVIDED));
  return pyobj;
}


SWIGINTERN int AllocSettlInstType_SSI_DB_IDS_PROVIDED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocSettlInstType_SSI_DB_IDS_PROVIDED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocSettlInstType_SSI_DB_IDS_PROVIDED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocSettlInstType_SSI_DB_IDS_PROVIDED));
  return pyobj;
}


SWIGINTERN int AllocSettlInstType_PHONE_FOR_INSTRUCTIONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocSettlInstType_PHONE_FOR_INSTRUCTIONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocSettlInstType_PHONE_FOR_INSTRUCTIONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocSettlInstType_PHONE_FOR_INSTRUCTIONS));
  return pyobj;
}


SWIGINTERN int DlvyInstType_SECURITIES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DlvyInstType_SECURITIES is read-only.");
  return 1;
}


SWIGINTERN PyObject *DlvyInstType_SECURITIES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DlvyInstType_SECURITIES));
  return pyobj;
}


SWIGINTERN int DlvyInstType_CASH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DlvyInstType_CASH is read-only.");
  return 1;
}


SWIGINTERN PyObject *DlvyInstType_CASH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::DlvyInstType_CASH));
  return pyobj;
}


SWIGINTERN int TerminationType_OVERNIGHT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TerminationType_OVERNIGHT is read-only.");
  return 1;
}


SWIGINTERN PyObject *TerminationType_OVERNIGHT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TerminationType_OVERNIGHT));
  return pyobj;
}


SWIGINTERN int TerminationType_TERM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TerminationType_TERM is read-only.");
  return 1;
}


SWIGINTERN PyObject *TerminationType_TERM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TerminationType_TERM));
  return pyobj;
}


SWIGINTERN int TerminationType_FLEXIBLE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TerminationType_FLEXIBLE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TerminationType_FLEXIBLE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TerminationType_FLEXIBLE));
  return pyobj;
}


SWIGINTERN int TerminationType_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TerminationType_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *TerminationType_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TerminationType_OPEN));
  return pyobj;
}


SWIGINTERN int SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST));
  return pyobj;
}


SWIGINTERN int SettlInstReqRejCode_UNKNOWN_ACCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstReqRejCode_UNKNOWN_ACCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstReqRejCode_UNKNOWN_ACCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SettlInstReqRejCode_UNKNOWN_ACCOUNT));
  return pyobj;
}


SWIGINTERN int SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND));
  return pyobj;
}


SWIGINTERN int AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY));
  return pyobj;
}


SWIGINTERN int AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY));
  return pyobj;
}


SWIGINTERN int AllocReportType_WAREHOUSE_RECAP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocReportType_WAREHOUSE_RECAP is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocReportType_WAREHOUSE_RECAP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocReportType_WAREHOUSE_RECAP));
  return pyobj;
}


SWIGINTERN int AllocReportType_REQUEST_TO_INTERMEDIARY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocReportType_REQUEST_TO_INTERMEDIARY is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocReportType_REQUEST_TO_INTERMEDIARY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocReportType_REQUEST_TO_INTERMEDIARY));
  return pyobj;
}


SWIGINTERN int AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT));
  return pyobj;
}


SWIGINTERN int AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS));
  return pyobj;
}


SWIGINTERN int AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS));
  return pyobj;
}


SWIGINTERN int AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS));
  return pyobj;
}


SWIGINTERN int AllocAccountType_HOUSE_TRADER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocAccountType_HOUSE_TRADER is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocAccountType_HOUSE_TRADER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocAccountType_HOUSE_TRADER));
  return pyobj;
}


SWIGINTERN int AllocAccountType_FLOOR_TRADER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocAccountType_FLOOR_TRADER is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocAccountType_FLOOR_TRADER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocAccountType_FLOOR_TRADER));
  return pyobj;
}


SWIGINTERN int AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED));
  return pyobj;
}


SWIGINTERN int AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED));
  return pyobj;
}


SWIGINTERN int AllocAccountType_JOINT_BACKOFFICE_ACCOUNT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocAccountType_JOINT_BACKOFFICE_ACCOUNT is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocAccountType_JOINT_BACKOFFICE_ACCOUNT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocAccountType_JOINT_BACKOFFICE_ACCOUNT));
  return pyobj;
}


SWIGINTERN int AllocIntermedReqType_PENDING_ACCEPT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocIntermedReqType_PENDING_ACCEPT is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocIntermedReqType_PENDING_ACCEPT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocIntermedReqType_PENDING_ACCEPT));
  return pyobj;
}


SWIGINTERN int AllocIntermedReqType_PENDING_RELEASE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocIntermedReqType_PENDING_RELEASE is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocIntermedReqType_PENDING_RELEASE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocIntermedReqType_PENDING_RELEASE));
  return pyobj;
}


SWIGINTERN int AllocIntermedReqType_PENDING_REVERSAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocIntermedReqType_PENDING_REVERSAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocIntermedReqType_PENDING_REVERSAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocIntermedReqType_PENDING_REVERSAL));
  return pyobj;
}


SWIGINTERN int AllocIntermedReqType_ACCEPT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocIntermedReqType_ACCEPT is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocIntermedReqType_ACCEPT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocIntermedReqType_ACCEPT));
  return pyobj;
}


SWIGINTERN int AllocIntermedReqType_BLOCK_LEVEL_REJECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocIntermedReqType_BLOCK_LEVEL_REJECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocIntermedReqType_BLOCK_LEVEL_REJECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocIntermedReqType_BLOCK_LEVEL_REJECT));
  return pyobj;
}


SWIGINTERN int AllocIntermedReqType_ACCOUNT_LEVEL_REJECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocIntermedReqType_ACCOUNT_LEVEL_REJECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocIntermedReqType_ACCOUNT_LEVEL_REJECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocIntermedReqType_ACCOUNT_LEVEL_REJECT));
  return pyobj;
}


SWIGINTERN int ApplQueueResolution_NO_ACTION_TAKEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ApplQueueResolution_NO_ACTION_TAKEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *ApplQueueResolution_NO_ACTION_TAKEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ApplQueueResolution_NO_ACTION_TAKEN));
  return pyobj;
}


SWIGINTERN int ApplQueueResolution_QUEUE_FLUSHED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ApplQueueResolution_QUEUE_FLUSHED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ApplQueueResolution_QUEUE_FLUSHED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ApplQueueResolution_QUEUE_FLUSHED));
  return pyobj;
}


SWIGINTERN int ApplQueueResolution_OVERLAY_LAST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ApplQueueResolution_OVERLAY_LAST is read-only.");
  return 1;
}


SWIGINTERN PyObject *ApplQueueResolution_OVERLAY_LAST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ApplQueueResolution_OVERLAY_LAST));
  return pyobj;
}


SWIGINTERN int ApplQueueResolution_END_SESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ApplQueueResolution_END_SESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *ApplQueueResolution_END_SESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ApplQueueResolution_END_SESSION));
  return pyobj;
}


SWIGINTERN int ApplQueueAction_NO_ACTION_TAKEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ApplQueueAction_NO_ACTION_TAKEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *ApplQueueAction_NO_ACTION_TAKEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ApplQueueAction_NO_ACTION_TAKEN));
  return pyobj;
}


SWIGINTERN int ApplQueueAction_QUEUE_FLUSHED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ApplQueueAction_QUEUE_FLUSHED is read-only.");
  return 1;
}


SWIGINTERN PyObject *ApplQueueAction_QUEUE_FLUSHED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ApplQueueAction_QUEUE_FLUSHED));
  return pyobj;
}


SWIGINTERN int ApplQueueAction_OVERLAY_LAST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ApplQueueAction_OVERLAY_LAST is read-only.");
  return 1;
}


SWIGINTERN PyObject *ApplQueueAction_OVERLAY_LAST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ApplQueueAction_OVERLAY_LAST));
  return pyobj;
}


SWIGINTERN int ApplQueueAction_END_SESSION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ApplQueueAction_END_SESSION is read-only.");
  return 1;
}


SWIGINTERN PyObject *ApplQueueAction_END_SESSION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ApplQueueAction_END_SESSION));
  return pyobj;
}


SWIGINTERN int AvgPxIndicator_NO_AVERAGE_PRICING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AvgPxIndicator_NO_AVERAGE_PRICING is read-only.");
  return 1;
}


SWIGINTERN PyObject *AvgPxIndicator_NO_AVERAGE_PRICING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AvgPxIndicator_NO_AVERAGE_PRICING));
  return pyobj;
}


SWIGINTERN int AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID is read-only.");
  return 1;
}


SWIGINTERN PyObject *AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID));
  return pyobj;
}


SWIGINTERN int AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID is read-only.");
  return 1;
}


SWIGINTERN PyObject *AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID));
  return pyobj;
}


SWIGINTERN int TradeAllocIndicator_ALLOCATION_NOT_REQUIRED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeAllocIndicator_ALLOCATION_NOT_REQUIRED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeAllocIndicator_ALLOCATION_NOT_REQUIRED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeAllocIndicator_ALLOCATION_NOT_REQUIRED));
  return pyobj;
}


SWIGINTERN int TradeAllocIndicator_ALLOCATION_REQUIRED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeAllocIndicator_ALLOCATION_REQUIRED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeAllocIndicator_ALLOCATION_REQUIRED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeAllocIndicator_ALLOCATION_REQUIRED));
  return pyobj;
}


SWIGINTERN int TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE));
  return pyobj;
}


SWIGINTERN int ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE));
  return pyobj;
}


SWIGINTERN int ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN));
  return pyobj;
}


SWIGINTERN int TrdType_REGULAR_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdType_REGULAR_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdType_REGULAR_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdType_REGULAR_TRADE));
  return pyobj;
}


SWIGINTERN int TrdType_BLOCK_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdType_BLOCK_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdType_BLOCK_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdType_BLOCK_TRADE));
  return pyobj;
}


SWIGINTERN int TrdType_EFP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdType_EFP is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdType_EFP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdType_EFP));
  return pyobj;
}


SWIGINTERN int TrdType_TRANSFER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdType_TRANSFER is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdType_TRANSFER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdType_TRANSFER));
  return pyobj;
}


SWIGINTERN int TrdType_LATE_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdType_LATE_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdType_LATE_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdType_LATE_TRADE));
  return pyobj;
}


SWIGINTERN int TrdType_T_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdType_T_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdType_T_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdType_T_TRADE));
  return pyobj;
}


SWIGINTERN int TrdType_WEIGHTED_AVERAGE_PRICE_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdType_WEIGHTED_AVERAGE_PRICE_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdType_WEIGHTED_AVERAGE_PRICE_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdType_WEIGHTED_AVERAGE_PRICE_TRADE));
  return pyobj;
}


SWIGINTERN int TrdType_BUNCHED_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdType_BUNCHED_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdType_BUNCHED_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdType_BUNCHED_TRADE));
  return pyobj;
}


SWIGINTERN int TrdType_LATE_BUNCHED_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdType_LATE_BUNCHED_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdType_LATE_BUNCHED_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdType_LATE_BUNCHED_TRADE));
  return pyobj;
}


SWIGINTERN int TrdType_PRIOR_REFERENCE_PRICE_TRADE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdType_PRIOR_REFERENCE_PRICE_TRADE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdType_PRIOR_REFERENCE_PRICE_TRADE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdType_PRIOR_REFERENCE_PRICE_TRADE));
  return pyobj;
}


SWIGINTERN int PegMoveType_FLOATING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegMoveType_FLOATING is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegMoveType_FLOATING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegMoveType_FLOATING));
  return pyobj;
}


SWIGINTERN int PegMoveType_FIXED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegMoveType_FIXED is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegMoveType_FIXED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegMoveType_FIXED));
  return pyobj;
}


SWIGINTERN int PegOffsetType_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegOffsetType_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegOffsetType_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegOffsetType_PRICE));
  return pyobj;
}


SWIGINTERN int PegOffsetType_BASIS_POINTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegOffsetType_BASIS_POINTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegOffsetType_BASIS_POINTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegOffsetType_BASIS_POINTS));
  return pyobj;
}


SWIGINTERN int PegOffsetType_TICKS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegOffsetType_TICKS is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegOffsetType_TICKS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegOffsetType_TICKS));
  return pyobj;
}


SWIGINTERN int PegOffsetType_PRICE_TIER_LEVEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegOffsetType_PRICE_TIER_LEVEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegOffsetType_PRICE_TIER_LEVEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegOffsetType_PRICE_TIER_LEVEL));
  return pyobj;
}


SWIGINTERN int PegLimitType_OR_BETTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegLimitType_OR_BETTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegLimitType_OR_BETTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegLimitType_OR_BETTER));
  return pyobj;
}


SWIGINTERN int PegLimitType_STRICT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegLimitType_STRICT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegLimitType_STRICT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegLimitType_STRICT));
  return pyobj;
}


SWIGINTERN int PegLimitType_OR_WORSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegLimitType_OR_WORSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegLimitType_OR_WORSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegLimitType_OR_WORSE));
  return pyobj;
}


SWIGINTERN int PegRoundDirection_MORE_AGGRESSIVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegRoundDirection_MORE_AGGRESSIVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegRoundDirection_MORE_AGGRESSIVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegRoundDirection_MORE_AGGRESSIVE));
  return pyobj;
}


SWIGINTERN int PegRoundDirection_MORE_PASSIVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegRoundDirection_MORE_PASSIVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegRoundDirection_MORE_PASSIVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegRoundDirection_MORE_PASSIVE));
  return pyobj;
}


SWIGINTERN int PegScope_LOCAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegScope_LOCAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegScope_LOCAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegScope_LOCAL));
  return pyobj;
}


SWIGINTERN int PegScope_NATIONAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegScope_NATIONAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegScope_NATIONAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegScope_NATIONAL));
  return pyobj;
}


SWIGINTERN int PegScope_GLOBAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegScope_GLOBAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegScope_GLOBAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegScope_GLOBAL));
  return pyobj;
}


SWIGINTERN int PegScope_NATIONAL_EXCLUDING_LOCAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PegScope_NATIONAL_EXCLUDING_LOCAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *PegScope_NATIONAL_EXCLUDING_LOCAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PegScope_NATIONAL_EXCLUDING_LOCAL));
  return pyobj;
}


SWIGINTERN int DiscretionMoveType_FLOATING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionMoveType_FLOATING is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionMoveType_FLOATING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionMoveType_FLOATING));
  return pyobj;
}


SWIGINTERN int DiscretionMoveType_FIXED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionMoveType_FIXED is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionMoveType_FIXED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionMoveType_FIXED));
  return pyobj;
}


SWIGINTERN int DiscretionOffsetType_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionOffsetType_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionOffsetType_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionOffsetType_PRICE));
  return pyobj;
}


SWIGINTERN int DiscretionOffsetType_BASIS_POINTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionOffsetType_BASIS_POINTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionOffsetType_BASIS_POINTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionOffsetType_BASIS_POINTS));
  return pyobj;
}


SWIGINTERN int DiscretionOffsetType_TICKS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionOffsetType_TICKS is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionOffsetType_TICKS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionOffsetType_TICKS));
  return pyobj;
}


SWIGINTERN int DiscretionOffsetType_PRICE_TIER_LEVEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionOffsetType_PRICE_TIER_LEVEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionOffsetType_PRICE_TIER_LEVEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionOffsetType_PRICE_TIER_LEVEL));
  return pyobj;
}


SWIGINTERN int DiscretionLimitType_OR_BETTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionLimitType_OR_BETTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionLimitType_OR_BETTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionLimitType_OR_BETTER));
  return pyobj;
}


SWIGINTERN int DiscretionLimitType_STRICT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionLimitType_STRICT is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionLimitType_STRICT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionLimitType_STRICT));
  return pyobj;
}


SWIGINTERN int DiscretionLimitType_OR_WORSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionLimitType_OR_WORSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionLimitType_OR_WORSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionLimitType_OR_WORSE));
  return pyobj;
}


SWIGINTERN int DiscretionRoundDirection_MORE_AGGRESSIVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionRoundDirection_MORE_AGGRESSIVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionRoundDirection_MORE_AGGRESSIVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionRoundDirection_MORE_AGGRESSIVE));
  return pyobj;
}


SWIGINTERN int DiscretionRoundDirection_MORE_PASSIVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionRoundDirection_MORE_PASSIVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionRoundDirection_MORE_PASSIVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionRoundDirection_MORE_PASSIVE));
  return pyobj;
}


SWIGINTERN int DiscretionScope_LOCAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionScope_LOCAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionScope_LOCAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionScope_LOCAL));
  return pyobj;
}


SWIGINTERN int DiscretionScope_NATIONAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionScope_NATIONAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionScope_NATIONAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionScope_NATIONAL));
  return pyobj;
}


SWIGINTERN int DiscretionScope_GLOBAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionScope_GLOBAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionScope_GLOBAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionScope_GLOBAL));
  return pyobj;
}


SWIGINTERN int DiscretionScope_NATIONAL_EXCLUDING_LOCAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiscretionScope_NATIONAL_EXCLUDING_LOCAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *DiscretionScope_NATIONAL_EXCLUDING_LOCAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DiscretionScope_NATIONAL_EXCLUDING_LOCAL));
  return pyobj;
}


SWIGINTERN int LastLiquidityInd_ADDED_LIQUIDITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LastLiquidityInd_ADDED_LIQUIDITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *LastLiquidityInd_ADDED_LIQUIDITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::LastLiquidityInd_ADDED_LIQUIDITY));
  return pyobj;
}


SWIGINTERN int LastLiquidityInd_REMOVED_LIQUIDITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LastLiquidityInd_REMOVED_LIQUIDITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *LastLiquidityInd_REMOVED_LIQUIDITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::LastLiquidityInd_REMOVED_LIQUIDITY));
  return pyobj;
}


SWIGINTERN int LastLiquidityInd_LIQUIDITY_ROUTED_OUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LastLiquidityInd_LIQUIDITY_ROUTED_OUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *LastLiquidityInd_LIQUIDITY_ROUTED_OUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::LastLiquidityInd_LIQUIDITY_ROUTED_OUT));
  return pyobj;
}


SWIGINTERN int ShortSaleReason_DEALER_SOLD_SHORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ShortSaleReason_DEALER_SOLD_SHORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ShortSaleReason_DEALER_SOLD_SHORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ShortSaleReason_DEALER_SOLD_SHORT));
  return pyobj;
}


SWIGINTERN int ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT));
  return pyobj;
}


SWIGINTERN int ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT));
  return pyobj;
}


SWIGINTERN int ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT));
  return pyobj;
}


SWIGINTERN int ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE_OR_AUTOMATIC_GIVEUP_CONTRA_SIDE_SOLD_SHORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE_OR_AUTOMATIC_GIVEUP_CONTRA_SIDE_SOLD_SHORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE_OR_AUTOMATIC_GIVEUP_CONTRA_SIDE_SOLD_SHORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE_OR_AUTOMATIC_GIVEUP_CONTRA_SIDE_SOLD_SHORT));
  return pyobj;
}


SWIGINTERN int ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT));
  return pyobj;
}


SWIGINTERN int QtyType_UNITS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QtyType_UNITS is read-only.");
  return 1;
}


SWIGINTERN PyObject *QtyType_UNITS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QtyType_UNITS));
  return pyobj;
}


SWIGINTERN int QtyType_CONTRACTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable QtyType_CONTRACTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *QtyType_CONTRACTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::QtyType_CONTRACTS));
  return pyobj;
}


SWIGINTERN int TradeReportType_SUBMIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportType_SUBMIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportType_SUBMIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportType_SUBMIT));
  return pyobj;
}


SWIGINTERN int TradeReportType_ALLEGED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportType_ALLEGED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportType_ALLEGED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportType_ALLEGED));
  return pyobj;
}


SWIGINTERN int TradeReportType_ACCEPT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportType_ACCEPT is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportType_ACCEPT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportType_ACCEPT));
  return pyobj;
}


SWIGINTERN int TradeReportType_DECLINE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportType_DECLINE is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportType_DECLINE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportType_DECLINE));
  return pyobj;
}


SWIGINTERN int TradeReportType_ADDENDUM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportType_ADDENDUM is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportType_ADDENDUM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportType_ADDENDUM));
  return pyobj;
}


SWIGINTERN int TradeReportType_NO_WAS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportType_NO_WAS is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportType_NO_WAS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportType_NO_WAS));
  return pyobj;
}


SWIGINTERN int TradeReportType_TRADE_REPORT_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportType_TRADE_REPORT_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportType_TRADE_REPORT_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportType_TRADE_REPORT_CANCEL));
  return pyobj;
}


SWIGINTERN int TradeReportType_LOCKED_IN_TRADE_BREAK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TradeReportType_LOCKED_IN_TRADE_BREAK is read-only.");
  return 1;
}


SWIGINTERN PyObject *TradeReportType_LOCKED_IN_TRADE_BREAK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TradeReportType_LOCKED_IN_TRADE_BREAK));
  return pyobj;
}


SWIGINTERN int AllocNoOrdersType_NOT_SPECIFIED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocNoOrdersType_NOT_SPECIFIED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocNoOrdersType_NOT_SPECIFIED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocNoOrdersType_NOT_SPECIFIED));
  return pyobj;
}


SWIGINTERN int AllocNoOrdersType_EXPLICIT_LIST_PROVIDED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AllocNoOrdersType_EXPLICIT_LIST_PROVIDED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AllocNoOrdersType_EXPLICIT_LIST_PROVIDED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AllocNoOrdersType_EXPLICIT_LIST_PROVIDED));
  return pyobj;
}


SWIGINTERN int EventType_PUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EventType_PUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *EventType_PUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::EventType_PUT));
  return pyobj;
}


SWIGINTERN int EventType_CALL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EventType_CALL is read-only.");
  return 1;
}


SWIGINTERN PyObject *EventType_CALL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::EventType_CALL));
  return pyobj;
}


SWIGINTERN int EventType_TENDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EventType_TENDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *EventType_TENDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::EventType_TENDER));
  return pyobj;
}


SWIGINTERN int EventType_SINKING_FUND_CALL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EventType_SINKING_FUND_CALL is read-only.");
  return 1;
}


SWIGINTERN PyObject *EventType_SINKING_FUND_CALL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::EventType_SINKING_FUND_CALL));
  return pyobj;
}


SWIGINTERN int InstrAttribType_FLAT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InstrAttribType_FLAT is read-only.");
  return 1;
}


SWIGINTERN PyObject *InstrAttribType_FLAT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::InstrAttribType_FLAT));
  return pyobj;
}


SWIGINTERN int InstrAttribType_ZERO_COUPON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InstrAttribType_ZERO_COUPON is read-only.");
  return 1;
}


SWIGINTERN PyObject *InstrAttribType_ZERO_COUPON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::InstrAttribType_ZERO_COUPON));
  return pyobj;
}


SWIGINTERN int InstrAttribType_INTEREST_BEARING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InstrAttribType_INTEREST_BEARING is read-only.");
  return 1;
}


SWIGINTERN PyObject *InstrAttribType_INTEREST_BEARING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::InstrAttribType_INTEREST_BEARING));
  return pyobj;
}


SWIGINTERN int InstrAttribType_NO_PERIODIC_PAYMENTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InstrAttribType_NO_PERIODIC_PAYMENTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *InstrAttribType_NO_PERIODIC_PAYMENTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::InstrAttribType_NO_PERIODIC_PAYMENTS));
  return pyobj;
}


SWIGINTERN int InstrAttribType_VARIABLE_RATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InstrAttribType_VARIABLE_RATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *InstrAttribType_VARIABLE_RATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::InstrAttribType_VARIABLE_RATE));
  return pyobj;
}


SWIGINTERN int InstrAttribType_LESS_FEE_FOR_PUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InstrAttribType_LESS_FEE_FOR_PUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *InstrAttribType_LESS_FEE_FOR_PUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::InstrAttribType_LESS_FEE_FOR_PUT));
  return pyobj;
}


SWIGINTERN int InstrAttribType_STEPPED_COUPON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InstrAttribType_STEPPED_COUPON is read-only.");
  return 1;
}


SWIGINTERN PyObject *InstrAttribType_STEPPED_COUPON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::InstrAttribType_STEPPED_COUPON));
  return pyobj;
}


SWIGINTERN int InstrAttribType_COUPON_PERIOD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InstrAttribType_COUPON_PERIOD is read-only.");
  return 1;
}


SWIGINTERN PyObject *InstrAttribType_COUPON_PERIOD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::InstrAttribType_COUPON_PERIOD));
  return pyobj;
}


SWIGINTERN int InstrAttribType_WHEN_AND_IF_ISSUED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InstrAttribType_WHEN_AND_IF_ISSUED is read-only.");
  return 1;
}


SWIGINTERN PyObject *InstrAttribType_WHEN_AND_IF_ISSUED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::InstrAttribType_WHEN_AND_IF_ISSUED));
  return pyobj;
}


SWIGINTERN int MiscFeeBasis_ABSOLUTE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeBasis_ABSOLUTE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeBasis_ABSOLUTE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MiscFeeBasis_ABSOLUTE));
  return pyobj;
}


SWIGINTERN int MiscFeeBasis_PER_UNIT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeBasis_PER_UNIT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeBasis_PER_UNIT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MiscFeeBasis_PER_UNIT));
  return pyobj;
}


SWIGINTERN int MiscFeeBasis_PERCENTAGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MiscFeeBasis_PERCENTAGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MiscFeeBasis_PERCENTAGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::MiscFeeBasis_PERCENTAGE));
  return pyobj;
}


SWIGINTERN int CollAsgnReason_INITIAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnReason_INITIAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnReason_INITIAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnReason_INITIAL));
  return pyobj;
}


SWIGINTERN int CollAsgnReason_SCHEDULED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnReason_SCHEDULED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnReason_SCHEDULED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnReason_SCHEDULED));
  return pyobj;
}


SWIGINTERN int CollAsgnReason_TIME_WARNING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnReason_TIME_WARNING is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnReason_TIME_WARNING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnReason_TIME_WARNING));
  return pyobj;
}


SWIGINTERN int CollAsgnReason_MARGIN_DEFICIENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnReason_MARGIN_DEFICIENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnReason_MARGIN_DEFICIENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnReason_MARGIN_DEFICIENCY));
  return pyobj;
}


SWIGINTERN int CollAsgnReason_MARGIN_EXCESS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnReason_MARGIN_EXCESS is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnReason_MARGIN_EXCESS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnReason_MARGIN_EXCESS));
  return pyobj;
}


SWIGINTERN int CollAsgnReason_FORWARD_COLLATERAL_DEMAND_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnReason_FORWARD_COLLATERAL_DEMAND is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnReason_FORWARD_COLLATERAL_DEMAND_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnReason_FORWARD_COLLATERAL_DEMAND));
  return pyobj;
}


SWIGINTERN int CollAsgnReason_EVENT_OF_DEFAULT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnReason_EVENT_OF_DEFAULT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnReason_EVENT_OF_DEFAULT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnReason_EVENT_OF_DEFAULT));
  return pyobj;
}


SWIGINTERN int CollAsgnReason_ADVERSE_TAX_EVENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnReason_ADVERSE_TAX_EVENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnReason_ADVERSE_TAX_EVENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnReason_ADVERSE_TAX_EVENT));
  return pyobj;
}


SWIGINTERN int CollInquiryQualifier_TRADEDATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryQualifier_TRADEDATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryQualifier_TRADEDATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryQualifier_TRADEDATE));
  return pyobj;
}


SWIGINTERN int CollInquiryQualifier_GC_INSTRUMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryQualifier_GC_INSTRUMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryQualifier_GC_INSTRUMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryQualifier_GC_INSTRUMENT));
  return pyobj;
}


SWIGINTERN int CollInquiryQualifier_COLLATERALINSTRUMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryQualifier_COLLATERALINSTRUMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryQualifier_COLLATERALINSTRUMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryQualifier_COLLATERALINSTRUMENT));
  return pyobj;
}


SWIGINTERN int CollInquiryQualifier_SUBSTITUTION_ELIGIBLE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryQualifier_SUBSTITUTION_ELIGIBLE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryQualifier_SUBSTITUTION_ELIGIBLE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryQualifier_SUBSTITUTION_ELIGIBLE));
  return pyobj;
}


SWIGINTERN int CollInquiryQualifier_NOT_ASSIGNED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryQualifier_NOT_ASSIGNED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryQualifier_NOT_ASSIGNED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryQualifier_NOT_ASSIGNED));
  return pyobj;
}


SWIGINTERN int CollInquiryQualifier_PARTIALLY_ASSIGNED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryQualifier_PARTIALLY_ASSIGNED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryQualifier_PARTIALLY_ASSIGNED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryQualifier_PARTIALLY_ASSIGNED));
  return pyobj;
}


SWIGINTERN int CollInquiryQualifier_FULLY_ASSIGNED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryQualifier_FULLY_ASSIGNED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryQualifier_FULLY_ASSIGNED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryQualifier_FULLY_ASSIGNED));
  return pyobj;
}


SWIGINTERN int CollInquiryQualifier_OUTSTANDING_TRADES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryQualifier_OUTSTANDING_TRADES is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryQualifier_OUTSTANDING_TRADES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryQualifier_OUTSTANDING_TRADES));
  return pyobj;
}


SWIGINTERN int CollAsgnTransType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnTransType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnTransType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnTransType_NEW));
  return pyobj;
}


SWIGINTERN int CollAsgnTransType_REPLACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnTransType_REPLACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnTransType_REPLACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnTransType_REPLACE));
  return pyobj;
}


SWIGINTERN int CollAsgnTransType_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnTransType_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnTransType_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnTransType_CANCEL));
  return pyobj;
}


SWIGINTERN int CollAsgnTransType_RELEASE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnTransType_RELEASE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnTransType_RELEASE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnTransType_RELEASE));
  return pyobj;
}


SWIGINTERN int CollAsgnTransType_REVERSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnTransType_REVERSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnTransType_REVERSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnTransType_REVERSE));
  return pyobj;
}


SWIGINTERN int CollAsgnRespType_RECEIVED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnRespType_RECEIVED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnRespType_RECEIVED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnRespType_RECEIVED));
  return pyobj;
}


SWIGINTERN int CollAsgnRespType_ACCEPTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnRespType_ACCEPTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnRespType_ACCEPTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnRespType_ACCEPTED));
  return pyobj;
}


SWIGINTERN int CollAsgnRespType_DECLINED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnRespType_DECLINED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnRespType_DECLINED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnRespType_DECLINED));
  return pyobj;
}


SWIGINTERN int CollAsgnRespType_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnRespType_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnRespType_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnRespType_REJECTED));
  return pyobj;
}


SWIGINTERN int CollAsgnRejectReason_UNKNOWN_DEAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnRejectReason_UNKNOWN_DEAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnRejectReason_UNKNOWN_DEAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnRejectReason_UNKNOWN_DEAL));
  return pyobj;
}


SWIGINTERN int CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT));
  return pyobj;
}


SWIGINTERN int CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION));
  return pyobj;
}


SWIGINTERN int CollAsgnRejectReason_INSUFFICIENT_COLLATERAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnRejectReason_INSUFFICIENT_COLLATERAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnRejectReason_INSUFFICIENT_COLLATERAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnRejectReason_INSUFFICIENT_COLLATERAL));
  return pyobj;
}


SWIGINTERN int CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL));
  return pyobj;
}


SWIGINTERN int CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION));
  return pyobj;
}


SWIGINTERN int CollStatus_UNASSIGNED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollStatus_UNASSIGNED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollStatus_UNASSIGNED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollStatus_UNASSIGNED));
  return pyobj;
}


SWIGINTERN int CollStatus_PARTIALLY_ASSIGNED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollStatus_PARTIALLY_ASSIGNED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollStatus_PARTIALLY_ASSIGNED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollStatus_PARTIALLY_ASSIGNED));
  return pyobj;
}


SWIGINTERN int CollStatus_ASSIGNMENT_PROPOSED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollStatus_ASSIGNMENT_PROPOSED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollStatus_ASSIGNMENT_PROPOSED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollStatus_ASSIGNMENT_PROPOSED));
  return pyobj;
}


SWIGINTERN int CollStatus_ASSIGNED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollStatus_ASSIGNED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollStatus_ASSIGNED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollStatus_ASSIGNED));
  return pyobj;
}


SWIGINTERN int CollStatus_CHALLENGED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollStatus_CHALLENGED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollStatus_CHALLENGED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollStatus_CHALLENGED));
  return pyobj;
}


SWIGINTERN int DeliveryType_VERSUS_PAYMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DeliveryType_VERSUS_PAYMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *DeliveryType_VERSUS_PAYMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DeliveryType_VERSUS_PAYMENT));
  return pyobj;
}


SWIGINTERN int DeliveryType_FREE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DeliveryType_FREE is read-only.");
  return 1;
}


SWIGINTERN PyObject *DeliveryType_FREE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DeliveryType_FREE));
  return pyobj;
}


SWIGINTERN int DeliveryType_TRI_PARTY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DeliveryType_TRI_PARTY is read-only.");
  return 1;
}


SWIGINTERN PyObject *DeliveryType_TRI_PARTY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DeliveryType_TRI_PARTY));
  return pyobj;
}


SWIGINTERN int DeliveryType_HOLD_IN_CUSTODY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DeliveryType_HOLD_IN_CUSTODY is read-only.");
  return 1;
}


SWIGINTERN PyObject *DeliveryType_HOLD_IN_CUSTODY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::DeliveryType_HOLD_IN_CUSTODY));
  return pyobj;
}


SWIGINTERN int UserRequestType_LOGONUSER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UserRequestType_LOGONUSER is read-only.");
  return 1;
}


SWIGINTERN PyObject *UserRequestType_LOGONUSER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::UserRequestType_LOGONUSER));
  return pyobj;
}


SWIGINTERN int UserRequestType_LOGOFFUSER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UserRequestType_LOGOFFUSER is read-only.");
  return 1;
}


SWIGINTERN PyObject *UserRequestType_LOGOFFUSER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::UserRequestType_LOGOFFUSER));
  return pyobj;
}


SWIGINTERN int UserRequestType_CHANGEPASSWORDFORUSER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UserRequestType_CHANGEPASSWORDFORUSER is read-only.");
  return 1;
}


SWIGINTERN PyObject *UserRequestType_CHANGEPASSWORDFORUSER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::UserRequestType_CHANGEPASSWORDFORUSER));
  return pyobj;
}


SWIGINTERN int UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS));
  return pyobj;
}


SWIGINTERN int UserStatus_LOGGED_IN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UserStatus_LOGGED_IN is read-only.");
  return 1;
}


SWIGINTERN PyObject *UserStatus_LOGGED_IN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::UserStatus_LOGGED_IN));
  return pyobj;
}


SWIGINTERN int UserStatus_NOT_LOGGED_IN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UserStatus_NOT_LOGGED_IN is read-only.");
  return 1;
}


SWIGINTERN PyObject *UserStatus_NOT_LOGGED_IN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::UserStatus_NOT_LOGGED_IN));
  return pyobj;
}


SWIGINTERN int UserStatus_USER_NOT_RECOGNISED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UserStatus_USER_NOT_RECOGNISED is read-only.");
  return 1;
}


SWIGINTERN PyObject *UserStatus_USER_NOT_RECOGNISED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::UserStatus_USER_NOT_RECOGNISED));
  return pyobj;
}


SWIGINTERN int UserStatus_PASSWORD_INCORRECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UserStatus_PASSWORD_INCORRECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *UserStatus_PASSWORD_INCORRECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::UserStatus_PASSWORD_INCORRECT));
  return pyobj;
}


SWIGINTERN int UserStatus_PASSWORD_CHANGED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UserStatus_PASSWORD_CHANGED is read-only.");
  return 1;
}


SWIGINTERN PyObject *UserStatus_PASSWORD_CHANGED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::UserStatus_PASSWORD_CHANGED));
  return pyobj;
}


SWIGINTERN int UserStatus_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UserStatus_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *UserStatus_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::UserStatus_OTHER));
  return pyobj;
}


SWIGINTERN int StatusValue_CONNECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StatusValue_CONNECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *StatusValue_CONNECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::StatusValue_CONNECTED));
  return pyobj;
}


SWIGINTERN int StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP is read-only.");
  return 1;
}


SWIGINTERN PyObject *StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP));
  return pyobj;
}


SWIGINTERN int StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN is read-only.");
  return 1;
}


SWIGINTERN PyObject *StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN));
  return pyobj;
}


SWIGINTERN int StatusValue_IN_PROCESS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StatusValue_IN_PROCESS is read-only.");
  return 1;
}


SWIGINTERN PyObject *StatusValue_IN_PROCESS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::StatusValue_IN_PROCESS));
  return pyobj;
}


SWIGINTERN int NetworkRequestType_SNAPSHOT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NetworkRequestType_SNAPSHOT is read-only.");
  return 1;
}


SWIGINTERN PyObject *NetworkRequestType_SNAPSHOT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::NetworkRequestType_SNAPSHOT));
  return pyobj;
}


SWIGINTERN int NetworkRequestType_SUBSCRIBE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NetworkRequestType_SUBSCRIBE is read-only.");
  return 1;
}


SWIGINTERN PyObject *NetworkRequestType_SUBSCRIBE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::NetworkRequestType_SUBSCRIBE));
  return pyobj;
}


SWIGINTERN int NetworkRequestType_STOP_SUBSCRIBING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NetworkRequestType_STOP_SUBSCRIBING is read-only.");
  return 1;
}


SWIGINTERN PyObject *NetworkRequestType_STOP_SUBSCRIBING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::NetworkRequestType_STOP_SUBSCRIBING));
  return pyobj;
}


SWIGINTERN int NetworkRequestType_LEVEL_OF_DETAIL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NetworkRequestType_LEVEL_OF_DETAIL is read-only.");
  return 1;
}


SWIGINTERN PyObject *NetworkRequestType_LEVEL_OF_DETAIL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::NetworkRequestType_LEVEL_OF_DETAIL));
  return pyobj;
}


SWIGINTERN int NetworkStatusResponseType_FULL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NetworkStatusResponseType_FULL is read-only.");
  return 1;
}


SWIGINTERN PyObject *NetworkStatusResponseType_FULL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::NetworkStatusResponseType_FULL));
  return pyobj;
}


SWIGINTERN int NetworkStatusResponseType_INCREMENTAL_UPDATE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NetworkStatusResponseType_INCREMENTAL_UPDATE is read-only.");
  return 1;
}


SWIGINTERN PyObject *NetworkStatusResponseType_INCREMENTAL_UPDATE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::NetworkStatusResponseType_INCREMENTAL_UPDATE));
  return pyobj;
}


SWIGINTERN int TrdRptStatus_ACCEPTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdRptStatus_ACCEPTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdRptStatus_ACCEPTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdRptStatus_ACCEPTED));
  return pyobj;
}


SWIGINTERN int TrdRptStatus_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TrdRptStatus_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *TrdRptStatus_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::TrdRptStatus_REJECTED));
  return pyobj;
}


SWIGINTERN int AffirmStatus_RECEIVED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AffirmStatus_RECEIVED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AffirmStatus_RECEIVED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AffirmStatus_RECEIVED));
  return pyobj;
}


SWIGINTERN int AffirmStatus_CONFIRM_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AffirmStatus_CONFIRM_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AffirmStatus_CONFIRM_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AffirmStatus_CONFIRM_REJECTED));
  return pyobj;
}


SWIGINTERN int AffirmStatus_AFFIRMED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AffirmStatus_AFFIRMED is read-only.");
  return 1;
}


SWIGINTERN PyObject *AffirmStatus_AFFIRMED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::AffirmStatus_AFFIRMED));
  return pyobj;
}


SWIGINTERN int CollAction_RETAIN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAction_RETAIN is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAction_RETAIN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAction_RETAIN));
  return pyobj;
}


SWIGINTERN int CollAction_ADD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAction_ADD is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAction_ADD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAction_ADD));
  return pyobj;
}


SWIGINTERN int CollAction_REMOVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollAction_REMOVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollAction_REMOVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollAction_REMOVE));
  return pyobj;
}


SWIGINTERN int CollInquiryStatus_ACCEPTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryStatus_ACCEPTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryStatus_ACCEPTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryStatus_ACCEPTED));
  return pyobj;
}


SWIGINTERN int CollInquiryStatus_ACCEPTED_WITH_WARNINGS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryStatus_ACCEPTED_WITH_WARNINGS is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryStatus_ACCEPTED_WITH_WARNINGS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryStatus_ACCEPTED_WITH_WARNINGS));
  return pyobj;
}


SWIGINTERN int CollInquiryStatus_COMPLETED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryStatus_COMPLETED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryStatus_COMPLETED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryStatus_COMPLETED));
  return pyobj;
}


SWIGINTERN int CollInquiryStatus_COMPLETED_WITH_WARNINGS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryStatus_COMPLETED_WITH_WARNINGS is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryStatus_COMPLETED_WITH_WARNINGS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryStatus_COMPLETED_WITH_WARNINGS));
  return pyobj;
}


SWIGINTERN int CollInquiryStatus_REJECTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryStatus_REJECTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryStatus_REJECTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryStatus_REJECTED));
  return pyobj;
}


SWIGINTERN int CollInquiryResult_SUCCESSFUL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryResult_SUCCESSFUL is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryResult_SUCCESSFUL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryResult_SUCCESSFUL));
  return pyobj;
}


SWIGINTERN int CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT));
  return pyobj;
}


SWIGINTERN int CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE));
  return pyobj;
}


SWIGINTERN int CollInquiryResult_INVALID_PARTIES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryResult_INVALID_PARTIES is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryResult_INVALID_PARTIES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryResult_INVALID_PARTIES));
  return pyobj;
}


SWIGINTERN int CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED));
  return pyobj;
}


SWIGINTERN int CollInquiryResult_INVALID_DESTINATION_REQUESTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryResult_INVALID_DESTINATION_REQUESTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryResult_INVALID_DESTINATION_REQUESTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryResult_INVALID_DESTINATION_REQUESTED));
  return pyobj;
}


SWIGINTERN int CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED));
  return pyobj;
}


SWIGINTERN int CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED));
  return pyobj;
}


SWIGINTERN int CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED));
  return pyobj;
}


SWIGINTERN int CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY));
  return pyobj;
}


SWIGINTERN int CollInquiryResult_OTHER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CollInquiryResult_OTHER is read-only.");
  return 1;
}


SWIGINTERN PyObject *CollInquiryResult_OTHER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CollInquiryResult_OTHER));
  return pyobj;
}


SWIGINTERN int SessionRejectReason_INVALID_TAG_NUMBER_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_INVALID_TAG_NUMBER_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_INVALID_TAG_NUMBER_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_INVALID_TAG_NUMBER_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_REQUIRED_TAG_MISSING_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_REQUIRED_TAG_MISSING_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_REQUIRED_TAG_MISSING_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_REQUIRED_TAG_MISSING_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_UNDEFINED_TAG_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_UNDEFINED_TAG_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_UNDEFINED_TAG_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_UNDEFINED_TAG_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_VALUE_IS_INCORRECT_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_VALUE_IS_INCORRECT_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_VALUE_IS_INCORRECT_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_VALUE_IS_INCORRECT_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_DECRYPTION_PROBLEM_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_DECRYPTION_PROBLEM_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_DECRYPTION_PROBLEM_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_DECRYPTION_PROBLEM_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_SIGNATURE_PROBLEM_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_SIGNATURE_PROBLEM_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_SIGNATURE_PROBLEM_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_SIGNATURE_PROBLEM_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_COMPID_PROBLEM_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_COMPID_PROBLEM_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_COMPID_PROBLEM_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_COMPID_PROBLEM_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_INVALID_MSGTYPE_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_INVALID_MSGTYPE_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_INVALID_MSGTYPE_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_INVALID_MSGTYPE_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT);
  return pyobj;
}


SWIGINTERN int SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT);
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_OTHER_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_OTHER_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_OTHER_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BusinessRejectReason_OTHER_TEXT);
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_UNKNOWN_ID_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_UNKNOWN_ID_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_UNKNOWN_ID_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BusinessRejectReason_UNKNOWN_ID_TEXT);
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_UNKNOWN_SECURITY_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_UNKNOWN_SECURITY_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_UNKNOWN_SECURITY_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BusinessRejectReason_UNKNOWN_SECURITY_TEXT);
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT);
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT);
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT);
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_NOT_AUTHORIZED_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_NOT_AUTHORIZED_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_NOT_AUTHORIZED_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BusinessRejectReason_NOT_AUTHORIZED_TEXT);
  return pyobj;
}


SWIGINTERN int BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT is read-only.");
  return 1;
}


SWIGINTERN PyObject *BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT);
  return pyobj;
}


SWIGINTERN int ExecTransType_NEW_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecTransType_NEW is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecTransType_NEW_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecTransType_NEW));
  return pyobj;
}


SWIGINTERN int ExecTransType_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecTransType_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecTransType_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecTransType_CANCEL));
  return pyobj;
}


SWIGINTERN int ExecTransType_CORRECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecTransType_CORRECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecTransType_CORRECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecTransType_CORRECT));
  return pyobj;
}


SWIGINTERN int ExecTransType_STATUS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExecTransType_STATUS is read-only.");
  return 1;
}


SWIGINTERN PyObject *ExecTransType_STATUS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::ExecTransType_STATUS));
  return pyobj;
}


SWIGINTERN int IDSource_CUSIP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IDSource_CUSIP is read-only.");
  return 1;
}


SWIGINTERN PyObject *IDSource_CUSIP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IDSource_CUSIP);
  return pyobj;
}


SWIGINTERN int IDSource_SEDOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IDSource_SEDOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *IDSource_SEDOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IDSource_SEDOL);
  return pyobj;
}


SWIGINTERN int IDSource_QUIK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IDSource_QUIK is read-only.");
  return 1;
}


SWIGINTERN PyObject *IDSource_QUIK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IDSource_QUIK);
  return pyobj;
}


SWIGINTERN int IDSource_ISIN_NUMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IDSource_ISIN_NUMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *IDSource_ISIN_NUMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IDSource_ISIN_NUMBER);
  return pyobj;
}


SWIGINTERN int IDSource_RIC_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IDSource_RIC_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *IDSource_RIC_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IDSource_RIC_CODE);
  return pyobj;
}


SWIGINTERN int IDSource_ISO_CURRENCY_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IDSource_ISO_CURRENCY_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *IDSource_ISO_CURRENCY_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IDSource_ISO_CURRENCY_CODE);
  return pyobj;
}


SWIGINTERN int IDSource_ISO_COUNTRY_CODE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IDSource_ISO_COUNTRY_CODE is read-only.");
  return 1;
}


SWIGINTERN PyObject *IDSource_ISO_COUNTRY_CODE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IDSource_ISO_COUNTRY_CODE);
  return pyobj;
}


SWIGINTERN int IDSource_EXCHANGE_SYMBOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IDSource_EXCHANGE_SYMBOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *IDSource_EXCHANGE_SYMBOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IDSource_EXCHANGE_SYMBOL);
  return pyobj;
}


SWIGINTERN int IDSource_CONSOLIDATED_TAPE_ASSOCIATION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IDSource_CONSOLIDATED_TAPE_ASSOCIATION is read-only.");
  return 1;
}


SWIGINTERN PyObject *IDSource_CONSOLIDATED_TAPE_ASSOCIATION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IDSource_CONSOLIDATED_TAPE_ASSOCIATION);
  return pyobj;
}


SWIGINTERN int IOIShares_SMALL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIShares_SMALL is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIShares_SMALL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IOIShares_SMALL);
  return pyobj;
}


SWIGINTERN int IOIShares_MEDIUM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIShares_MEDIUM is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIShares_MEDIUM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IOIShares_MEDIUM);
  return pyobj;
}


SWIGINTERN int IOIShares_LARGE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable IOIShares_LARGE is read-only.");
  return 1;
}


SWIGINTERN PyObject *IOIShares_LARGE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::IOIShares_LARGE);
  return pyobj;
}


SWIGINTERN int Rule80A_AGENCY_SINGLE_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_AGENCY_SINGLE_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_AGENCY_SINGLE_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_AGENCY_SINGLE_ORDER));
  return pyobj;
}


SWIGINTERN int Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_A_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_A_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_A_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_A_TYPE));
  return pyobj;
}


SWIGINTERN int Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM));
  return pyobj;
}


SWIGINTERN int Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM));
  return pyobj;
}


SWIGINTERN int Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL));
  return pyobj;
}


SWIGINTERN int Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_W_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_W_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_W_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_W_TYPE));
  return pyobj;
}


SWIGINTERN int Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_I_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_I_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_I_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_I_TYPE));
  return pyobj;
}


SWIGINTERN int Rule80A_INDIVIDUAL_INVESTOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_INDIVIDUAL_INVESTOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_INDIVIDUAL_INVESTOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_INDIVIDUAL_INVESTOR));
  return pyobj;
}


SWIGINTERN int Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER));
  return pyobj;
}


SWIGINTERN int Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER));
  return pyobj;
}


SWIGINTERN int Rule80A_SHORT_EXEMPT_AFFILIATED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_SHORT_EXEMPT_AFFILIATED is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_SHORT_EXEMPT_AFFILIATED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_SHORT_EXEMPT_AFFILIATED));
  return pyobj;
}


SWIGINTERN int Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER));
  return pyobj;
}


SWIGINTERN int Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER));
  return pyobj;
}


SWIGINTERN int Rule80A_PROPRIETARY_AFFILIATED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_PROPRIETARY_AFFILIATED is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_PROPRIETARY_AFFILIATED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_PROPRIETARY_AFFILIATED));
  return pyobj;
}


SWIGINTERN int Rule80A_PRINCIPAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_PRINCIPAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_PRINCIPAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_PRINCIPAL));
  return pyobj;
}


SWIGINTERN int Rule80A_TRANSACTIONS_NON_MEMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_TRANSACTIONS_NON_MEMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_TRANSACTIONS_NON_MEMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_TRANSACTIONS_NON_MEMBER));
  return pyobj;
}


SWIGINTERN int Rule80A_SPECIALIST_TRADES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_SPECIALIST_TRADES is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_SPECIALIST_TRADES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_SPECIALIST_TRADES));
  return pyobj;
}


SWIGINTERN int Rule80A_TRANSACTIONS_UNAFFILIATED_MEMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_TRANSACTIONS_UNAFFILIATED_MEMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_TRANSACTIONS_UNAFFILIATED_MEMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_TRANSACTIONS_UNAFFILIATED_MEMBER));
  return pyobj;
}


SWIGINTERN int Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY));
  return pyobj;
}


SWIGINTERN int Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER));
  return pyobj;
}


SWIGINTERN int Rule80A_SHORT_EXEMPT_NOT_AFFILIATED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_SHORT_EXEMPT_NOT_AFFILIATED is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_SHORT_EXEMPT_NOT_AFFILIATED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_SHORT_EXEMPT_NOT_AFFILIATED));
  return pyobj;
}


SWIGINTERN int Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY));
  return pyobj;
}


SWIGINTERN int Rule80A_SHORT_EXEMPT_NONMEMBER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Rule80A_SHORT_EXEMPT_NONMEMBER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Rule80A_SHORT_EXEMPT_NONMEMBER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Rule80A_SHORT_EXEMPT_NONMEMBER));
  return pyobj;
}


SWIGINTERN int SettlmntTyp_REGULAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlmntTyp_REGULAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlmntTyp_REGULAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlmntTyp_REGULAR));
  return pyobj;
}


SWIGINTERN int SettlmntTyp_CASH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlmntTyp_CASH is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlmntTyp_CASH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlmntTyp_CASH));
  return pyobj;
}


SWIGINTERN int SettlmntTyp_NEXT_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlmntTyp_NEXT_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlmntTyp_NEXT_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlmntTyp_NEXT_DAY));
  return pyobj;
}


SWIGINTERN int SettlmntTyp_T_PLUS_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlmntTyp_T_PLUS_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlmntTyp_T_PLUS_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlmntTyp_T_PLUS_2));
  return pyobj;
}


SWIGINTERN int SettlmntTyp_T_PLUS_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlmntTyp_T_PLUS_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlmntTyp_T_PLUS_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlmntTyp_T_PLUS_3));
  return pyobj;
}


SWIGINTERN int SettlmntTyp_T_PLUS_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlmntTyp_T_PLUS_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlmntTyp_T_PLUS_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlmntTyp_T_PLUS_4));
  return pyobj;
}


SWIGINTERN int SettlmntTyp_FUTURE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlmntTyp_FUTURE is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlmntTyp_FUTURE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlmntTyp_FUTURE));
  return pyobj;
}


SWIGINTERN int SettlmntTyp_WHEN_AND_IF_ISSUED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlmntTyp_WHEN_AND_IF_ISSUED is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlmntTyp_WHEN_AND_IF_ISSUED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlmntTyp_WHEN_AND_IF_ISSUED));
  return pyobj;
}


SWIGINTERN int SettlmntTyp_SELLERS_OPTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlmntTyp_SELLERS_OPTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlmntTyp_SELLERS_OPTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlmntTyp_SELLERS_OPTION));
  return pyobj;
}


SWIGINTERN int SettlmntTyp_T_PLUS_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlmntTyp_T_PLUS_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlmntTyp_T_PLUS_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlmntTyp_T_PLUS_5));
  return pyobj;
}


SWIGINTERN int SettlmntTyp_T_PLUS_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlmntTyp_T_PLUS_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlmntTyp_T_PLUS_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::SettlmntTyp_T_PLUS_1));
  return pyobj;
}


SWIGINTERN int OpenClose_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenClose_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenClose_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenClose_OPEN));
  return pyobj;
}


SWIGINTERN int OpenClose_CLOSE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenClose_CLOSE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenClose_CLOSE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenClose_CLOSE));
  return pyobj;
}


SWIGINTERN int CxlType_PARTIAL_CANCEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlType_PARTIAL_CANCEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlType_PARTIAL_CANCEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CxlType_PARTIAL_CANCEL));
  return pyobj;
}


SWIGINTERN int CxlType_FULL_REMAINING_QUANTITY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CxlType_FULL_REMAINING_QUANTITY is read-only.");
  return 1;
}


SWIGINTERN PyObject *CxlType_FULL_REMAINING_QUANTITY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::CxlType_FULL_REMAINING_QUANTITY));
  return pyobj;
}


SWIGINTERN int SettlLocation_CEDEL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlLocation_CEDEL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlLocation_CEDEL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SettlLocation_CEDEL);
  return pyobj;
}


SWIGINTERN int SettlLocation_DEPOSITORY_TRUST_COMPANY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlLocation_DEPOSITORY_TRUST_COMPANY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlLocation_DEPOSITORY_TRUST_COMPANY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SettlLocation_DEPOSITORY_TRUST_COMPANY);
  return pyobj;
}


SWIGINTERN int SettlLocation_EUROCLEAR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlLocation_EUROCLEAR is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlLocation_EUROCLEAR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SettlLocation_EUROCLEAR);
  return pyobj;
}


SWIGINTERN int SettlLocation_FEDERAL_BOOK_ENTRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlLocation_FEDERAL_BOOK_ENTRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlLocation_FEDERAL_BOOK_ENTRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SettlLocation_FEDERAL_BOOK_ENTRY);
  return pyobj;
}


SWIGINTERN int SettlLocation_PHYSICAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlLocation_PHYSICAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlLocation_PHYSICAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SettlLocation_PHYSICAL);
  return pyobj;
}


SWIGINTERN int SettlLocation_PARTICIPANT_TRUST_COMPANY_ISO_COUNTRY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SettlLocation_PARTICIPANT_TRUST_COMPANY_ISO_COUNTRY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SettlLocation_PARTICIPANT_TRUST_COMPANY_ISO_COUNTRY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SettlLocation_PARTICIPANT_TRUST_COMPANY_ISO_COUNTRY);
  return pyobj;
}


SWIGINTERN int PutOrCall_PUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PutOrCall_PUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *PutOrCall_PUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PutOrCall_PUT));
  return pyobj;
}


SWIGINTERN int PutOrCall_CALL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PutOrCall_CALL is read-only.");
  return 1;
}


SWIGINTERN PyObject *PutOrCall_CALL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::PutOrCall_CALL));
  return pyobj;
}


SWIGINTERN int CustomerOrFirm_CUSTOMER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CustomerOrFirm_CUSTOMER is read-only.");
  return 1;
}


SWIGINTERN PyObject *CustomerOrFirm_CUSTOMER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CustomerOrFirm_CUSTOMER));
  return pyobj;
}


SWIGINTERN int CustomerOrFirm_FIRM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CustomerOrFirm_FIRM is read-only.");
  return 1;
}


SWIGINTERN PyObject *CustomerOrFirm_FIRM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(FIX::CustomerOrFirm_FIRM));
  return pyobj;
}


SWIGINTERN int Benchmark_CURVE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Benchmark_CURVE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Benchmark_CURVE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Benchmark_CURVE));
  return pyobj;
}


SWIGINTERN int Benchmark_FIVEYR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Benchmark_FIVEYR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Benchmark_FIVEYR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Benchmark_FIVEYR));
  return pyobj;
}


SWIGINTERN int Benchmark_OLD5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Benchmark_OLD5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Benchmark_OLD5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Benchmark_OLD5));
  return pyobj;
}


SWIGINTERN int Benchmark_TENYR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Benchmark_TENYR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Benchmark_TENYR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Benchmark_TENYR));
  return pyobj;
}


SWIGINTERN int Benchmark_OLD10_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Benchmark_OLD10 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Benchmark_OLD10_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Benchmark_OLD10));
  return pyobj;
}


SWIGINTERN int Benchmark_THIRTYYR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Benchmark_THIRTYYR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Benchmark_THIRTYYR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Benchmark_THIRTYYR));
  return pyobj;
}


SWIGINTERN int Benchmark_OLD30_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Benchmark_OLD30 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Benchmark_OLD30_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Benchmark_OLD30));
  return pyobj;
}


SWIGINTERN int Benchmark_THREEMOLIBOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Benchmark_THREEMOLIBOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Benchmark_THREEMOLIBOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Benchmark_THREEMOLIBOR));
  return pyobj;
}


SWIGINTERN int Benchmark_SIXMOLIBOR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Benchmark_SIXMOLIBOR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Benchmark_SIXMOLIBOR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::Benchmark_SIXMOLIBOR));
  return pyobj;
}


SWIGINTERN int OpenCloseSettleFlag_DAILY_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenCloseSettleFlag_DAILY_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenCloseSettleFlag_DAILY_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenCloseSettleFlag_DAILY_OPEN));
  return pyobj;
}


SWIGINTERN int OpenCloseSettleFlag_SESSION_OPEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenCloseSettleFlag_SESSION_OPEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenCloseSettleFlag_SESSION_OPEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenCloseSettleFlag_SESSION_OPEN));
  return pyobj;
}


SWIGINTERN int OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE));
  return pyobj;
}


SWIGINTERN int OpenCloseSettleFlag_EXPECTED_PRICE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenCloseSettleFlag_EXPECTED_PRICE is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenCloseSettleFlag_EXPECTED_PRICE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenCloseSettleFlag_EXPECTED_PRICE));
  return pyobj;
}


SWIGINTERN int OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_char(static_cast< char >(FIX::OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_SessionID__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SessionID")) SWIG_fail;
  result = (FIX::SessionID *)new FIX::SessionID();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SessionID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SessionID__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BeginString *arg1 = 0 ;
  SenderCompID *arg2 = 0 ;
  TargetCompID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  FIX::SessionID *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SessionID",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BeginString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SessionID" "', argument " "1"" of type '" "BeginString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "1"" of type '" "BeginString const &""'"); 
  }
  arg1 = reinterpret_cast< BeginString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SenderCompID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SessionID" "', argument " "2"" of type '" "SenderCompID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "2"" of type '" "SenderCompID const &""'"); 
  }
  arg2 = reinterpret_cast< SenderCompID * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_TargetCompID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SessionID" "', argument " "3"" of type '" "TargetCompID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "3"" of type '" "TargetCompID const &""'"); 
  }
  arg3 = reinterpret_cast< TargetCompID * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SessionID" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (FIX::SessionID *)new FIX::SessionID((BeginString const &)*arg1,(SenderCompID const &)*arg2,(TargetCompID const &)*arg3,(std::string const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SessionID, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg4->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SessionID__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BeginString *arg1 = 0 ;
  SenderCompID *arg2 = 0 ;
  TargetCompID *arg3 = 0 ;
  FIX::SessionID *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SessionID",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_BeginString,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SessionID" "', argument " "1"" of type '" "BeginString const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "1"" of type '" "BeginString const &""'"); 
  }
  arg1 = reinterpret_cast< BeginString * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SenderCompID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SessionID" "', argument " "2"" of type '" "SenderCompID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "2"" of type '" "SenderCompID const &""'"); 
  }
  arg2 = reinterpret_cast< SenderCompID * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_TargetCompID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SessionID" "', argument " "3"" of type '" "TargetCompID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "3"" of type '" "TargetCompID const &""'"); 
  }
  arg3 = reinterpret_cast< TargetCompID * >(argp3);
  result = (FIX::SessionID *)new FIX::SessionID((BeginString const &)*arg1,(SenderCompID const &)*arg2,(TargetCompID const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SessionID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SessionID__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  FIX::SessionID *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SessionID",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SessionID" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SessionID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SessionID" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SessionID" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (FIX::SessionID *)new FIX::SessionID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SessionID, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg4->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SessionID__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  FIX::SessionID *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SessionID",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SessionID" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SessionID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SessionID" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionID" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (FIX::SessionID *)new FIX::SessionID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SessionID, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SessionID(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SessionID__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BeginString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SenderCompID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_TargetCompID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SessionID__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SessionID__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_BeginString, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SenderCompID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_TargetCompID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_SessionID__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_SessionID__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SessionID'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionID_getBeginString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = (FIX::SessionID *) 0 ;
  BeginString *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SessionID_getBeginString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionID_getBeginString" "', argument " "1"" of type '" "FIX::SessionID const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  {
    BeginString const &_result_ref = ((FIX::SessionID const *)arg1)->getBeginString();
    result = (BeginString *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BeginString, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionID_getSenderCompID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = (FIX::SessionID *) 0 ;
  SenderCompID *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SessionID_getSenderCompID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionID_getSenderCompID" "', argument " "1"" of type '" "FIX::SessionID const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  {
    SenderCompID const &_result_ref = ((FIX::SessionID const *)arg1)->getSenderCompID();
    result = (SenderCompID *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SenderCompID, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionID_getTargetCompID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = (FIX::SessionID *) 0 ;
  TargetCompID *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SessionID_getTargetCompID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionID_getTargetCompID" "', argument " "1"" of type '" "FIX::SessionID const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  {
    TargetCompID const &_result_ref = ((FIX::SessionID const *)arg1)->getTargetCompID();
    result = (TargetCompID *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TargetCompID, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionID_getSessionQualifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = (FIX::SessionID *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SessionID_getSessionQualifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionID_getSessionQualifier" "', argument " "1"" of type '" "FIX::SessionID const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  {
    std::string const &_result_ref = ((FIX::SessionID const *)arg1)->getSessionQualifier();
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionID_toString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = (FIX::SessionID *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SessionID_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionID_toString" "', argument " "1"" of type '" "FIX::SessionID const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  result = ((FIX::SessionID const *)arg1)->toString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionID_fromString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = (FIX::SessionID *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SessionID_fromString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionID_fromString" "', argument " "1"" of type '" "FIX::SessionID *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SessionID_fromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SessionID_fromString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->fromString((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionID_toString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = (FIX::SessionID *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SessionID_toString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionID_toString" "', argument " "1"" of type '" "FIX::SessionID const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  {
    temp2 = std::string((char*)PyString_AsString(obj1));
    arg2 = &temp2;
  }
  {
    std::string &_result_ref = ((FIX::SessionID const *)arg1)->toString(*arg2);
    result = (std::string *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__string, 0 |  0 );
  {
    if( std::string("std::string &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionID_toString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__SessionID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SessionID_toString__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__SessionID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SessionID_toString__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'SessionID_toString'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionID___invert__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = (FIX::SessionID *) 0 ;
  FIX::SessionID result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SessionID___invert__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionID___invert__" "', argument " "1"" of type '" "FIX::SessionID *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  result = (arg1)->operator ~();
  resultobj = SWIG_NewPointerObj((new FIX::SessionID(static_cast< const FIX::SessionID& >(result))), SWIGTYPE_p_FIX__SessionID, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionID___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = (FIX::SessionID *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SessionID___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionID___str__" "', argument " "1"" of type '" "FIX::SessionID *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  result = FIX_SessionID___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SessionID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = (FIX::SessionID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SessionID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionID, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SessionID" "', argument " "1"" of type '" "FIX::SessionID *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SessionID_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SessionID, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lt____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = 0 ;
  FIX::SessionID *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lt__" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lt__" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lt__" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  result = (bool)FIX::operator <((FIX::SessionID const &)*arg1,(FIX::SessionID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lt__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__SessionID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lt____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___eq____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = 0 ;
  FIX::SessionID *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__eq__" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__eq__" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__eq__" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  result = (bool)FIX::operator ==((FIX::SessionID const &)*arg1,(FIX::SessionID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___eq__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__SessionID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___eq____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___ne____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = 0 ;
  FIX::SessionID *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__ne__" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__ne__" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__ne__" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  result = (bool)FIX::operator !=((FIX::SessionID const &)*arg1,(FIX::SessionID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___ne__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__StringField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__SessionID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__StringField, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___ne____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  FIX::SessionID *arg2 = 0 ;
  std::ostream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  {
    std::ostream &_result_ref = FIX::operator <<(*arg1,(FIX::SessionID const &)*arg2);
    result = (std::ostream *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___rshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  FIX::SessionID *arg2 = 0 ;
  std::istream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__rshift__" "', argument " "2"" of type '" "FIX::SessionID &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "2"" of type '" "FIX::SessionID &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  {
    std::istream &_result_ref = FIX::operator >>(*arg1,*arg2);
    result = (std::istream *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__istream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dictionary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::Dictionary *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Dictionary",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Dictionary" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Dictionary" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::Dictionary *)new FIX::Dictionary((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Dictionary, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dictionary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Dictionary")) SWIG_fail;
  result = (FIX::Dictionary *)new FIX::Dictionary();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Dictionary, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dictionary(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Dictionary__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Dictionary__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_Dictionary'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Dictionary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Dictionary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Dictionary" "', argument " "1"" of type '" "FIX::Dictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dictionary_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_getName" "', argument " "1"" of type '" "FIX::Dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  result = ((FIX::Dictionary const *)arg1)->getName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dictionary_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_size" "', argument " "1"" of type '" "FIX::Dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  result = (int)((FIX::Dictionary const *)arg1)->size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_getString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dictionary_getString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_getString" "', argument " "1"" of type '" "FIX::Dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_getString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_getString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dictionary_getString" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    result = ((FIX::Dictionary const *)arg1)->getString((std::string const &)*arg2,arg3);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::FieldConvertError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldConvertError(static_cast< const FIX::FieldConvertError& >(_e))),SWIGTYPE_p_FIX__FieldConvertError,SWIG_POINTER_OWN), "FIX::FieldConvertError", SWIGTYPE_p_FIX__FieldConvertError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_getString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dictionary_getString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_getString" "', argument " "1"" of type '" "FIX::Dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_getString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_getString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = ((FIX::Dictionary const *)arg1)->getString((std::string const &)*arg2);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::FieldConvertError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldConvertError(static_cast< const FIX::FieldConvertError& >(_e))),SWIGTYPE_p_FIX__FieldConvertError,SWIG_POINTER_OWN), "FIX::FieldConvertError", SWIGTYPE_p_FIX__FieldConvertError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_getString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Dictionary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dictionary_getString__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Dictionary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Dictionary_getString__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Dictionary_getString'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_getLong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dictionary_getLong",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_getLong" "', argument " "1"" of type '" "FIX::Dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_getLong" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_getLong" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (long)((FIX::Dictionary const *)arg1)->getLong((std::string const &)*arg2);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::FieldConvertError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldConvertError(static_cast< const FIX::FieldConvertError& >(_e))),SWIGTYPE_p_FIX__FieldConvertError,SWIG_POINTER_OWN), "FIX::FieldConvertError", SWIGTYPE_p_FIX__FieldConvertError); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_getDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dictionary_getDouble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_getDouble" "', argument " "1"" of type '" "FIX::Dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_getDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_getDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (double)((FIX::Dictionary const *)arg1)->getDouble((std::string const &)*arg2);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::FieldConvertError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldConvertError(static_cast< const FIX::FieldConvertError& >(_e))),SWIGTYPE_p_FIX__FieldConvertError,SWIG_POINTER_OWN), "FIX::FieldConvertError", SWIGTYPE_p_FIX__FieldConvertError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_getBool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dictionary_getBool",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_getBool" "', argument " "1"" of type '" "FIX::Dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_getBool" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_getBool" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (bool)((FIX::Dictionary const *)arg1)->getBool((std::string const &)*arg2);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::FieldConvertError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldConvertError(static_cast< const FIX::FieldConvertError& >(_e))),SWIGTYPE_p_FIX__FieldConvertError,SWIG_POINTER_OWN), "FIX::FieldConvertError", SWIGTYPE_p_FIX__FieldConvertError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_getDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dictionary_getDay",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_getDay" "', argument " "1"" of type '" "FIX::Dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_getDay" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_getDay" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (int)((FIX::Dictionary const *)arg1)->getDay((std::string const &)*arg2);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::FieldConvertError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldConvertError(static_cast< const FIX::FieldConvertError& >(_e))),SWIGTYPE_p_FIX__FieldConvertError,SWIG_POINTER_OWN), "FIX::FieldConvertError", SWIGTYPE_p_FIX__FieldConvertError); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_setString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dictionary_setString",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_setString" "', argument " "1"" of type '" "FIX::Dictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_setString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Dictionary_setString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_setString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->setString((std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_setLong(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dictionary_setLong",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_setLong" "', argument " "1"" of type '" "FIX::Dictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_setLong" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_setLong" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dictionary_setLong" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  (arg1)->setLong((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_setDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dictionary_setDouble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_setDouble" "', argument " "1"" of type '" "FIX::Dictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_setDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_setDouble" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dictionary_setDouble" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->setDouble((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_setBool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dictionary_setBool",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_setBool" "', argument " "1"" of type '" "FIX::Dictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_setBool" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_setBool" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dictionary_setBool" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->setBool((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_setDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dictionary_setDay",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_setDay" "', argument " "1"" of type '" "FIX::Dictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_setDay" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_setDay" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dictionary_setDay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->setDay((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dictionary_has",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_has" "', argument " "1"" of type '" "FIX::Dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_has" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_has" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((FIX::Dictionary const *)arg1)->has((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  FIX::Dictionary *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dictionary_merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_merge" "', argument " "1"" of type '" "FIX::Dictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Dictionary,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dictionary_merge" "', argument " "2"" of type '" "FIX::Dictionary const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dictionary_merge" "', argument " "2"" of type '" "FIX::Dictionary const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Dictionary * >(argp2);
  (arg1)->merge((FIX::Dictionary const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  FIX::Dictionary::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dictionary_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_begin" "', argument " "1"" of type '" "FIX::Dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  result = ((FIX::Dictionary const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new FIX::Dictionary::iterator(static_cast< const FIX::Dictionary::iterator& >(result))), SWIGTYPE_p_FIX__Dictionary__Data__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dictionary_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Dictionary *arg1 = (FIX::Dictionary *) 0 ;
  FIX::Dictionary::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dictionary_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dictionary_end" "', argument " "1"" of type '" "FIX::Dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Dictionary * >(argp1);
  result = ((FIX::Dictionary const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new FIX::Dictionary::iterator(static_cast< const FIX::Dictionary::iterator& >(result))), SWIGTYPE_p_FIX__Dictionary__Data__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Dictionary_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Dictionary, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int BEGINSTRING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BEGINSTRING is read-only.");
  return 1;
}


SWIGINTERN PyObject *BEGINSTRING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::BEGINSTRING);
  return pyobj;
}


SWIGINTERN int SENDERCOMPID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SENDERCOMPID is read-only.");
  return 1;
}


SWIGINTERN PyObject *SENDERCOMPID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SENDERCOMPID);
  return pyobj;
}


SWIGINTERN int TARGETCOMPID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TARGETCOMPID is read-only.");
  return 1;
}


SWIGINTERN PyObject *TARGETCOMPID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::TARGETCOMPID);
  return pyobj;
}


SWIGINTERN int SESSION_QUALIFIER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SESSION_QUALIFIER is read-only.");
  return 1;
}


SWIGINTERN PyObject *SESSION_QUALIFIER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SESSION_QUALIFIER);
  return pyobj;
}


SWIGINTERN int CONNECTION_TYPE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CONNECTION_TYPE is read-only.");
  return 1;
}


SWIGINTERN PyObject *CONNECTION_TYPE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::CONNECTION_TYPE);
  return pyobj;
}


SWIGINTERN int USE_DATA_DICTIONARY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable USE_DATA_DICTIONARY is read-only.");
  return 1;
}


SWIGINTERN PyObject *USE_DATA_DICTIONARY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::USE_DATA_DICTIONARY);
  return pyobj;
}


SWIGINTERN int SEND_RESETSEQNUMFLAG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SEND_RESETSEQNUMFLAG is read-only.");
  return 1;
}


SWIGINTERN PyObject *SEND_RESETSEQNUMFLAG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SEND_RESETSEQNUMFLAG);
  return pyobj;
}


SWIGINTERN int SEND_REDUNDANT_RESENDREQUESTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SEND_REDUNDANT_RESENDREQUESTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SEND_REDUNDANT_RESENDREQUESTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SEND_REDUNDANT_RESENDREQUESTS);
  return pyobj;
}


SWIGINTERN int DATA_DICTIONARY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DATA_DICTIONARY is read-only.");
  return 1;
}


SWIGINTERN PyObject *DATA_DICTIONARY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::DATA_DICTIONARY);
  return pyobj;
}


SWIGINTERN int START_TIME_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable START_TIME is read-only.");
  return 1;
}


SWIGINTERN PyObject *START_TIME_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::START_TIME);
  return pyobj;
}


SWIGINTERN int END_TIME_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable END_TIME is read-only.");
  return 1;
}


SWIGINTERN PyObject *END_TIME_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::END_TIME);
  return pyobj;
}


SWIGINTERN int START_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable START_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *START_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::START_DAY);
  return pyobj;
}


SWIGINTERN int END_DAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable END_DAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *END_DAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::END_DAY);
  return pyobj;
}


SWIGINTERN int CHECK_COMPID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CHECK_COMPID is read-only.");
  return 1;
}


SWIGINTERN PyObject *CHECK_COMPID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::CHECK_COMPID);
  return pyobj;
}


SWIGINTERN int CHECK_LATENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CHECK_LATENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *CHECK_LATENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::CHECK_LATENCY);
  return pyobj;
}


SWIGINTERN int MAX_LATENCY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MAX_LATENCY is read-only.");
  return 1;
}


SWIGINTERN PyObject *MAX_LATENCY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MAX_LATENCY);
  return pyobj;
}


SWIGINTERN int HEARTBTINT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HEARTBTINT is read-only.");
  return 1;
}


SWIGINTERN PyObject *HEARTBTINT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::HEARTBTINT);
  return pyobj;
}


SWIGINTERN int SOCKET_ACCEPT_PORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SOCKET_ACCEPT_PORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SOCKET_ACCEPT_PORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SOCKET_ACCEPT_PORT);
  return pyobj;
}


SWIGINTERN int SOCKET_REUSE_ADDRESS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SOCKET_REUSE_ADDRESS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SOCKET_REUSE_ADDRESS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SOCKET_REUSE_ADDRESS);
  return pyobj;
}


SWIGINTERN int SOCKET_CONNECT_HOST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SOCKET_CONNECT_HOST is read-only.");
  return 1;
}


SWIGINTERN PyObject *SOCKET_CONNECT_HOST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SOCKET_CONNECT_HOST);
  return pyobj;
}


SWIGINTERN int SOCKET_CONNECT_PORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SOCKET_CONNECT_PORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *SOCKET_CONNECT_PORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SOCKET_CONNECT_PORT);
  return pyobj;
}


SWIGINTERN int SOCKET_NODELAY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SOCKET_NODELAY is read-only.");
  return 1;
}


SWIGINTERN PyObject *SOCKET_NODELAY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SOCKET_NODELAY);
  return pyobj;
}


SWIGINTERN int RECONNECT_INTERVAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RECONNECT_INTERVAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *RECONNECT_INTERVAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::RECONNECT_INTERVAL);
  return pyobj;
}


SWIGINTERN int VALIDATE_FIELDS_OUT_OF_ORDER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable VALIDATE_FIELDS_OUT_OF_ORDER is read-only.");
  return 1;
}


SWIGINTERN PyObject *VALIDATE_FIELDS_OUT_OF_ORDER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::VALIDATE_FIELDS_OUT_OF_ORDER);
  return pyobj;
}


SWIGINTERN int VALIDATE_FIELDS_HAVE_VALUES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable VALIDATE_FIELDS_HAVE_VALUES is read-only.");
  return 1;
}


SWIGINTERN PyObject *VALIDATE_FIELDS_HAVE_VALUES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::VALIDATE_FIELDS_HAVE_VALUES);
  return pyobj;
}


SWIGINTERN int VALIDATE_USER_DEFINED_FIELDS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable VALIDATE_USER_DEFINED_FIELDS is read-only.");
  return 1;
}


SWIGINTERN PyObject *VALIDATE_USER_DEFINED_FIELDS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::VALIDATE_USER_DEFINED_FIELDS);
  return pyobj;
}


SWIGINTERN int LOGON_TIMEOUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LOGON_TIMEOUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *LOGON_TIMEOUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::LOGON_TIMEOUT);
  return pyobj;
}


SWIGINTERN int LOGOUT_TIMEOUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable LOGOUT_TIMEOUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *LOGOUT_TIMEOUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::LOGOUT_TIMEOUT);
  return pyobj;
}


SWIGINTERN int FILE_STORE_PATH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FILE_STORE_PATH is read-only.");
  return 1;
}


SWIGINTERN PyObject *FILE_STORE_PATH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::FILE_STORE_PATH);
  return pyobj;
}


SWIGINTERN int MYSQL_STORE_USECONNECTIONPOOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_STORE_USECONNECTIONPOOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_STORE_USECONNECTIONPOOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_STORE_USECONNECTIONPOOL);
  return pyobj;
}


SWIGINTERN int MYSQL_STORE_DATABASE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_STORE_DATABASE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_STORE_DATABASE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_STORE_DATABASE);
  return pyobj;
}


SWIGINTERN int MYSQL_STORE_USER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_STORE_USER is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_STORE_USER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_STORE_USER);
  return pyobj;
}


SWIGINTERN int MYSQL_STORE_PASSWORD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_STORE_PASSWORD is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_STORE_PASSWORD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_STORE_PASSWORD);
  return pyobj;
}


SWIGINTERN int MYSQL_STORE_HOST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_STORE_HOST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_STORE_HOST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_STORE_HOST);
  return pyobj;
}


SWIGINTERN int MYSQL_STORE_PORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_STORE_PORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_STORE_PORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_STORE_PORT);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_STORE_USECONNECTIONPOOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_STORE_USECONNECTIONPOOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_STORE_USECONNECTIONPOOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_STORE_USECONNECTIONPOOL);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_STORE_DATABASE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_STORE_DATABASE is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_STORE_DATABASE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_STORE_DATABASE);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_STORE_USER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_STORE_USER is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_STORE_USER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_STORE_USER);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_STORE_PASSWORD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_STORE_PASSWORD is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_STORE_PASSWORD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_STORE_PASSWORD);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_STORE_HOST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_STORE_HOST is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_STORE_HOST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_STORE_HOST);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_STORE_PORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_STORE_PORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_STORE_PORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_STORE_PORT);
  return pyobj;
}


SWIGINTERN int ODBC_STORE_USER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ODBC_STORE_USER is read-only.");
  return 1;
}


SWIGINTERN PyObject *ODBC_STORE_USER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ODBC_STORE_USER);
  return pyobj;
}


SWIGINTERN int ODBC_STORE_PASSWORD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ODBC_STORE_PASSWORD is read-only.");
  return 1;
}


SWIGINTERN PyObject *ODBC_STORE_PASSWORD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ODBC_STORE_PASSWORD);
  return pyobj;
}


SWIGINTERN int ODBC_STORE_CONNECTION_STRING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ODBC_STORE_CONNECTION_STRING is read-only.");
  return 1;
}


SWIGINTERN PyObject *ODBC_STORE_CONNECTION_STRING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ODBC_STORE_CONNECTION_STRING);
  return pyobj;
}


SWIGINTERN int FILE_LOG_PATH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable FILE_LOG_PATH is read-only.");
  return 1;
}


SWIGINTERN PyObject *FILE_LOG_PATH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::FILE_LOG_PATH);
  return pyobj;
}


SWIGINTERN int SCREEN_LOG_SHOW_INCOMING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SCREEN_LOG_SHOW_INCOMING is read-only.");
  return 1;
}


SWIGINTERN PyObject *SCREEN_LOG_SHOW_INCOMING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SCREEN_LOG_SHOW_INCOMING);
  return pyobj;
}


SWIGINTERN int SCREEN_LOG_SHOW_OUTGOING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SCREEN_LOG_SHOW_OUTGOING is read-only.");
  return 1;
}


SWIGINTERN PyObject *SCREEN_LOG_SHOW_OUTGOING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SCREEN_LOG_SHOW_OUTGOING);
  return pyobj;
}


SWIGINTERN int SCREEN_LOG_SHOW_EVENTS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SCREEN_LOG_SHOW_EVENTS is read-only.");
  return 1;
}


SWIGINTERN PyObject *SCREEN_LOG_SHOW_EVENTS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::SCREEN_LOG_SHOW_EVENTS);
  return pyobj;
}


SWIGINTERN int MYSQL_LOG_USECONNECTIONPOOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_LOG_USECONNECTIONPOOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_LOG_USECONNECTIONPOOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_LOG_USECONNECTIONPOOL);
  return pyobj;
}


SWIGINTERN int MYSQL_LOG_DATABASE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_LOG_DATABASE is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_LOG_DATABASE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_LOG_DATABASE);
  return pyobj;
}


SWIGINTERN int MYSQL_LOG_USER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_LOG_USER is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_LOG_USER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_LOG_USER);
  return pyobj;
}


SWIGINTERN int MYSQL_LOG_PASSWORD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_LOG_PASSWORD is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_LOG_PASSWORD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_LOG_PASSWORD);
  return pyobj;
}


SWIGINTERN int MYSQL_LOG_HOST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_LOG_HOST is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_LOG_HOST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_LOG_HOST);
  return pyobj;
}


SWIGINTERN int MYSQL_LOG_PORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MYSQL_LOG_PORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *MYSQL_LOG_PORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MYSQL_LOG_PORT);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_LOG_USECONNECTIONPOOL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_LOG_USECONNECTIONPOOL is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_LOG_USECONNECTIONPOOL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_LOG_USECONNECTIONPOOL);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_LOG_DATABASE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_LOG_DATABASE is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_LOG_DATABASE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_LOG_DATABASE);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_LOG_USER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_LOG_USER is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_LOG_USER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_LOG_USER);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_LOG_PASSWORD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_LOG_PASSWORD is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_LOG_PASSWORD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_LOG_PASSWORD);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_LOG_HOST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_LOG_HOST is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_LOG_HOST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_LOG_HOST);
  return pyobj;
}


SWIGINTERN int POSTGRESQL_LOG_PORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable POSTGRESQL_LOG_PORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *POSTGRESQL_LOG_PORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::POSTGRESQL_LOG_PORT);
  return pyobj;
}


SWIGINTERN int ODBC_LOG_USER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ODBC_LOG_USER is read-only.");
  return 1;
}


SWIGINTERN PyObject *ODBC_LOG_USER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ODBC_LOG_USER);
  return pyobj;
}


SWIGINTERN int ODBC_LOG_PASSWORD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ODBC_LOG_PASSWORD is read-only.");
  return 1;
}


SWIGINTERN PyObject *ODBC_LOG_PASSWORD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ODBC_LOG_PASSWORD);
  return pyobj;
}


SWIGINTERN int ODBC_LOG_CONNECTION_STRING_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ODBC_LOG_CONNECTION_STRING is read-only.");
  return 1;
}


SWIGINTERN PyObject *ODBC_LOG_CONNECTION_STRING_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::ODBC_LOG_CONNECTION_STRING);
  return pyobj;
}


SWIGINTERN int RESET_ON_LOGON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RESET_ON_LOGON is read-only.");
  return 1;
}


SWIGINTERN PyObject *RESET_ON_LOGON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::RESET_ON_LOGON);
  return pyobj;
}


SWIGINTERN int RESET_ON_LOGOUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RESET_ON_LOGOUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *RESET_ON_LOGOUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::RESET_ON_LOGOUT);
  return pyobj;
}


SWIGINTERN int RESET_ON_DISCONNECT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RESET_ON_DISCONNECT is read-only.");
  return 1;
}


SWIGINTERN PyObject *RESET_ON_DISCONNECT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::RESET_ON_DISCONNECT);
  return pyobj;
}


SWIGINTERN int REFRESH_ON_LOGON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable REFRESH_ON_LOGON is read-only.");
  return 1;
}


SWIGINTERN PyObject *REFRESH_ON_LOGON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::REFRESH_ON_LOGON);
  return pyobj;
}


SWIGINTERN int MILLISECONDS_IN_TIMESTAMP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MILLISECONDS_IN_TIMESTAMP is read-only.");
  return 1;
}


SWIGINTERN PyObject *MILLISECONDS_IN_TIMESTAMP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::MILLISECONDS_IN_TIMESTAMP);
  return pyobj;
}


SWIGINTERN int HTTP_ACCEPT_PORT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HTTP_ACCEPT_PORT is read-only.");
  return 1;
}


SWIGINTERN PyObject *HTTP_ACCEPT_PORT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::HTTP_ACCEPT_PORT);
  return pyobj;
}


SWIGINTERN int PERSIST_MESSAGES_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PERSIST_MESSAGES is read-only.");
  return 1;
}


SWIGINTERN PyObject *PERSIST_MESSAGES_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(FIX::PERSIST_MESSAGES);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_SessionSettings__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SessionSettings")) SWIG_fail;
  result = (FIX::SessionSettings *)new FIX::SessionSettings();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SessionSettings, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SessionSettings__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  FIX::SessionSettings *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SessionSettings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SessionSettings" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionSettings" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  try {
    result = (FIX::SessionSettings *)new FIX::SessionSettings(*arg1);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SessionSettings, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SessionSettings__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::SessionSettings *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SessionSettings",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SessionSettings" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SessionSettings" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  try {
    result = (FIX::SessionSettings *)new FIX::SessionSettings((std::string const &)*arg1);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SessionSettings, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SessionSettings(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SessionSettings__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SessionSettings__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SessionSettings__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SessionSettings'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionSettings_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *arg1 = (FIX::SessionSettings *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SessionSettings_has",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionSettings_has" "', argument " "1"" of type '" "FIX::SessionSettings const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionSettings * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SessionSettings_has" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SessionSettings_has" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  result = (bool)((FIX::SessionSettings const *)arg1)->has((FIX::SessionID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionSettings_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *arg1 = (FIX::SessionSettings *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  FIX::Dictionary *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SessionSettings_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionSettings_get" "', argument " "1"" of type '" "FIX::SessionSettings const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionSettings * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SessionSettings_get" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SessionSettings_get" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  try {
    {
      FIX::Dictionary const &_result_ref = ((FIX::SessionSettings const *)arg1)->get((FIX::SessionID const &)*arg2);
      result = (FIX::Dictionary *) &_result_ref;
    }
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionSettings_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *arg1 = (FIX::SessionSettings *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  FIX::Dictionary arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SessionSettings_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionSettings_set" "', argument " "1"" of type '" "FIX::SessionSettings *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionSettings * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SessionSettings_set" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SessionSettings_set" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__Dictionary,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SessionSettings_set" "', argument " "3"" of type '" "FIX::Dictionary""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SessionSettings_set" "', argument " "3"" of type '" "FIX::Dictionary""'");
    } else {
      FIX::Dictionary * temp = reinterpret_cast< FIX::Dictionary * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  try {
    (arg1)->set((FIX::SessionID const &)*arg2,arg3);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionSettings_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *arg1 = (FIX::SessionSettings *) 0 ;
  FIX::Dictionary *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SessionSettings_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionSettings_get" "', argument " "1"" of type '" "FIX::SessionSettings const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionSettings * >(argp1);
  {
    FIX::Dictionary const &_result_ref = ((FIX::SessionSettings const *)arg1)->get();
    result = (FIX::Dictionary *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Dictionary, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionSettings_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__SessionSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SessionSettings_get__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__SessionSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SessionSettings_get__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'SessionSettings_get'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionSettings_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *arg1 = (FIX::SessionSettings *) 0 ;
  FIX::Dictionary *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SessionSettings_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionSettings_set" "', argument " "1"" of type '" "FIX::SessionSettings *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionSettings * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Dictionary,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SessionSettings_set" "', argument " "2"" of type '" "FIX::Dictionary const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SessionSettings_set" "', argument " "2"" of type '" "FIX::Dictionary const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Dictionary * >(argp2);
  try {
    (arg1)->set((FIX::Dictionary const &)*arg2);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionSettings_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__SessionSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__Dictionary, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SessionSettings_set__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__SessionSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FIX__Dictionary, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SessionSettings_set__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'SessionSettings_set'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionSettings_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *arg1 = (FIX::SessionSettings *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SessionSettings_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionSettings_size" "', argument " "1"" of type '" "FIX::SessionSettings *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionSettings * >(argp1);
  result = (int)(arg1)->size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SessionSettings_getSessions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *arg1 = (FIX::SessionSettings *) 0 ;
  SwigValueWrapper<std::set<FIX::SessionID > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SessionSettings_getSessions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SessionSettings_getSessions" "', argument " "1"" of type '" "FIX::SessionSettings const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionSettings * >(argp1);
  result = ((FIX::SessionSettings const *)arg1)->getSessions();
  resultobj = SWIG_NewPointerObj((new std::set<FIX::SessionID >(static_cast< const std::set<FIX::SessionID >& >(result))), SWIGTYPE_p_std__setTFIX__SessionID_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SessionSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *arg1 = (FIX::SessionSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SessionSettings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SessionSettings, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SessionSettings" "', argument " "1"" of type '" "FIX::SessionSettings *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionSettings * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SessionSettings_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SessionSettings, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___rshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  FIX::SessionSettings *arg2 = 0 ;
  std::istream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__rshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionSettings,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__rshift__" "', argument " "2"" of type '" "FIX::SessionSettings &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__rshift__" "', argument " "2"" of type '" "FIX::SessionSettings &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionSettings * >(argp2);
  try {
    {
      std::istream &_result_ref = FIX::operator >>(*arg1,*arg2);
      result = (std::istream *) &_result_ref;
    }
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__istream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___rshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___rshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FIX__SessionSettings, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___rshift____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  FIX::SessionSettings *arg2 = 0 ;
  std::ostream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionSettings,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "FIX::SessionSettings const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "FIX::SessionSettings const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionSettings * >(argp2);
  {
    std::ostream &_result_ref = FIX::operator <<(*arg1,(FIX::SessionSettings const &)*arg2);
    result = (std::ostream *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__FieldBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__Message, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionSettings, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_3(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_new_Session(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Application *arg1 = 0 ;
  MessageStoreFactory *arg2 = 0 ;
  FIX::SessionID *arg3 = 0 ;
  DataDictionary *arg4 = 0 ;
  SessionTime *arg5 = 0 ;
  int arg6 ;
  LogFactory *arg7 = (LogFactory *) 0 ;
  FIX::Session *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_Session",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Application,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Session" "', argument " "1"" of type '" "Application &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Session" "', argument " "1"" of type '" "Application &""'"); 
  }
  arg1 = reinterpret_cast< Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_MessageStoreFactory,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Session" "', argument " "2"" of type '" "MessageStoreFactory &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Session" "', argument " "2"" of type '" "MessageStoreFactory &""'"); 
  }
  arg2 = reinterpret_cast< MessageStoreFactory * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Session" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Session" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionID * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DataDictionary,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Session" "', argument " "4"" of type '" "DataDictionary const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Session" "', argument " "4"" of type '" "DataDictionary const &""'"); 
  }
  arg4 = reinterpret_cast< DataDictionary * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_SessionTime,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Session" "', argument " "5"" of type '" "SessionTime const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Session" "', argument " "5"" of type '" "SessionTime const &""'"); 
  }
  arg5 = reinterpret_cast< SessionTime * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Session" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_LogFactory, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_Session" "', argument " "7"" of type '" "LogFactory *""'"); 
  }
  arg7 = reinterpret_cast< LogFactory * >(argp7);
  result = (FIX::Session *)new FIX::Session(*arg1,*arg2,(FIX::SessionID const &)*arg3,(DataDictionary const &)*arg4,(SessionTime const &)*arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Session, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Session(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Session",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Session" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_logon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_logon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_logon" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  (arg1)->logon();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_logout__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_logout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_logout" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_logout" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_logout" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->logout((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_logout__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_logout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_logout" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  (arg1)->logout();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_logout(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Session, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Session_logout__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Session, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Session_logout__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Session_logout'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_isEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_isEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_isEnabled" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->isEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_sentLogon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_sentLogon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_sentLogon" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->sentLogon();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_sentLogout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_sentLogout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_sentLogout" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->sentLogout();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_receivedLogon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_receivedLogon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_receivedLogon" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->receivedLogon();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_isLoggedOn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_isLoggedOn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_isLoggedOn" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->isLoggedOn();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_reset" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  try {
    (arg1)->reset();
  }
  catch(FIX::IOException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_refresh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_refresh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_refresh" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  try {
    (arg1)->refresh();
  }
  catch(FIX::IOException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setNextSenderMsgSeqNum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setNextSenderMsgSeqNum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    (arg1)->setNextSenderMsgSeqNum(arg2);
  }
  catch(FIX::IOException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setNextTargetMsgSeqNum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setNextTargetMsgSeqNum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    (arg1)->setNextTargetMsgSeqNum(arg2);
  }
  catch(FIX::IOException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getSessionID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  FIX::SessionID *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getSessionID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getSessionID" "', argument " "1"" of type '" "FIX::Session const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  {
    FIX::SessionID const &_result_ref = ((FIX::Session const *)arg1)->getSessionID();
    result = (FIX::SessionID *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SessionID, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setDataDictionary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  DataDictionary *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setDataDictionary",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setDataDictionary" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DataDictionary,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_setDataDictionary" "', argument " "2"" of type '" "DataDictionary const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_setDataDictionary" "', argument " "2"" of type '" "DataDictionary const &""'"); 
  }
  arg2 = reinterpret_cast< DataDictionary * >(argp2);
  (arg1)->setDataDictionary((DataDictionary const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getDataDictionary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  DataDictionary *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getDataDictionary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getDataDictionary" "', argument " "1"" of type '" "FIX::Session const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  {
    DataDictionary const &_result_ref = ((FIX::Session const *)arg1)->getDataDictionary();
    result = (DataDictionary *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DataDictionary, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_sendToTarget__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_sendToTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (bool)FIX::Session::sendToTarget(*arg1,(std::string const &)*arg2);
  }
  catch(FIX::SessionNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::SessionNotFound(static_cast< const FIX::SessionNotFound& >(_e))),SWIGTYPE_p_FIX__SessionNotFound,SWIG_POINTER_OWN), "FIX::SessionNotFound", SWIGTYPE_p_FIX__SessionNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_sendToTarget__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_sendToTarget",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  try {
    result = (bool)FIX::Session::sendToTarget(*arg1);
  }
  catch(FIX::SessionNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::SessionNotFound(static_cast< const FIX::SessionNotFound& >(_e))),SWIGTYPE_p_FIX__SessionNotFound,SWIG_POINTER_OWN), "FIX::SessionNotFound", SWIGTYPE_p_FIX__SessionNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_sendToTarget__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = 0 ;
  FIX::SessionID *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_sendToTarget",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  try {
    result = (bool)FIX::Session::sendToTarget(*arg1,(FIX::SessionID const &)*arg2);
  }
  catch(FIX::SessionNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::SessionNotFound(static_cast< const FIX::SessionNotFound& >(_e))),SWIGTYPE_p_FIX__SessionNotFound,SWIG_POINTER_OWN), "FIX::SessionNotFound", SWIGTYPE_p_FIX__SessionNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_sendToTarget__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = 0 ;
  SenderCompID *arg2 = 0 ;
  TargetCompID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Session_sendToTarget",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SenderCompID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "SenderCompID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "SenderCompID const &""'"); 
  }
  arg2 = reinterpret_cast< SenderCompID * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_TargetCompID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Session_sendToTarget" "', argument " "3"" of type '" "TargetCompID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "3"" of type '" "TargetCompID const &""'"); 
  }
  arg3 = reinterpret_cast< TargetCompID * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Session_sendToTarget" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    result = (bool)FIX::Session::sendToTarget(*arg1,(SenderCompID const &)*arg2,(TargetCompID const &)*arg3,(std::string const &)*arg4);
  }
  catch(FIX::SessionNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::SessionNotFound(static_cast< const FIX::SessionNotFound& >(_e))),SWIGTYPE_p_FIX__SessionNotFound,SWIG_POINTER_OWN), "FIX::SessionNotFound", SWIGTYPE_p_FIX__SessionNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg4->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_sendToTarget__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = 0 ;
  SenderCompID *arg2 = 0 ;
  TargetCompID *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Session_sendToTarget",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SenderCompID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "SenderCompID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "SenderCompID const &""'"); 
  }
  arg2 = reinterpret_cast< SenderCompID * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_TargetCompID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Session_sendToTarget" "', argument " "3"" of type '" "TargetCompID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "3"" of type '" "TargetCompID const &""'"); 
  }
  arg3 = reinterpret_cast< TargetCompID * >(argp3);
  try {
    result = (bool)FIX::Session::sendToTarget(*arg1,(SenderCompID const &)*arg2,(TargetCompID const &)*arg3);
  }
  catch(FIX::SessionNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::SessionNotFound(static_cast< const FIX::SessionNotFound& >(_e))),SWIGTYPE_p_FIX__SessionNotFound,SWIG_POINTER_OWN), "FIX::SessionNotFound", SWIGTYPE_p_FIX__SessionNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_sendToTarget__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Session_sendToTarget",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Session_sendToTarget" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Session_sendToTarget" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    result = (bool)FIX::Session::sendToTarget(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  }
  catch(FIX::SessionNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::SessionNotFound(static_cast< const FIX::SessionNotFound& >(_e))),SWIGTYPE_p_FIX__SessionNotFound,SWIG_POINTER_OWN), "FIX::SessionNotFound", SWIGTYPE_p_FIX__SessionNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg4->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_sendToTarget__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Message *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Session_sendToTarget",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "1"" of type '" "FIX::Message &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Message * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Session_sendToTarget" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_sendToTarget" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    result = (bool)FIX::Session::sendToTarget(*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(FIX::SessionNotFound &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::SessionNotFound(static_cast< const FIX::SessionNotFound& >(_e))),SWIGTYPE_p_FIX__SessionNotFound,SWIG_POINTER_OWN), "FIX::SessionNotFound", SWIGTYPE_p_FIX__SessionNotFound); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_sendToTarget(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Session_sendToTarget__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Session_sendToTarget__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Session_sendToTarget__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SenderCompID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_TargetCompID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Session_sendToTarget__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Session_sendToTarget__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SenderCompID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_TargetCompID, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Session_sendToTarget__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Session_sendToTarget__SWIG_5(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Session_sendToTarget'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getSessions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper<std::set<FIX::SessionID > > result;
  
  if (!PyArg_ParseTuple(args,(char *)":Session_getSessions")) SWIG_fail;
  result = FIX::Session::getSessions();
  resultobj = SWIG_NewPointerObj((new std::set<FIX::SessionID >(static_cast< const std::set<FIX::SessionID >& >(result))), SWIGTYPE_p_std__setTFIX__SessionID_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_doesSessionExist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_doesSessionExist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_doesSessionExist" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_doesSessionExist" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  result = (bool)FIX::Session::doesSessionExist((FIX::SessionID const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_lookupSession__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = 0 ;
  FIX::Session *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_lookupSession",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_lookupSession" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_lookupSession" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  result = (FIX::Session *)FIX::Session::lookupSession((FIX::SessionID const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Session, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_lookupSession__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  bool arg2 ;
  FIX::Session *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_lookupSession",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_lookupSession" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_lookupSession" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_lookupSession" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (FIX::Session *)FIX::Session::lookupSession((std::string const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Session, 0 |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_lookupSession__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::Session *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_lookupSession",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_lookupSession" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_lookupSession" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::Session *)FIX::Session::lookupSession((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Session, 0 |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_lookupSession(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__SessionID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Session_lookupSession__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Session_lookupSession__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Session_lookupSession__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Session_lookupSession'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_isSessionRegistered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_isSessionRegistered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_isSessionRegistered" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_isSessionRegistered" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  result = (bool)FIX::Session::isSessionRegistered((FIX::SessionID const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_registerSession(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = 0 ;
  FIX::Session *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_registerSession",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_registerSession" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_registerSession" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  result = (FIX::Session *)FIX::Session::registerSession((FIX::SessionID const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Session, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_unregisterSession(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_unregisterSession",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_unregisterSession" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_unregisterSession" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  FIX::Session::unregisterSession((FIX::SessionID const &)*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_numSessions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Session_numSessions")) SWIG_fail;
  result = (int)FIX::Session::numSessions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_isSessionTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_isSessionTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_isSessionTime" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->isSessionTime();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_isInitiator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_isInitiator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_isInitiator" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->isInitiator();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_isAcceptor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_isAcceptor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_isAcceptor" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->isAcceptor();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getSendRedundantResendRequests(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getSendRedundantResendRequests",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getSendRedundantResendRequests" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->getSendRedundantResendRequests();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setSendRedundantResendRequests(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setSendRedundantResendRequests",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setSendRedundantResendRequests" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setSendRedundantResendRequests" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setSendRedundantResendRequests(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getCheckCompId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getCheckCompId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getCheckCompId" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->getCheckCompId();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setCheckCompId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setCheckCompId",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setCheckCompId" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setCheckCompId" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setCheckCompId(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getCheckLatency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getCheckLatency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getCheckLatency" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->getCheckLatency();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setCheckLatency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setCheckLatency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setCheckLatency" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setCheckLatency" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setCheckLatency(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getMaxLatency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getMaxLatency",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getMaxLatency" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (int)(arg1)->getMaxLatency();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setMaxLatency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setMaxLatency",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setMaxLatency" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setMaxLatency" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setMaxLatency(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getLogonTimeout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getLogonTimeout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getLogonTimeout" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (int)(arg1)->getLogonTimeout();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setLogonTimeout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setLogonTimeout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setLogonTimeout" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setLogonTimeout" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setLogonTimeout(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getLogoutTimeout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getLogoutTimeout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getLogoutTimeout" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (int)(arg1)->getLogoutTimeout();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setLogoutTimeout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setLogoutTimeout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setLogoutTimeout" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setLogoutTimeout" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setLogoutTimeout(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getResetOnLogon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getResetOnLogon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getResetOnLogon" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->getResetOnLogon();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setResetOnLogon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setResetOnLogon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setResetOnLogon" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setResetOnLogon" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setResetOnLogon(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getResetOnLogout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getResetOnLogout",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getResetOnLogout" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->getResetOnLogout();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setResetOnLogout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setResetOnLogout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setResetOnLogout" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setResetOnLogout" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setResetOnLogout(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getResetOnDisconnect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getResetOnDisconnect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getResetOnDisconnect" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->getResetOnDisconnect();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setResetOnDisconnect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setResetOnDisconnect",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setResetOnDisconnect" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setResetOnDisconnect" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setResetOnDisconnect(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getRefreshOnLogon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getRefreshOnLogon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getRefreshOnLogon" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->getRefreshOnLogon();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setRefreshOnLogon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setRefreshOnLogon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setRefreshOnLogon" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setRefreshOnLogon" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setRefreshOnLogon(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getMillisecondsInTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getMillisecondsInTimeStamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getMillisecondsInTimeStamp" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->getMillisecondsInTimeStamp();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setMillisecondsInTimeStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setMillisecondsInTimeStamp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setMillisecondsInTimeStamp" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setMillisecondsInTimeStamp" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setMillisecondsInTimeStamp(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getPersistMessages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getPersistMessages",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getPersistMessages" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (bool)(arg1)->getPersistMessages();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setPersistMessages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setPersistMessages",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setPersistMessages" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Session_setPersistMessages" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setPersistMessages(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_setResponder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  Responder *arg2 = (Responder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_setResponder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_setResponder" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Responder, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_setResponder" "', argument " "2"" of type '" "Responder *""'"); 
  }
  arg2 = reinterpret_cast< Responder * >(argp2);
  (arg1)->setResponder(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_send(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  FIX::Message *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_send",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_send" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_send" "', argument " "2"" of type '" "FIX::Message &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_send" "', argument " "2"" of type '" "FIX::Message &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  result = (bool)(arg1)->send(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_next__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_next" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  (arg1)->next();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_next__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Session_next",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_next" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_next" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_next" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Session_next" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->next((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_next__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_next",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_next" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_next" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_next" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->next((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_next__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  FIX::Message *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Session_next",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_next" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_next" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_next" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Session_next" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->next((FIX::Message const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_next__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  FIX::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Session_next",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_next" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Session_next" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Session_next" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  (arg1)->next((FIX::Message const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_next(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Session, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Session_next__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Session, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__Message, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Session_next__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Session, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Session_next__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Session, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__Message, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Session_next__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Session, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Session_next__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Session_next'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_disconnect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_disconnect",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_disconnect" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  (arg1)->disconnect();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getExpectedSenderNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getExpectedSenderNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getExpectedSenderNum" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (long)(arg1)->getExpectedSenderNum();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getExpectedTargetNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getExpectedTargetNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getExpectedTargetNum" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (long)(arg1)->getExpectedTargetNum();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getLog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  Log *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getLog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getLog" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (Log *)(arg1)->getLog();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Log, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Session_getStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Session *arg1 = (FIX::Session *) 0 ;
  MessageStore *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Session_getStore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Session, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Session_getStore" "', argument " "1"" of type '" "FIX::Session *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Session * >(argp1);
  result = (MessageStore *)(arg1)->getStore();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MessageStore, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Session_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Session, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_LogFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::LogFactory *arg1 = (FIX::LogFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LogFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__LogFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LogFactory" "', argument " "1"" of type '" "FIX::LogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::LogFactory * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFactory_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::LogFactory *arg1 = (FIX::LogFactory *) 0 ;
  FIX::Log *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LogFactory_create",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__LogFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogFactory_create" "', argument " "1"" of type '" "FIX::LogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::LogFactory * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (FIX::Log *)(arg1)->create();
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFactory_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::LogFactory *arg1 = (FIX::LogFactory *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  FIX::Log *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LogFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__LogFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogFactory_create" "', argument " "1"" of type '" "FIX::LogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::LogFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LogFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LogFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (FIX::Log *)(arg1)->create((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFactory_create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__LogFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LogFactory_create__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__LogFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LogFactory_create__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'LogFactory_create'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogFactory_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::LogFactory *arg1 = (FIX::LogFactory *) 0 ;
  FIX::Log *arg2 = (FIX::Log *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LogFactory_destroy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__LogFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogFactory_destroy" "', argument " "1"" of type '" "FIX::LogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::LogFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LogFactory_destroy" "', argument " "2"" of type '" "FIX::Log *""'"); 
  }
  arg2 = reinterpret_cast< FIX::Log * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->destroy(arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LogFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__LogFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScreenLogFactory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *arg1 = 0 ;
  FIX::ScreenLogFactory *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScreenLogFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionSettings,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScreenLogFactory" "', argument " "1"" of type '" "FIX::SessionSettings const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScreenLogFactory" "', argument " "1"" of type '" "FIX::SessionSettings const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionSettings * >(argp1);
  result = (FIX::ScreenLogFactory *)new FIX::ScreenLogFactory((FIX::SessionSettings const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ScreenLogFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenLogFactory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  FIX::ScreenLogFactory *result = 0 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ScreenLogFactory",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScreenLogFactory" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScreenLogFactory" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScreenLogFactory" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (FIX::ScreenLogFactory *)new FIX::ScreenLogFactory(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ScreenLogFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenLogFactory(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__SessionSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScreenLogFactory__SWIG_0(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ScreenLogFactory__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_ScreenLogFactory'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenLogFactory_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ScreenLogFactory *arg1 = (FIX::ScreenLogFactory *) 0 ;
  FIX::Log *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScreenLogFactory_create",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ScreenLogFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenLogFactory_create" "', argument " "1"" of type '" "FIX::ScreenLogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ScreenLogFactory * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (FIX::Log *)(arg1)->create();
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenLogFactory_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ScreenLogFactory *arg1 = (FIX::ScreenLogFactory *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  FIX::Log *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScreenLogFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ScreenLogFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenLogFactory_create" "', argument " "1"" of type '" "FIX::ScreenLogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ScreenLogFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScreenLogFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScreenLogFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (FIX::Log *)(arg1)->create((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenLogFactory_create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__ScreenLogFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ScreenLogFactory_create__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__ScreenLogFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScreenLogFactory_create__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'ScreenLogFactory_create'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenLogFactory_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ScreenLogFactory *arg1 = (FIX::ScreenLogFactory *) 0 ;
  FIX::Log *arg2 = (FIX::Log *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScreenLogFactory_destroy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ScreenLogFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenLogFactory_destroy" "', argument " "1"" of type '" "FIX::ScreenLogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ScreenLogFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScreenLogFactory_destroy" "', argument " "2"" of type '" "FIX::Log *""'"); 
  }
  arg2 = reinterpret_cast< FIX::Log * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->destroy(arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScreenLogFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ScreenLogFactory *arg1 = (FIX::ScreenLogFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScreenLogFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ScreenLogFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScreenLogFactory" "', argument " "1"" of type '" "FIX::ScreenLogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ScreenLogFactory * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScreenLogFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__ScreenLogFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Log(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Log *arg1 = (FIX::Log *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Log",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Log, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Log" "', argument " "1"" of type '" "FIX::Log *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Log * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Log_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Log *arg1 = (FIX::Log *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Log_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Log_clear" "', argument " "1"" of type '" "FIX::Log *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Log * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->clear();
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Log_onIncoming(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Log *arg1 = (FIX::Log *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Log_onIncoming",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Log_onIncoming" "', argument " "1"" of type '" "FIX::Log *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Log * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Log_onIncoming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Log_onIncoming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onIncoming((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Log_onOutgoing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Log *arg1 = (FIX::Log *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Log_onOutgoing",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Log_onOutgoing" "', argument " "1"" of type '" "FIX::Log *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Log * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Log_onOutgoing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Log_onOutgoing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onOutgoing((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Log_onEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Log *arg1 = (FIX::Log *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Log_onEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Log_onEvent" "', argument " "1"" of type '" "FIX::Log *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Log * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Log_onEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Log_onEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onEvent((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *Log_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Log, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScreenLog__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  bool arg3 ;
  FIX::ScreenLog *result = 0 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ScreenLog",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScreenLog" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScreenLog" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScreenLog" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (FIX::ScreenLog *)new FIX::ScreenLog(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ScreenLog, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenLog__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionID *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  FIX::ScreenLog *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ScreenLog",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScreenLog" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScreenLog" "', argument " "1"" of type '" "FIX::SessionID const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionID * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScreenLog" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScreenLog" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScreenLog" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (FIX::ScreenLog *)new FIX::ScreenLog((FIX::SessionID const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__ScreenLog, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScreenLog(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ScreenLog__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__SessionID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ScreenLog__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_ScreenLog'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenLog_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ScreenLog *arg1 = (FIX::ScreenLog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScreenLog_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ScreenLog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenLog_clear" "', argument " "1"" of type '" "FIX::ScreenLog *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ScreenLog * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->clear();
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenLog_onIncoming(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ScreenLog *arg1 = (FIX::ScreenLog *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScreenLog_onIncoming",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ScreenLog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenLog_onIncoming" "', argument " "1"" of type '" "FIX::ScreenLog *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ScreenLog * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScreenLog_onIncoming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScreenLog_onIncoming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onIncoming((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenLog_onOutgoing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ScreenLog *arg1 = (FIX::ScreenLog *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScreenLog_onOutgoing",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ScreenLog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenLog_onOutgoing" "', argument " "1"" of type '" "FIX::ScreenLog *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ScreenLog * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScreenLog_onOutgoing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScreenLog_onOutgoing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onOutgoing((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScreenLog_onEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ScreenLog *arg1 = (FIX::ScreenLog *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScreenLog_onEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ScreenLog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScreenLog_onEvent" "', argument " "1"" of type '" "FIX::ScreenLog *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ScreenLog * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScreenLog_onEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScreenLog_onEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onEvent((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScreenLog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::ScreenLog *arg1 = (FIX::ScreenLog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScreenLog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__ScreenLog, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScreenLog" "', argument " "1"" of type '" "FIX::ScreenLog *""'"); 
  }
  arg1 = reinterpret_cast< FIX::ScreenLog * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScreenLog_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__ScreenLog, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FileLogFactory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *arg1 = 0 ;
  FIX::FileLogFactory *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileLogFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionSettings,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileLogFactory" "', argument " "1"" of type '" "FIX::SessionSettings const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileLogFactory" "', argument " "1"" of type '" "FIX::SessionSettings const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionSettings * >(argp1);
  result = (FIX::FileLogFactory *)new FIX::FileLogFactory((FIX::SessionSettings const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FileLogFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileLogFactory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::FileLogFactory *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileLogFactory",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileLogFactory" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileLogFactory" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::FileLogFactory *)new FIX::FileLogFactory((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FileLogFactory, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileLogFactory(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__SessionSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileLogFactory__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileLogFactory__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_FileLogFactory'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileLogFactory_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileLogFactory *arg1 = (FIX::FileLogFactory *) 0 ;
  FIX::Log *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileLogFactory_create",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileLogFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLogFactory_create" "', argument " "1"" of type '" "FIX::FileLogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileLogFactory * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (FIX::Log *)(arg1)->create();
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileLogFactory_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileLogFactory *arg1 = (FIX::FileLogFactory *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  FIX::Log *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileLogFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileLogFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLogFactory_create" "', argument " "1"" of type '" "FIX::FileLogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileLogFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileLogFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileLogFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (FIX::Log *)(arg1)->create((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileLogFactory_create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FileLogFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FileLogFactory_create__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__FileLogFactory, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FileLogFactory_create__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'FileLogFactory_create'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileLogFactory_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileLogFactory *arg1 = (FIX::FileLogFactory *) 0 ;
  FIX::Log *arg2 = (FIX::Log *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileLogFactory_destroy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileLogFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLogFactory_destroy" "', argument " "1"" of type '" "FIX::FileLogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileLogFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FIX__Log, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileLogFactory_destroy" "', argument " "2"" of type '" "FIX::Log *""'"); 
  }
  arg2 = reinterpret_cast< FIX::Log * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->destroy(arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FileLogFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileLogFactory *arg1 = (FIX::FileLogFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FileLogFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileLogFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileLogFactory" "', argument " "1"" of type '" "FIX::FileLogFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileLogFactory * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FileLogFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__FileLogFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FileLog__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::FileLog *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileLog",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileLog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileLog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::FileLog *)new FIX::FileLog((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FileLog, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileLog__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::SessionID *arg2 = 0 ;
  FIX::FileLog *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FileLog",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileLog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileLog" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FileLog" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileLog" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  result = (FIX::FileLog *)new FIX::FileLog((std::string const &)*arg1,(FIX::SessionID const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FileLog, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileLog(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileLog__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FIX__SessionID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_FileLog__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_FileLog'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FileLog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileLog *arg1 = (FIX::FileLog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FileLog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileLog, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileLog" "', argument " "1"" of type '" "FIX::FileLog *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileLog * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileLog_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileLog *arg1 = (FIX::FileLog *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileLog_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileLog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLog_clear" "', argument " "1"" of type '" "FIX::FileLog *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileLog * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->clear();
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileLog_onIncoming(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileLog *arg1 = (FIX::FileLog *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileLog_onIncoming",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileLog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLog_onIncoming" "', argument " "1"" of type '" "FIX::FileLog *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileLog * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileLog_onIncoming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileLog_onIncoming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onIncoming((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileLog_onOutgoing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileLog *arg1 = (FIX::FileLog *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileLog_onOutgoing",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileLog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLog_onOutgoing" "', argument " "1"" of type '" "FIX::FileLog *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileLog * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileLog_onOutgoing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileLog_onOutgoing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onOutgoing((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileLog_onEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileLog *arg1 = (FIX::FileLog *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileLog_onEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileLog, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileLog_onEvent" "', argument " "1"" of type '" "FIX::FileLog *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileLog * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileLog_onEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileLog_onEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onEvent((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *FileLog_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__FileLog, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_MessageStoreFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreFactory *arg1 = (FIX::MessageStoreFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MessageStoreFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MessageStoreFactory" "', argument " "1"" of type '" "FIX::MessageStoreFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreFactory * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreFactory_create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreFactory *arg1 = (FIX::MessageStoreFactory *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  FIX::MessageStore *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MessageStoreFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreFactory_create" "', argument " "1"" of type '" "FIX::MessageStoreFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageStoreFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (FIX::MessageStore *)(arg1)->create((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreFactory_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreFactory *arg1 = (FIX::MessageStoreFactory *) 0 ;
  FIX::MessageStore *arg2 = (FIX::MessageStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MessageStoreFactory_destroy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreFactory_destroy" "', argument " "1"" of type '" "FIX::MessageStoreFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageStoreFactory_destroy" "', argument " "2"" of type '" "FIX::MessageStore *""'"); 
  }
  arg2 = reinterpret_cast< FIX::MessageStore * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->destroy(arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MessageStoreFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__MessageStoreFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MemoryStoreFactory_create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStoreFactory *arg1 = (FIX::MemoryStoreFactory *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  FIX::MessageStore *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MemoryStoreFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStoreFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStoreFactory_create" "', argument " "1"" of type '" "FIX::MemoryStoreFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStoreFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemoryStoreFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemoryStoreFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (FIX::MessageStore *)(arg1)->create((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStoreFactory_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStoreFactory *arg1 = (FIX::MemoryStoreFactory *) 0 ;
  FIX::MessageStore *arg2 = (FIX::MessageStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MemoryStoreFactory_destroy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStoreFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStoreFactory_destroy" "', argument " "1"" of type '" "FIX::MemoryStoreFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStoreFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemoryStoreFactory_destroy" "', argument " "2"" of type '" "FIX::MessageStore *""'"); 
  }
  arg2 = reinterpret_cast< FIX::MessageStore * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->destroy(arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MemoryStoreFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStoreFactory *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MemoryStoreFactory")) SWIG_fail;
  result = (FIX::MemoryStoreFactory *)new FIX::MemoryStoreFactory();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MemoryStoreFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MemoryStoreFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStoreFactory *arg1 = (FIX::MemoryStoreFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MemoryStoreFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStoreFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MemoryStoreFactory" "', argument " "1"" of type '" "FIX::MemoryStoreFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStoreFactory * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MemoryStoreFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__MemoryStoreFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_MessageStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MessageStore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MessageStore" "', argument " "1"" of type '" "FIX::MessageStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStore_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MessageStore_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStore_set" "', argument " "1"" of type '" "FIX::MessageStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MessageStore_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStore_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStore_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = (bool)(arg1)->set(arg2,(std::string const &)*arg3);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStore_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector<std::string > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MessageStore_get",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStore_get" "', argument " "1"" of type '" "FIX::MessageStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MessageStore_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MessageStore_get" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorTstd__string_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MessageStore_get" "', argument " "4"" of type '" "std::vector<std::string > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStore_get" "', argument " "4"" of type '" "std::vector<std::string > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector<std::string > * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      ((FIX::MessageStore const *)arg1)->get(arg2,arg3,*arg4);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStore_getNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MessageStore_getNextSenderMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStore_getNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = (int)((FIX::MessageStore const *)arg1)->getNextSenderMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStore_getNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MessageStore_getNextTargetMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStore_getNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = (int)((FIX::MessageStore const *)arg1)->getNextTargetMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStore_setNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MessageStore_setNextSenderMsgSeqNum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStore_setNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MessageStore_setNextSenderMsgSeqNum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->setNextSenderMsgSeqNum(arg2);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStore_setNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MessageStore_setNextTargetMsgSeqNum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStore_setNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MessageStore_setNextTargetMsgSeqNum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->setNextTargetMsgSeqNum(arg2);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStore_incrNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MessageStore_incrNextSenderMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStore_incrNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->incrNextSenderMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStore_incrNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MessageStore_incrNextTargetMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStore_incrNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->incrNextTargetMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStore_getCreationTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  UtcTimeStamp result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MessageStore_getCreationTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStore_getCreationTime" "', argument " "1"" of type '" "FIX::MessageStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = ((FIX::MessageStore const *)arg1)->getCreationTime();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new UtcTimeStamp(static_cast< const UtcTimeStamp& >(result))), SWIGTYPE_p_UtcTimeStamp, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStore_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MessageStore_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStore_reset" "', argument " "1"" of type '" "FIX::MessageStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->reset();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStore_refresh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MessageStore_refresh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStore_refresh" "', argument " "1"" of type '" "FIX::MessageStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->refresh();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MessageStore_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__MessageStore, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MemoryStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MemoryStore")) SWIG_fail;
  result = (FIX::MemoryStore *)new FIX::MemoryStore();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MemoryStore, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MemoryStore_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_set" "', argument " "1"" of type '" "FIX::MemoryStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MemoryStore_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MemoryStore_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemoryStore_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = (bool)(arg1)->set(arg2,(std::string const &)*arg3);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector<std::string > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MemoryStore_get",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_get" "', argument " "1"" of type '" "FIX::MemoryStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MemoryStore_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MemoryStore_get" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorTstd__string_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MemoryStore_get" "', argument " "4"" of type '" "std::vector<std::string > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemoryStore_get" "', argument " "4"" of type '" "std::vector<std::string > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector<std::string > * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      ((FIX::MemoryStore const *)arg1)->get(arg2,arg3,*arg4);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_getNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MemoryStore_getNextSenderMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_getNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::MemoryStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = (int)((FIX::MemoryStore const *)arg1)->getNextSenderMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_getNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MemoryStore_getNextTargetMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_getNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::MemoryStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = (int)((FIX::MemoryStore const *)arg1)->getNextTargetMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_setNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MemoryStore_setNextSenderMsgSeqNum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_setNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::MemoryStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MemoryStore_setNextSenderMsgSeqNum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->setNextSenderMsgSeqNum(arg2);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_setNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MemoryStore_setNextTargetMsgSeqNum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_setNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::MemoryStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MemoryStore_setNextTargetMsgSeqNum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->setNextTargetMsgSeqNum(arg2);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_incrNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MemoryStore_incrNextSenderMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_incrNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::MemoryStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->incrNextSenderMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_incrNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MemoryStore_incrNextTargetMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_incrNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::MemoryStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->incrNextTargetMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_setCreationTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  UtcTimeStamp *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MemoryStore_setCreationTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_setCreationTime" "', argument " "1"" of type '" "FIX::MemoryStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UtcTimeStamp,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MemoryStore_setCreationTime" "', argument " "2"" of type '" "UtcTimeStamp const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MemoryStore_setCreationTime" "', argument " "2"" of type '" "UtcTimeStamp const &""'"); 
  }
  arg2 = reinterpret_cast< UtcTimeStamp * >(argp2);
  try {
    (arg1)->setCreationTime((UtcTimeStamp const &)*arg2);
  }
  catch(FIX::IOException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_getCreationTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  UtcTimeStamp result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MemoryStore_getCreationTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_getCreationTime" "', argument " "1"" of type '" "FIX::MemoryStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = ((FIX::MemoryStore const *)arg1)->getCreationTime();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new UtcTimeStamp(static_cast< const UtcTimeStamp& >(result))), SWIGTYPE_p_UtcTimeStamp, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MemoryStore_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_reset" "', argument " "1"" of type '" "FIX::MemoryStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->reset();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MemoryStore_refresh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MemoryStore_refresh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MemoryStore_refresh" "', argument " "1"" of type '" "FIX::MemoryStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->refresh();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MemoryStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MemoryStore *arg1 = (FIX::MemoryStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MemoryStore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MemoryStore, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MemoryStore" "', argument " "1"" of type '" "FIX::MemoryStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MemoryStore * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MemoryStore_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__MemoryStore, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MessageStoreFactoryExceptionWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreFactory *arg1 = (FIX::MessageStoreFactory *) 0 ;
  FIX::MessageStoreFactoryExceptionWrapper *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MessageStoreFactoryExceptionWrapper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MessageStoreFactoryExceptionWrapper" "', argument " "1"" of type '" "FIX::MessageStoreFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreFactory * >(argp1);
  result = (FIX::MessageStoreFactoryExceptionWrapper *)new FIX::MessageStoreFactoryExceptionWrapper(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MessageStoreFactoryExceptionWrapper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreFactoryExceptionWrapper_create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreFactoryExceptionWrapper *arg1 = (FIX::MessageStoreFactoryExceptionWrapper *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  bool *arg3 = 0 ;
  FIX::ConfigError *arg4 = 0 ;
  FIX::MessageStore *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MessageStoreFactoryExceptionWrapper_create",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreFactoryExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreFactoryExceptionWrapper_create" "', argument " "1"" of type '" "FIX::MessageStoreFactoryExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreFactoryExceptionWrapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageStoreFactoryExceptionWrapper_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreFactoryExceptionWrapper_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStoreFactoryExceptionWrapper_create" "', argument " "3"" of type '" "bool &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreFactoryExceptionWrapper_create" "', argument " "3"" of type '" "bool &""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FIX__ConfigError,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MessageStoreFactoryExceptionWrapper_create" "', argument " "4"" of type '" "FIX::ConfigError &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreFactoryExceptionWrapper_create" "', argument " "4"" of type '" "FIX::ConfigError &""'"); 
  }
  arg4 = reinterpret_cast< FIX::ConfigError * >(argp4);
  result = (FIX::MessageStore *)(arg1)->create((FIX::SessionID const &)*arg2,*arg3,*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreFactoryExceptionWrapper_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreFactoryExceptionWrapper *arg1 = (FIX::MessageStoreFactoryExceptionWrapper *) 0 ;
  FIX::MessageStore *arg2 = (FIX::MessageStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MessageStoreFactoryExceptionWrapper_destroy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreFactoryExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreFactoryExceptionWrapper_destroy" "', argument " "1"" of type '" "FIX::MessageStoreFactoryExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreFactoryExceptionWrapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageStoreFactoryExceptionWrapper_destroy" "', argument " "2"" of type '" "FIX::MessageStore *""'"); 
  }
  arg2 = reinterpret_cast< FIX::MessageStore * >(argp2);
  (arg1)->destroy(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MessageStoreFactoryExceptionWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreFactoryExceptionWrapper *arg1 = (FIX::MessageStoreFactoryExceptionWrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MessageStoreFactoryExceptionWrapper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreFactoryExceptionWrapper, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MessageStoreFactoryExceptionWrapper" "', argument " "1"" of type '" "FIX::MessageStoreFactoryExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreFactoryExceptionWrapper * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MessageStoreFactoryExceptionWrapper_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__MessageStoreFactoryExceptionWrapper, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MessageStoreExceptionWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStore *arg1 = (FIX::MessageStore *) 0 ;
  FIX::MessageStoreExceptionWrapper *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MessageStoreExceptionWrapper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MessageStoreExceptionWrapper" "', argument " "1"" of type '" "FIX::MessageStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStore * >(argp1);
  result = (FIX::MessageStoreExceptionWrapper *)new FIX::MessageStoreExceptionWrapper(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MessageStoreExceptionWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MessageStoreExceptionWrapper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MessageStoreExceptionWrapper" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreExceptionWrapper_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  bool *arg4 = 0 ;
  FIX::IOException *arg5 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:MessageStoreExceptionWrapper_set",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreExceptionWrapper_set" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MessageStoreExceptionWrapper_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStoreExceptionWrapper_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MessageStoreExceptionWrapper_set" "', argument " "4"" of type '" "bool &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_set" "', argument " "4"" of type '" "bool &""'"); 
  }
  arg4 = reinterpret_cast< bool * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_FIX__IOException,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MessageStoreExceptionWrapper_set" "', argument " "5"" of type '" "FIX::IOException &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_set" "', argument " "5"" of type '" "FIX::IOException &""'"); 
  }
  arg5 = reinterpret_cast< FIX::IOException * >(argp5);
  result = (bool)(arg1)->set(arg2,(std::string const &)*arg3,*arg4,*arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreExceptionWrapper_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector<std::string > *arg4 = 0 ;
  bool *arg5 = 0 ;
  FIX::IOException *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:MessageStoreExceptionWrapper_get",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreExceptionWrapper_get" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MessageStoreExceptionWrapper_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MessageStoreExceptionWrapper_get" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorTstd__string_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MessageStoreExceptionWrapper_get" "', argument " "4"" of type '" "std::vector<std::string > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_get" "', argument " "4"" of type '" "std::vector<std::string > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector<std::string > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MessageStoreExceptionWrapper_get" "', argument " "5"" of type '" "bool &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_get" "', argument " "5"" of type '" "bool &""'"); 
  }
  arg5 = reinterpret_cast< bool * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_FIX__IOException,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "MessageStoreExceptionWrapper_get" "', argument " "6"" of type '" "FIX::IOException &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_get" "', argument " "6"" of type '" "FIX::IOException &""'"); 
  }
  arg6 = reinterpret_cast< FIX::IOException * >(argp6);
  ((FIX::MessageStoreExceptionWrapper const *)arg1)->get(arg2,arg3,*arg4,*arg5,*arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreExceptionWrapper_getNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  bool *arg2 = 0 ;
  FIX::IOException *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MessageStoreExceptionWrapper_getNextSenderMsgSeqNum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreExceptionWrapper_getNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageStoreExceptionWrapper_getNextSenderMsgSeqNum" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_getNextSenderMsgSeqNum" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__IOException,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStoreExceptionWrapper_getNextSenderMsgSeqNum" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_getNextSenderMsgSeqNum" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  arg3 = reinterpret_cast< FIX::IOException * >(argp3);
  result = (int)((FIX::MessageStoreExceptionWrapper const *)arg1)->getNextSenderMsgSeqNum(*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreExceptionWrapper_getNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  bool *arg2 = 0 ;
  FIX::IOException *arg3 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MessageStoreExceptionWrapper_getNextTargetMsgSeqNum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreExceptionWrapper_getNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageStoreExceptionWrapper_getNextTargetMsgSeqNum" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_getNextTargetMsgSeqNum" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__IOException,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStoreExceptionWrapper_getNextTargetMsgSeqNum" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_getNextTargetMsgSeqNum" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  arg3 = reinterpret_cast< FIX::IOException * >(argp3);
  result = (int)((FIX::MessageStoreExceptionWrapper const *)arg1)->getNextTargetMsgSeqNum(*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreExceptionWrapper_setNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  FIX::IOException *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MessageStoreExceptionWrapper_setNextSenderMsgSeqNum",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreExceptionWrapper_setNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MessageStoreExceptionWrapper_setNextSenderMsgSeqNum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStoreExceptionWrapper_setNextSenderMsgSeqNum" "', argument " "3"" of type '" "bool &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_setNextSenderMsgSeqNum" "', argument " "3"" of type '" "bool &""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FIX__IOException,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MessageStoreExceptionWrapper_setNextSenderMsgSeqNum" "', argument " "4"" of type '" "FIX::IOException &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_setNextSenderMsgSeqNum" "', argument " "4"" of type '" "FIX::IOException &""'"); 
  }
  arg4 = reinterpret_cast< FIX::IOException * >(argp4);
  (arg1)->setNextSenderMsgSeqNum(arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreExceptionWrapper_setNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  FIX::IOException *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MessageStoreExceptionWrapper_setNextTargetMsgSeqNum",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreExceptionWrapper_setNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MessageStoreExceptionWrapper_setNextTargetMsgSeqNum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStoreExceptionWrapper_setNextTargetMsgSeqNum" "', argument " "3"" of type '" "bool &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_setNextTargetMsgSeqNum" "', argument " "3"" of type '" "bool &""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FIX__IOException,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MessageStoreExceptionWrapper_setNextTargetMsgSeqNum" "', argument " "4"" of type '" "FIX::IOException &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_setNextTargetMsgSeqNum" "', argument " "4"" of type '" "FIX::IOException &""'"); 
  }
  arg4 = reinterpret_cast< FIX::IOException * >(argp4);
  (arg1)->setNextTargetMsgSeqNum(arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  bool *arg2 = 0 ;
  FIX::IOException *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__IOException,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  arg3 = reinterpret_cast< FIX::IOException * >(argp3);
  (arg1)->incrNextSenderMsgSeqNum(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  bool *arg2 = 0 ;
  FIX::IOException *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__IOException,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  arg3 = reinterpret_cast< FIX::IOException * >(argp3);
  (arg1)->incrNextTargetMsgSeqNum(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreExceptionWrapper_getCreationTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  bool *arg2 = 0 ;
  FIX::IOException *arg3 = 0 ;
  UtcTimeStamp result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MessageStoreExceptionWrapper_getCreationTime",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreExceptionWrapper_getCreationTime" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageStoreExceptionWrapper_getCreationTime" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_getCreationTime" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__IOException,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStoreExceptionWrapper_getCreationTime" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_getCreationTime" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  arg3 = reinterpret_cast< FIX::IOException * >(argp3);
  result = (arg1)->getCreationTime(*arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new UtcTimeStamp(static_cast< const UtcTimeStamp& >(result))), SWIGTYPE_p_UtcTimeStamp, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreExceptionWrapper_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  bool *arg2 = 0 ;
  FIX::IOException *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MessageStoreExceptionWrapper_reset",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreExceptionWrapper_reset" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageStoreExceptionWrapper_reset" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_reset" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__IOException,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStoreExceptionWrapper_reset" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_reset" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  arg3 = reinterpret_cast< FIX::IOException * >(argp3);
  (arg1)->reset(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MessageStoreExceptionWrapper_refresh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::MessageStoreExceptionWrapper *arg1 = (FIX::MessageStoreExceptionWrapper *) 0 ;
  bool *arg2 = 0 ;
  FIX::IOException *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MessageStoreExceptionWrapper_refresh",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MessageStoreExceptionWrapper_refresh" "', argument " "1"" of type '" "FIX::MessageStoreExceptionWrapper *""'"); 
  }
  arg1 = reinterpret_cast< FIX::MessageStoreExceptionWrapper * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MessageStoreExceptionWrapper_refresh" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_refresh" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__IOException,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MessageStoreExceptionWrapper_refresh" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MessageStoreExceptionWrapper_refresh" "', argument " "3"" of type '" "FIX::IOException &""'"); 
  }
  arg3 = reinterpret_cast< FIX::IOException * >(argp3);
  (arg1)->refresh(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MessageStoreExceptionWrapper_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__MessageStoreExceptionWrapper, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FileStoreFactory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SessionSettings *arg1 = 0 ;
  FIX::FileStoreFactory *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileStoreFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__SessionSettings,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileStoreFactory" "', argument " "1"" of type '" "FIX::SessionSettings const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileStoreFactory" "', argument " "1"" of type '" "FIX::SessionSettings const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::SessionSettings * >(argp1);
  result = (FIX::FileStoreFactory *)new FIX::FileStoreFactory((FIX::SessionSettings const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FileStoreFactory, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileStoreFactory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::FileStoreFactory *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileStoreFactory",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileStoreFactory" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileStoreFactory" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (FIX::FileStoreFactory *)new FIX::FileStoreFactory((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FileStoreFactory, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileStoreFactory(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__SessionSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileStoreFactory__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileStoreFactory__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_FileStoreFactory'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStoreFactory_create(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStoreFactory *arg1 = (FIX::FileStoreFactory *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  FIX::MessageStore *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileStoreFactory_create",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStoreFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStoreFactory_create" "', argument " "1"" of type '" "FIX::FileStoreFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStoreFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileStoreFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileStoreFactory_create" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    result = (FIX::MessageStore *)(arg1)->create((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStoreFactory_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStoreFactory *arg1 = (FIX::FileStoreFactory *) 0 ;
  FIX::MessageStore *arg2 = (FIX::MessageStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileStoreFactory_destroy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStoreFactory, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStoreFactory_destroy" "', argument " "1"" of type '" "FIX::FileStoreFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStoreFactory * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_FIX__MessageStore, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FileStoreFactory_destroy" "', argument " "2"" of type '" "FIX::MessageStore *""'"); 
  }
  arg2 = reinterpret_cast< FIX::MessageStore * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->destroy(arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FileStoreFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStoreFactory *arg1 = (FIX::FileStoreFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FileStoreFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStoreFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileStoreFactory" "', argument " "1"" of type '" "FIX::FileStoreFactory *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStoreFactory * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FileStoreFactory_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__FileStoreFactory, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FileStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  FIX::SessionID *arg2 = 0 ;
  FIX::FileStore *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FileStore",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FileStore" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FileStore" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FileStore" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  result = (FIX::FileStore *)new FIX::FileStore(arg1,(FIX::SessionID const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__FileStore, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FileStore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FileStore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileStore" "', argument " "1"" of type '" "FIX::FileStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStore_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FileStore_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStore_set" "', argument " "1"" of type '" "FIX::FileStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileStore_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FileStore_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileStore_set" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = (bool)(arg1)->set(arg2,(std::string const &)*arg3);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStore_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector<std::string > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FileStore_get",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStore_get" "', argument " "1"" of type '" "FIX::FileStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileStore_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FileStore_get" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorTstd__string_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FileStore_get" "', argument " "4"" of type '" "std::vector<std::string > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FileStore_get" "', argument " "4"" of type '" "std::vector<std::string > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector<std::string > * >(argp4);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      ((FIX::FileStore const *)arg1)->get(arg2,arg3,*arg4);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStore_getNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileStore_getNextSenderMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStore_getNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::FileStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = (int)((FIX::FileStore const *)arg1)->getNextSenderMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStore_getNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileStore_getNextTargetMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStore_getNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::FileStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = (int)((FIX::FileStore const *)arg1)->getNextTargetMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStore_setNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileStore_setNextSenderMsgSeqNum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStore_setNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::FileStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileStore_setNextSenderMsgSeqNum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->setNextSenderMsgSeqNum(arg2);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStore_setNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FileStore_setNextTargetMsgSeqNum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStore_setNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::FileStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FileStore_setNextTargetMsgSeqNum" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->setNextTargetMsgSeqNum(arg2);
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStore_incrNextSenderMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileStore_incrNextSenderMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStore_incrNextSenderMsgSeqNum" "', argument " "1"" of type '" "FIX::FileStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->incrNextSenderMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStore_incrNextTargetMsgSeqNum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileStore_incrNextTargetMsgSeqNum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStore_incrNextTargetMsgSeqNum" "', argument " "1"" of type '" "FIX::FileStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->incrNextTargetMsgSeqNum();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStore_getCreationTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  UtcTimeStamp result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileStore_getCreationTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStore_getCreationTime" "', argument " "1"" of type '" "FIX::FileStore const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      result = ((FIX::FileStore const *)arg1)->getCreationTime();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new UtcTimeStamp(static_cast< const UtcTimeStamp& >(result))), SWIGTYPE_p_UtcTimeStamp, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStore_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileStore_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStore_reset" "', argument " "1"" of type '" "FIX::FileStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->reset();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FileStore_refresh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::FileStore *arg1 = (FIX::FileStore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FileStore_refresh",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__FileStore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FileStore_refresh" "', argument " "1"" of type '" "FIX::FileStore *""'"); 
  }
  arg1 = reinterpret_cast< FIX::FileStore * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->refresh();
    }
    catch(FIX::IOException &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IOException(static_cast< const FIX::IOException& >(_e))),SWIGTYPE_p_FIX__IOException,SWIG_POINTER_OWN), "FIX::IOException", SWIGTYPE_p_FIX__IOException); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FileStore_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__FileStore, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Application(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = (FIX::Application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Application",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Application, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Application" "', argument " "1"" of type '" "FIX::Application *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Application_onCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = (FIX::Application *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Application_onCreate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Application_onCreate" "', argument " "1"" of type '" "FIX::Application *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Application_onCreate" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Application_onCreate" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onCreate((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Application_onLogon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = (FIX::Application *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Application_onLogon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Application_onLogon" "', argument " "1"" of type '" "FIX::Application *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Application_onLogon" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Application_onLogon" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onLogon((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Application_onLogout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = (FIX::Application *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Application_onLogout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Application_onLogout" "', argument " "1"" of type '" "FIX::Application *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Application_onLogout" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Application_onLogout" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onLogout((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Application_toAdmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = (FIX::Application *) 0 ;
  FIX::Message *arg2 = 0 ;
  FIX::SessionID *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Application_toAdmin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Application_toAdmin" "', argument " "1"" of type '" "FIX::Application *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Application_toAdmin" "', argument " "2"" of type '" "FIX::Message &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Application_toAdmin" "', argument " "2"" of type '" "FIX::Message &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Application_toAdmin" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Application_toAdmin" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionID * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->toAdmin(*arg2,(FIX::SessionID const &)*arg3);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Application_toApp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = (FIX::Application *) 0 ;
  FIX::Message *arg2 = 0 ;
  FIX::SessionID *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Application_toApp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Application_toApp" "', argument " "1"" of type '" "FIX::Application *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Application_toApp" "', argument " "2"" of type '" "FIX::Message &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Application_toApp" "', argument " "2"" of type '" "FIX::Message &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Application_toApp" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Application_toApp" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionID * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->toApp(*arg2,(FIX::SessionID const &)*arg3);
    }
    catch(FIX::DoNotSend &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::DoNotSend(static_cast< const FIX::DoNotSend& >(_e))),SWIGTYPE_p_FIX__DoNotSend,SWIG_POINTER_OWN), "FIX::DoNotSend", SWIGTYPE_p_FIX__DoNotSend); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Application_fromAdmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = (FIX::Application *) 0 ;
  FIX::Message *arg2 = 0 ;
  FIX::SessionID *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Application_fromAdmin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Application_fromAdmin" "', argument " "1"" of type '" "FIX::Application *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Application_fromAdmin" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Application_fromAdmin" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Application_fromAdmin" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Application_fromAdmin" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionID * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->fromAdmin((FIX::Message const &)*arg2,(FIX::SessionID const &)*arg3);
    }
    catch(FIX::FieldNotFound &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
    }
    catch(FIX::IncorrectDataFormat &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
    }
    catch(FIX::IncorrectTagValue &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectTagValue(static_cast< const FIX::IncorrectTagValue& >(_e))),SWIGTYPE_p_FIX__IncorrectTagValue,SWIG_POINTER_OWN), "FIX::IncorrectTagValue", SWIGTYPE_p_FIX__IncorrectTagValue); SWIG_fail;
    }
    catch(FIX::RejectLogon &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::RejectLogon(static_cast< const FIX::RejectLogon& >(_e))),SWIGTYPE_p_FIX__RejectLogon,SWIG_POINTER_OWN), "FIX::RejectLogon", SWIGTYPE_p_FIX__RejectLogon); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Application_fromApp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = (FIX::Application *) 0 ;
  FIX::Message *arg2 = 0 ;
  FIX::SessionID *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Application_fromApp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Application_fromApp" "', argument " "1"" of type '" "FIX::Application *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Application_fromApp" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Application_fromApp" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Application_fromApp" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Application_fromApp" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionID * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->fromApp((FIX::Message const &)*arg2,(FIX::SessionID const &)*arg3);
    }
    catch(FIX::FieldNotFound &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
    }
    catch(FIX::IncorrectDataFormat &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
    }
    catch(FIX::IncorrectTagValue &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectTagValue(static_cast< const FIX::IncorrectTagValue& >(_e))),SWIGTYPE_p_FIX__IncorrectTagValue,SWIG_POINTER_OWN), "FIX::IncorrectTagValue", SWIGTYPE_p_FIX__IncorrectTagValue); SWIG_fail;
    }
    catch(FIX::UnsupportedMessageType &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::UnsupportedMessageType(static_cast< const FIX::UnsupportedMessageType& >(_e))),SWIGTYPE_p_FIX__UnsupportedMessageType,SWIG_POINTER_OWN), "FIX::UnsupportedMessageType", SWIGTYPE_p_FIX__UnsupportedMessageType); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Application(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  FIX::Application *result = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Application",&obj0)) SWIG_fail;
  arg1 = obj0;
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (FIX::Application *)new SwigDirector_Application(arg1); 
  } else {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
    SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Application, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_Application(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = (FIX::Application *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_Application",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Application, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_Application" "', argument " "1"" of type '" "FIX::Application *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  {
    Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Application_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Application, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SynchronizedApplication(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = 0 ;
  FIX::SynchronizedApplication *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SynchronizedApplication",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Application,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SynchronizedApplication" "', argument " "1"" of type '" "FIX::Application &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SynchronizedApplication" "', argument " "1"" of type '" "FIX::Application &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  result = (FIX::SynchronizedApplication *)new FIX::SynchronizedApplication(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SynchronizedApplication, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_onCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizedApplication_onCreate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_onCreate" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SynchronizedApplication_onCreate" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_onCreate" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onCreate((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_onLogon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizedApplication_onLogon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_onLogon" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SynchronizedApplication_onLogon" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_onLogon" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onLogon((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_onLogout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizedApplication_onLogout",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_onLogout" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SynchronizedApplication_onLogout" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_onLogout" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onLogout((FIX::SessionID const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_toAdmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  FIX::Message *arg2 = 0 ;
  FIX::SessionID *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SynchronizedApplication_toAdmin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_toAdmin" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SynchronizedApplication_toAdmin" "', argument " "2"" of type '" "FIX::Message &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_toAdmin" "', argument " "2"" of type '" "FIX::Message &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SynchronizedApplication_toAdmin" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_toAdmin" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionID * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->toAdmin(*arg2,(FIX::SessionID const &)*arg3);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_toApp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  FIX::Message *arg2 = 0 ;
  FIX::SessionID *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SynchronizedApplication_toApp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_toApp" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SynchronizedApplication_toApp" "', argument " "2"" of type '" "FIX::Message &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_toApp" "', argument " "2"" of type '" "FIX::Message &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SynchronizedApplication_toApp" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_toApp" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionID * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->toApp(*arg2,(FIX::SessionID const &)*arg3);
    }
    catch(FIX::DoNotSend &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::DoNotSend(static_cast< const FIX::DoNotSend& >(_e))),SWIGTYPE_p_FIX__DoNotSend,SWIG_POINTER_OWN), "FIX::DoNotSend", SWIGTYPE_p_FIX__DoNotSend); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_fromAdmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  FIX::Message *arg2 = 0 ;
  FIX::SessionID *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SynchronizedApplication_fromAdmin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_fromAdmin" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SynchronizedApplication_fromAdmin" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_fromAdmin" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SynchronizedApplication_fromAdmin" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_fromAdmin" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionID * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->fromAdmin((FIX::Message const &)*arg2,(FIX::SessionID const &)*arg3);
    }
    catch(FIX::FieldNotFound &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
    }
    catch(FIX::IncorrectDataFormat &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
    }
    catch(FIX::IncorrectTagValue &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectTagValue(static_cast< const FIX::IncorrectTagValue& >(_e))),SWIGTYPE_p_FIX__IncorrectTagValue,SWIG_POINTER_OWN), "FIX::IncorrectTagValue", SWIGTYPE_p_FIX__IncorrectTagValue); SWIG_fail;
    }
    catch(FIX::RejectLogon &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::RejectLogon(static_cast< const FIX::RejectLogon& >(_e))),SWIGTYPE_p_FIX__RejectLogon,SWIG_POINTER_OWN), "FIX::RejectLogon", SWIGTYPE_p_FIX__RejectLogon); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_fromApp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  FIX::Message *arg2 = 0 ;
  FIX::SessionID *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SynchronizedApplication_fromApp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_fromApp" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SynchronizedApplication_fromApp" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_fromApp" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SynchronizedApplication_fromApp" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_fromApp" "', argument " "3"" of type '" "FIX::SessionID const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionID * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    try {
      (arg1)->fromApp((FIX::Message const &)*arg2,(FIX::SessionID const &)*arg3);
    }
    catch(FIX::FieldNotFound &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::FieldNotFound(static_cast< const FIX::FieldNotFound& >(_e))),SWIGTYPE_p_FIX__FieldNotFound,SWIG_POINTER_OWN), "FIX::FieldNotFound", SWIGTYPE_p_FIX__FieldNotFound); SWIG_fail;
    }
    catch(FIX::IncorrectDataFormat &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectDataFormat(static_cast< const FIX::IncorrectDataFormat& >(_e))),SWIGTYPE_p_FIX__IncorrectDataFormat,SWIG_POINTER_OWN), "FIX::IncorrectDataFormat", SWIGTYPE_p_FIX__IncorrectDataFormat); SWIG_fail;
    }
    catch(FIX::IncorrectTagValue &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::IncorrectTagValue(static_cast< const FIX::IncorrectTagValue& >(_e))),SWIGTYPE_p_FIX__IncorrectTagValue,SWIG_POINTER_OWN), "FIX::IncorrectTagValue", SWIGTYPE_p_FIX__IncorrectTagValue); SWIG_fail;
    }
    catch(FIX::UnsupportedMessageType &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::UnsupportedMessageType(static_cast< const FIX::UnsupportedMessageType& >(_e))),SWIGTYPE_p_FIX__UnsupportedMessageType,SWIG_POINTER_OWN), "FIX::UnsupportedMessageType", SWIGTYPE_p_FIX__UnsupportedMessageType); SWIG_fail;
    }
    
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_m_mutex_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  Mutex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizedApplication_m_mutex_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_m_mutex_set" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Mutex,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SynchronizedApplication_m_mutex_set" "', argument " "2"" of type '" "Mutex""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_m_mutex_set" "', argument " "2"" of type '" "Mutex""'");
    } else {
      Mutex * temp = reinterpret_cast< Mutex * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (arg1) (arg1)->m_mutex = arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_m_mutex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  Mutex result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizedApplication_m_mutex_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_m_mutex_get" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  result =  ((arg1)->m_mutex);
  resultobj = SWIG_NewPointerObj((new Mutex(static_cast< const Mutex& >(result))), SWIGTYPE_p_Mutex, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_app(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  FIX::Application *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizedApplication_app",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_app" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  {
    FIX::Application &_result_ref = (arg1)->app();
    result = (FIX::Application *) &_result_ref;
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Application, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_m_app_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  FIX::Application *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SynchronizedApplication_m_app_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_m_app_set" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Application,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SynchronizedApplication_m_app_set" "', argument " "2"" of type '" "FIX::Application &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SynchronizedApplication_m_app_set" "', argument " "2"" of type '" "FIX::Application &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Application * >(argp2);
  if (arg1) (arg1)->m_app = *arg2;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynchronizedApplication_m_app_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  FIX::Application *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SynchronizedApplication_m_app_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynchronizedApplication_m_app_get" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  {
    FIX::Application &_result_ref = (FIX::Application &) ((arg1)->m_app);
    result = (FIX::Application *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Application, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SynchronizedApplication(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SynchronizedApplication *arg1 = (FIX::SynchronizedApplication *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SynchronizedApplication",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SynchronizedApplication, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SynchronizedApplication" "', argument " "1"" of type '" "FIX::SynchronizedApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SynchronizedApplication * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SynchronizedApplication_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SynchronizedApplication, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NullApplication(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::NullApplication *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NullApplication")) SWIG_fail;
  result = (FIX::NullApplication *)new FIX::NullApplication();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__NullApplication, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NullApplication(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::NullApplication *arg1 = (FIX::NullApplication *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NullApplication",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__NullApplication, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NullApplication" "', argument " "1"" of type '" "FIX::NullApplication *""'"); 
  }
  arg1 = reinterpret_cast< FIX::NullApplication * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NullApplication_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__NullApplication, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Initiator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Initiator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Initiator" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Initiator_start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_start" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  try {
    (arg1)->start();
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::RuntimeError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::RuntimeError(static_cast< const FIX::RuntimeError& >(_e))),SWIGTYPE_p_FIX__RuntimeError,SWIG_POINTER_OWN), "FIX::RuntimeError", SWIGTYPE_p_FIX__RuntimeError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Initiator_block",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_block" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  try {
    (arg1)->block();
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::RuntimeError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::RuntimeError(static_cast< const FIX::RuntimeError& >(_e))),SWIGTYPE_p_FIX__RuntimeError,SWIG_POINTER_OWN), "FIX::RuntimeError", SWIGTYPE_p_FIX__RuntimeError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_poll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Initiator_poll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_poll" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  try {
    result = (bool)(arg1)->poll();
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::RuntimeError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::RuntimeError(static_cast< const FIX::RuntimeError& >(_e))),SWIGTYPE_p_FIX__RuntimeError,SWIG_POINTER_OWN), "FIX::RuntimeError", SWIGTYPE_p_FIX__RuntimeError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_stop__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Initiator_stop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_stop" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Initiator_stop" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->stop(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_stop__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Initiator_stop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_stop" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  (arg1)->stop();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_stop(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Initiator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Initiator_stop__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Initiator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Initiator_stop__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Initiator_stop'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_isLoggedOn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Initiator_isLoggedOn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_isLoggedOn" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  result = (bool)(arg1)->isLoggedOn();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_getSession(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  Responder *arg3 = 0 ;
  FIX::Session *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Initiator_getSession",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_getSession" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Initiator_getSession" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Initiator_getSession" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Responder,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Initiator_getSession" "', argument " "3"" of type '" "Responder &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Initiator_getSession" "', argument " "3"" of type '" "Responder &""'"); 
  }
  arg3 = reinterpret_cast< Responder * >(argp3);
  result = (FIX::Session *)(arg1)->getSession((FIX::SessionID const &)*arg2,*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Session, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_getSessions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  SwigValueWrapper<std::set<FIX::SessionID > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Initiator_getSessions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_getSessions" "', argument " "1"" of type '" "FIX::Initiator const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  result = ((FIX::Initiator const *)arg1)->getSessions();
  resultobj = SWIG_NewPointerObj((new std::set<FIX::SessionID >(static_cast< const std::set<FIX::SessionID >& >(result))), SWIGTYPE_p_std__setTFIX__SessionID_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Initiator_has",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_has" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Initiator_has" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Initiator_has" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  result = (bool)(arg1)->has((FIX::SessionID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_isStopped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Initiator_isStopped",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_isStopped" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  result = (bool)(arg1)->isStopped();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_getApplication(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  FIX::Application *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Initiator_getApplication",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_getApplication" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  {
    FIX::Application &_result_ref = (arg1)->getApplication();
    result = (FIX::Application *) &_result_ref;
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Application, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_getMessageStoreFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  FIX::MessageStoreFactory *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Initiator_getMessageStoreFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_getMessageStoreFactory" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  {
    FIX::MessageStoreFactory &_result_ref = (arg1)->getMessageStoreFactory();
    result = (FIX::MessageStoreFactory *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MessageStoreFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_onEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Initiator_onEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_onEvent" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Initiator_onEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Initiator_onEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onEvent((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_onIncoming(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Initiator_onIncoming",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_onIncoming" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Initiator_onIncoming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Initiator_onIncoming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onIncoming((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_onOutgoing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Initiator_onOutgoing",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_onOutgoing" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Initiator_onOutgoing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Initiator_onOutgoing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onOutgoing((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Initiator_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Initiator *arg1 = (FIX::Initiator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Initiator_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Initiator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Initiator_clear" "', argument " "1"" of type '" "FIX::Initiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Initiator * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->clear();
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Initiator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Initiator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SocketInitiatorBase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = 0 ;
  FIX::MessageStoreFactory *arg2 = 0 ;
  FIX::SessionSettings *arg3 = 0 ;
  FIX::SocketInitiator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SocketInitiatorBase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Application,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SocketInitiatorBase" "', argument " "1"" of type '" "FIX::Application &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketInitiatorBase" "', argument " "1"" of type '" "FIX::Application &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__MessageStoreFactory,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SocketInitiatorBase" "', argument " "2"" of type '" "FIX::MessageStoreFactory &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketInitiatorBase" "', argument " "2"" of type '" "FIX::MessageStoreFactory &""'"); 
  }
  arg2 = reinterpret_cast< FIX::MessageStoreFactory * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionSettings,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SocketInitiatorBase" "', argument " "3"" of type '" "FIX::SessionSettings const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketInitiatorBase" "', argument " "3"" of type '" "FIX::SessionSettings const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionSettings * >(argp3);
  try {
    result = (FIX::SocketInitiator *)new FIX::SocketInitiator(*arg1,*arg2,(FIX::SessionSettings const &)*arg3);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketInitiator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketInitiatorBase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = 0 ;
  FIX::MessageStoreFactory *arg2 = 0 ;
  FIX::SessionSettings *arg3 = 0 ;
  FIX::LogFactory *arg4 = 0 ;
  FIX::SocketInitiator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SocketInitiatorBase",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Application,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SocketInitiatorBase" "', argument " "1"" of type '" "FIX::Application &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketInitiatorBase" "', argument " "1"" of type '" "FIX::Application &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__MessageStoreFactory,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SocketInitiatorBase" "', argument " "2"" of type '" "FIX::MessageStoreFactory &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketInitiatorBase" "', argument " "2"" of type '" "FIX::MessageStoreFactory &""'"); 
  }
  arg2 = reinterpret_cast< FIX::MessageStoreFactory * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionSettings,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SocketInitiatorBase" "', argument " "3"" of type '" "FIX::SessionSettings const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketInitiatorBase" "', argument " "3"" of type '" "FIX::SessionSettings const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionSettings * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FIX__LogFactory,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SocketInitiatorBase" "', argument " "4"" of type '" "FIX::LogFactory &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketInitiatorBase" "', argument " "4"" of type '" "FIX::LogFactory &""'"); 
  }
  arg4 = reinterpret_cast< FIX::LogFactory * >(argp4);
  try {
    result = (FIX::SocketInitiator *)new FIX::SocketInitiator(*arg1,*arg2,(FIX::SessionSettings const &)*arg3,*arg4);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketInitiator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketInitiatorBase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Application, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FIX__MessageStoreFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FIX__SessionSettings, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SocketInitiatorBase__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Application, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FIX__MessageStoreFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FIX__SessionSettings, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_FIX__LogFactory, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_SocketInitiatorBase__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SocketInitiatorBase'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SocketInitiatorBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketInitiator *arg1 = (FIX::SocketInitiator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SocketInitiatorBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SocketInitiator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SocketInitiatorBase" "', argument " "1"" of type '" "FIX::SocketInitiator *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SocketInitiator * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SocketInitiatorBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SocketInitiator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_Acceptor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Acceptor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Acceptor" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Acceptor_start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_start" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  try {
    (arg1)->start();
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::RuntimeError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::RuntimeError(static_cast< const FIX::RuntimeError& >(_e))),SWIGTYPE_p_FIX__RuntimeError,SWIG_POINTER_OWN), "FIX::RuntimeError", SWIGTYPE_p_FIX__RuntimeError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Acceptor_block",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_block" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  try {
    (arg1)->block();
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::RuntimeError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::RuntimeError(static_cast< const FIX::RuntimeError& >(_e))),SWIGTYPE_p_FIX__RuntimeError,SWIG_POINTER_OWN), "FIX::RuntimeError", SWIGTYPE_p_FIX__RuntimeError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_poll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Acceptor_poll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_poll" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  try {
    result = (bool)(arg1)->poll();
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  catch(FIX::RuntimeError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::RuntimeError(static_cast< const FIX::RuntimeError& >(_e))),SWIGTYPE_p_FIX__RuntimeError,SWIG_POINTER_OWN), "FIX::RuntimeError", SWIGTYPE_p_FIX__RuntimeError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_stop__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Acceptor_stop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_stop" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Acceptor_stop" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->stop(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_stop__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Acceptor_stop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_stop" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  (arg1)->stop();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_stop(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Acceptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Acceptor_stop__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Acceptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Acceptor_stop__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'Acceptor_stop'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_isLoggedOn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Acceptor_isLoggedOn",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_isLoggedOn" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  result = (bool)(arg1)->isLoggedOn();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_getSession(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  std::string *arg2 = 0 ;
  Responder *arg3 = 0 ;
  FIX::Session *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Acceptor_getSession",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_getSession" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Acceptor_getSession" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Acceptor_getSession" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Responder,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Acceptor_getSession" "', argument " "3"" of type '" "Responder &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Acceptor_getSession" "', argument " "3"" of type '" "Responder &""'"); 
  }
  arg3 = reinterpret_cast< Responder * >(argp3);
  result = (FIX::Session *)(arg1)->getSession((std::string const &)*arg2,*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Session, 0 |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_getSessions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  SwigValueWrapper<std::set<FIX::SessionID > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Acceptor_getSessions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_getSessions" "', argument " "1"" of type '" "FIX::Acceptor const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  result = ((FIX::Acceptor const *)arg1)->getSessions();
  resultobj = SWIG_NewPointerObj((new std::set<FIX::SessionID >(static_cast< const std::set<FIX::SessionID >& >(result))), SWIGTYPE_p_std__setTFIX__SessionID_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_has(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  FIX::SessionID *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Acceptor_has",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_has" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__SessionID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Acceptor_has" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Acceptor_has" "', argument " "2"" of type '" "FIX::SessionID const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::SessionID * >(argp2);
  result = (bool)(arg1)->has((FIX::SessionID const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_isStopped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Acceptor_isStopped",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_isStopped" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  result = (bool)(arg1)->isStopped();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_getApplication(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  FIX::Application *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Acceptor_getApplication",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_getApplication" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  {
    FIX::Application &_result_ref = (arg1)->getApplication();
    result = (FIX::Application *) &_result_ref;
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__Application, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_getMessageStoreFactory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  FIX::MessageStoreFactory *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Acceptor_getMessageStoreFactory",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_getMessageStoreFactory" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  {
    FIX::MessageStoreFactory &_result_ref = (arg1)->getMessageStoreFactory();
    result = (FIX::MessageStoreFactory *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__MessageStoreFactory, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_onEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Acceptor_onEvent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_onEvent" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Acceptor_onEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Acceptor_onEvent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onEvent((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_onIncoming(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Acceptor_onIncoming",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_onIncoming" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Acceptor_onIncoming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Acceptor_onIncoming" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onIncoming((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_onOutgoing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Acceptor_onOutgoing",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_onOutgoing" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Acceptor_onOutgoing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Acceptor_onOutgoing" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->onOutgoing((std::string const &)*arg2);
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Acceptor_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Acceptor *arg1 = (FIX::Acceptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Acceptor_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__Acceptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Acceptor_clear" "', argument " "1"" of type '" "FIX::Acceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::Acceptor * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
  try {
    Swig::UnknownExceptionHandler dh;
    (arg1)->clear();
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Acceptor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__Acceptor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SocketAcceptorBase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = 0 ;
  FIX::MessageStoreFactory *arg2 = 0 ;
  FIX::SessionSettings *arg3 = 0 ;
  FIX::SocketAcceptor *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SocketAcceptorBase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Application,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SocketAcceptorBase" "', argument " "1"" of type '" "FIX::Application &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketAcceptorBase" "', argument " "1"" of type '" "FIX::Application &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__MessageStoreFactory,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SocketAcceptorBase" "', argument " "2"" of type '" "FIX::MessageStoreFactory &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketAcceptorBase" "', argument " "2"" of type '" "FIX::MessageStoreFactory &""'"); 
  }
  arg2 = reinterpret_cast< FIX::MessageStoreFactory * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionSettings,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SocketAcceptorBase" "', argument " "3"" of type '" "FIX::SessionSettings const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketAcceptorBase" "', argument " "3"" of type '" "FIX::SessionSettings const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionSettings * >(argp3);
  try {
    result = (FIX::SocketAcceptor *)new FIX::SocketAcceptor(*arg1,*arg2,(FIX::SessionSettings const &)*arg3);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketAcceptor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketAcceptorBase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::Application *arg1 = 0 ;
  FIX::MessageStoreFactory *arg2 = 0 ;
  FIX::SessionSettings *arg3 = 0 ;
  FIX::LogFactory *arg4 = 0 ;
  FIX::SocketAcceptor *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SocketAcceptorBase",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__Application,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SocketAcceptorBase" "', argument " "1"" of type '" "FIX::Application &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketAcceptorBase" "', argument " "1"" of type '" "FIX::Application &""'"); 
  }
  arg1 = reinterpret_cast< FIX::Application * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__MessageStoreFactory,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SocketAcceptorBase" "', argument " "2"" of type '" "FIX::MessageStoreFactory &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketAcceptorBase" "', argument " "2"" of type '" "FIX::MessageStoreFactory &""'"); 
  }
  arg2 = reinterpret_cast< FIX::MessageStoreFactory * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FIX__SessionSettings,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SocketAcceptorBase" "', argument " "3"" of type '" "FIX::SessionSettings const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketAcceptorBase" "', argument " "3"" of type '" "FIX::SessionSettings const &""'"); 
  }
  arg3 = reinterpret_cast< FIX::SessionSettings * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_FIX__LogFactory,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SocketAcceptorBase" "', argument " "4"" of type '" "FIX::LogFactory &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SocketAcceptorBase" "', argument " "4"" of type '" "FIX::LogFactory &""'"); 
  }
  arg4 = reinterpret_cast< FIX::LogFactory * >(argp4);
  try {
    result = (FIX::SocketAcceptor *)new FIX::SocketAcceptor(*arg1,*arg2,(FIX::SessionSettings const &)*arg3,*arg4);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__SocketAcceptor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SocketAcceptorBase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Application, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FIX__MessageStoreFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FIX__SessionSettings, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SocketAcceptorBase__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FIX__Application, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FIX__MessageStoreFactory, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_FIX__SessionSettings, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_FIX__LogFactory, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_SocketAcceptorBase__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_SocketAcceptorBase'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SocketAcceptorBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::SocketAcceptor *arg1 = (FIX::SocketAcceptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SocketAcceptorBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__SocketAcceptor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SocketAcceptorBase" "', argument " "1"" of type '" "FIX::SocketAcceptor *""'"); 
  }
  arg1 = reinterpret_cast< FIX::SocketAcceptor * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SocketAcceptorBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__SocketAcceptor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DataDictionary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DataDictionary")) SWIG_fail;
  result = (FIX::DataDictionary *)new FIX::DataDictionary();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DataDictionary, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataDictionary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = 0 ;
  FIX::DataDictionary *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DataDictionary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FIX__DataDictionary,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataDictionary" "', argument " "1"" of type '" "FIX::DataDictionary const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataDictionary" "', argument " "1"" of type '" "FIX::DataDictionary const &""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  result = (FIX::DataDictionary *)new FIX::DataDictionary((FIX::DataDictionary const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DataDictionary, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataDictionary__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istream *arg1 = 0 ;
  FIX::DataDictionary *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DataDictionary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataDictionary" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataDictionary" "', argument " "1"" of type '" "std::istream &""'"); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  try {
    result = (FIX::DataDictionary *)new FIX::DataDictionary(*arg1);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DataDictionary, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataDictionary__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  FIX::DataDictionary *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DataDictionary",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataDictionary" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataDictionary" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  try {
    result = (FIX::DataDictionary *)new FIX::DataDictionary((std::string const &)*arg1);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FIX__DataDictionary, SWIG_POINTER_NEW |  0 );
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg1->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DataDictionary(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DataDictionary__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FIX__DataDictionary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DataDictionary__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DataDictionary__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DataDictionary__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"No matching function for overloaded 'new_DataDictionary'");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DataDictionary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DataDictionary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataDictionary" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  delete arg1;
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_readFromURL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_readFromURL",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_readFromURL" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_readFromURL" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_readFromURL" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    (arg1)->readFromURL((std::string const &)*arg2);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_readFromDocument(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  DOMDocumentPtr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_readFromDocument",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_readFromDocument" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DOMDocumentPtr,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_readFromDocument" "', argument " "2"" of type '" "DOMDocumentPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_readFromDocument" "', argument " "2"" of type '" "DOMDocumentPtr""'");
    } else {
      DOMDocumentPtr * temp = reinterpret_cast< DOMDocumentPtr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  try {
    (arg1)->readFromDocument(arg2);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_readFromStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::istream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_readFromStream",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_readFromStream" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_readFromStream" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_readFromStream" "', argument " "2"" of type '" "std::istream &""'"); 
  }
  arg2 = reinterpret_cast< std::istream * >(argp2);
  try {
    (arg1)->readFromStream(*arg2);
  }
  catch(FIX::ConfigError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::ConfigError(static_cast< const FIX::ConfigError& >(_e))),SWIGTYPE_p_FIX__ConfigError,SWIG_POINTER_OWN), "FIX::ConfigError", SWIGTYPE_p_FIX__ConfigError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_getOrderedFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataDictionary_getOrderedFields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_getOrderedFields" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  result = (int *)((FIX::DataDictionary const *)arg1)->getOrderedFields();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_setVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_setVersion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_setVersion" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_setVersion" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_setVersion" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setVersion((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_getVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataDictionary_getVersion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_getVersion" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  result = ((FIX::DataDictionary const *)arg1)->getVersion();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_addField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_addField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_addField" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_addField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->addField(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_addFieldName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_addFieldName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_addFieldName" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_addFieldName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataDictionary_addFieldName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_addFieldName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->addFieldName(arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_getFieldName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_getFieldName",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_getFieldName" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_getFieldName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    temp3 = std::string((char*)PyString_AsString(obj2));
    arg3 = &temp3;
  }
  result = (bool)((FIX::DataDictionary const *)arg1)->getFieldName(arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_getFieldTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string arg2 ;
  int *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_getFieldTag",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_getFieldTag" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DataDictionary_getFieldTag" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_AsVal_int(obj2, &temp3);
    arg3 = &temp3;
  }
  result = (bool)((FIX::DataDictionary const *)arg1)->getFieldTag(arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("int &") == "int &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyInt_FromLong(*arg3) );
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_addValueName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DataDictionary_addValueName",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_addValueName" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_addValueName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataDictionary_addValueName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_addValueName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataDictionary_addValueName" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_addValueName" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->addValueName(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg4->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_getValueName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::string temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DataDictionary_getValueName",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_getValueName" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_getValueName" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataDictionary_getValueName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_getValueName" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    temp4 = std::string((char*)PyString_AsString(obj3));
    arg4 = &temp4;
  }
  result = (bool)((FIX::DataDictionary const *)arg1)->getValueName(arg2,(std::string const &)*arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  {
    if( std::string("std::string &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg4->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_isField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_isField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_isField" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_isField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((FIX::DataDictionary const *)arg1)->isField(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_addMsgType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_addMsgType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_addMsgType" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_addMsgType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_addMsgType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->addMsgType((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_isMsgType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_isMsgType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_isMsgType" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_isMsgType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_isMsgType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((FIX::DataDictionary const *)arg1)->isMsgType((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_addMsgField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_addMsgField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_addMsgField" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_addMsgField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_addMsgField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataDictionary_addMsgField" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->addMsgField((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_isMsgField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_isMsgField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_isMsgField" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_isMsgField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_isMsgField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataDictionary_isMsgField" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((FIX::DataDictionary const *)arg1)->isMsgField((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_addHeaderField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_addHeaderField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_addHeaderField" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_addHeaderField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataDictionary_addHeaderField" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->addHeaderField(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_isHeaderField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_isHeaderField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_isHeaderField" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_isHeaderField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((FIX::DataDictionary const *)arg1)->isHeaderField(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_addTrailerField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_addTrailerField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_addTrailerField" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_addTrailerField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataDictionary_addTrailerField" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->addTrailerField(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_isTrailerField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_isTrailerField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_isTrailerField" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_isTrailerField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((FIX::DataDictionary const *)arg1)->isTrailerField(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_addFieldType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  TYPE::Type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_addFieldType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_addFieldType" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_addFieldType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_TYPE__Type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataDictionary_addFieldType" "', argument " "3"" of type '" "TYPE::Type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_addFieldType" "', argument " "3"" of type '" "TYPE::Type""'");
    } else {
      TYPE::Type * temp = reinterpret_cast< TYPE::Type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->addFieldType(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_getFieldType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  TYPE::Type *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_getFieldType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_getFieldType" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_getFieldType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_TYPE__Type,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataDictionary_getFieldType" "', argument " "3"" of type '" "TYPE::Type &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_getFieldType" "', argument " "3"" of type '" "TYPE::Type &""'"); 
  }
  arg3 = reinterpret_cast< TYPE::Type * >(argp3);
  result = (bool)((FIX::DataDictionary const *)arg1)->getFieldType(arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_addRequiredField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_addRequiredField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_addRequiredField" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_addRequiredField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_addRequiredField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataDictionary_addRequiredField" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->addRequiredField((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_isRequiredField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_isRequiredField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_isRequiredField" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_isRequiredField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_isRequiredField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataDictionary_isRequiredField" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((FIX::DataDictionary const *)arg1)->isRequiredField((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_addFieldValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_addFieldValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_addFieldValue" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_addFieldValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataDictionary_addFieldValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_addFieldValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->addFieldValue(arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_hasFieldValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_hasFieldValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_hasFieldValue" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_hasFieldValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((FIX::DataDictionary const *)arg1)->hasFieldValue(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_isFieldValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_isFieldValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_isFieldValue" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_isFieldValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataDictionary_isFieldValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_isFieldValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)((FIX::DataDictionary const *)arg1)->isFieldValue(arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg3->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_addGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  FIX::DataDictionary *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DataDictionary_addGroup",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_addGroup" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_addGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_addGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataDictionary_addGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DataDictionary_addGroup" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_FIX__DataDictionary,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DataDictionary_addGroup" "', argument " "5"" of type '" "FIX::DataDictionary const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_addGroup" "', argument " "5"" of type '" "FIX::DataDictionary const &""'"); 
  }
  arg5 = reinterpret_cast< FIX::DataDictionary * >(argp5);
  (arg1)->addGroup((std::string const &)*arg2,arg3,arg4,(FIX::DataDictionary const &)*arg5);
  resultobj = SWIG_Py_Void();
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_isGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DataDictionary_isGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_isGroup" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_isGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_isGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataDictionary_isGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (bool)((FIX::DataDictionary const *)arg1)->isGroup((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_getGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int *arg4 = 0 ;
  FIX::DataDictionary **arg5 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int temp4 ;
  FIX::DataDictionary *temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DataDictionary_getGroup",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_getGroup" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_getGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_getGroup" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataDictionary_getGroup" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    SWIG_AsVal_int(obj3, &temp4);
    arg4 = &temp4;
  }
  {
    arg5 = new FIX::DataDictionary*[1];
    *arg5 = temp5;
  }
  result = (bool)((FIX::DataDictionary const *)arg1)->getGroup((std::string const &)*arg2,arg3,*arg4,(FIX::DataDictionary const *&)*arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    if( std::string("std::string const &") == "std::string &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyString_FromString(arg2->c_str()) );
    }
  }
  {
    if( std::string("int &") == "int &" )
    {
      if( !PyDict_Check(resultobj) )
      resultobj = PyDict_New();
      PyDict_SetItem( resultobj, PyInt_FromLong(PyDict_Size(resultobj)), PyInt_FromLong(*arg4) );
    }
  }
  {
    void* argp;
    FIX::DataDictionary* pDD = 0;
    int res = SWIG_ConvertPtr(obj4, &argp, SWIGTYPE_p_FIX__DataDictionary, 0 );
    pDD = reinterpret_cast< FIX::DataDictionary * >(argp);
    *pDD = *(*arg5);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_isDataField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_isDataField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_isDataField" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_isDataField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((FIX::DataDictionary const *)arg1)->isDataField(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_isMultipleValueStringField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_isMultipleValueStringField",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_isMultipleValueStringField" "', argument " "1"" of type '" "FIX::DataDictionary const *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_isMultipleValueStringField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((FIX::DataDictionary const *)arg1)->isMultipleValueStringField(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_checkFieldsOutOfOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_checkFieldsOutOfOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_checkFieldsOutOfOrder" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_checkFieldsOutOfOrder" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->checkFieldsOutOfOrder(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_checkFieldsHaveValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_checkFieldsHaveValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_checkFieldsHaveValues" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_checkFieldsHaveValues" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->checkFieldsHaveValues(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_checkUserDefinedFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_checkUserDefinedFields",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_checkUserDefinedFields" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDictionary_checkUserDefinedFields" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->checkUserDefinedFields(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDictionary_validate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FIX::DataDictionary *arg1 = (FIX::DataDictionary *) 0 ;
  FIX::Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataDictionary_validate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FIX__DataDictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDictionary_validate" "', argument " "1"" of type '" "FIX::DataDictionary *""'"); 
  }
  arg1 = reinterpret_cast< FIX::DataDictionary * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FIX__Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataDictionary_validate" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataDictionary_validate" "', argument " "2"" of type '" "FIX::Message const &""'"); 
  }
  arg2 = reinterpret_cast< FIX::Message * >(argp2);
  try {
    (arg1)->validate((FIX::Message const &)*arg2);
  }
  catch(FIX::Exception &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FIX::Exception(static_cast< const FIX::Exception& >(_e))),SWIGTYPE_p_FIX__Exception,SWIG_POINTER_OWN), "FIX::Exception", SWIGTYPE_p_FIX__Exception); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DataDictionary_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O|swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FIX__DataDictionary, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"new_IntArray", _wrap_new_IntArray, METH_VARARGS, NULL},
	 { (char *)"delete_IntArray", _wrap_delete_IntArray, METH_VARARGS, NULL},
	 { (char *)"IntArray___getitem__", _wrap_IntArray___getitem__, METH_VARARGS, NULL},
	 { (char *)"IntArray___setitem__", _wrap_IntArray___setitem__, METH_VARARGS, NULL},
	 { (char *)"IntArray_cast", _wrap_IntArray_cast, METH_VARARGS, NULL},
	 { (char *)"IntArray_frompointer", _wrap_IntArray_frompointer, METH_VARARGS, NULL},
	 { (char *)"IntArray_swigregister", IntArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Exception", _wrap_new_Exception, METH_VARARGS, NULL},
	 { (char *)"delete_Exception", _wrap_delete_Exception, METH_VARARGS, NULL},
	 { (char *)"Exception_type_set", _wrap_Exception_type_set, METH_VARARGS, NULL},
	 { (char *)"Exception_type_get", _wrap_Exception_type_get, METH_VARARGS, NULL},
	 { (char *)"Exception_detail_set", _wrap_Exception_detail_set, METH_VARARGS, NULL},
	 { (char *)"Exception_detail_get", _wrap_Exception_detail_get, METH_VARARGS, NULL},
	 { (char *)"Exception___str__", _wrap_Exception___str__, METH_VARARGS, NULL},
	 { (char *)"Exception_swigregister", Exception_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FieldNotFound", _wrap_new_FieldNotFound, METH_VARARGS, NULL},
	 { (char *)"FieldNotFound_field_set", _wrap_FieldNotFound_field_set, METH_VARARGS, NULL},
	 { (char *)"FieldNotFound_field_get", _wrap_FieldNotFound_field_get, METH_VARARGS, NULL},
	 { (char *)"delete_FieldNotFound", _wrap_delete_FieldNotFound, METH_VARARGS, NULL},
	 { (char *)"FieldNotFound_swigregister", FieldNotFound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FieldConvertError", _wrap_new_FieldConvertError, METH_VARARGS, NULL},
	 { (char *)"delete_FieldConvertError", _wrap_delete_FieldConvertError, METH_VARARGS, NULL},
	 { (char *)"FieldConvertError_swigregister", FieldConvertError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MessageParseError", _wrap_new_MessageParseError, METH_VARARGS, NULL},
	 { (char *)"delete_MessageParseError", _wrap_delete_MessageParseError, METH_VARARGS, NULL},
	 { (char *)"MessageParseError_swigregister", MessageParseError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidMessage", _wrap_new_InvalidMessage, METH_VARARGS, NULL},
	 { (char *)"delete_InvalidMessage", _wrap_delete_InvalidMessage, METH_VARARGS, NULL},
	 { (char *)"InvalidMessage_swigregister", InvalidMessage_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ConfigError", _wrap_new_ConfigError, METH_VARARGS, NULL},
	 { (char *)"delete_ConfigError", _wrap_delete_ConfigError, METH_VARARGS, NULL},
	 { (char *)"ConfigError_swigregister", ConfigError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RuntimeError", _wrap_new_RuntimeError, METH_VARARGS, NULL},
	 { (char *)"delete_RuntimeError", _wrap_delete_RuntimeError, METH_VARARGS, NULL},
	 { (char *)"RuntimeError_swigregister", RuntimeError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidTagNumber", _wrap_new_InvalidTagNumber, METH_VARARGS, NULL},
	 { (char *)"InvalidTagNumber_field_set", _wrap_InvalidTagNumber_field_set, METH_VARARGS, NULL},
	 { (char *)"InvalidTagNumber_field_get", _wrap_InvalidTagNumber_field_get, METH_VARARGS, NULL},
	 { (char *)"delete_InvalidTagNumber", _wrap_delete_InvalidTagNumber, METH_VARARGS, NULL},
	 { (char *)"InvalidTagNumber_swigregister", InvalidTagNumber_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RequiredTagMissing", _wrap_new_RequiredTagMissing, METH_VARARGS, NULL},
	 { (char *)"RequiredTagMissing_field_set", _wrap_RequiredTagMissing_field_set, METH_VARARGS, NULL},
	 { (char *)"RequiredTagMissing_field_get", _wrap_RequiredTagMissing_field_get, METH_VARARGS, NULL},
	 { (char *)"delete_RequiredTagMissing", _wrap_delete_RequiredTagMissing, METH_VARARGS, NULL},
	 { (char *)"RequiredTagMissing_swigregister", RequiredTagMissing_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TagNotDefinedForMessage", _wrap_new_TagNotDefinedForMessage, METH_VARARGS, NULL},
	 { (char *)"TagNotDefinedForMessage_field_set", _wrap_TagNotDefinedForMessage_field_set, METH_VARARGS, NULL},
	 { (char *)"TagNotDefinedForMessage_field_get", _wrap_TagNotDefinedForMessage_field_get, METH_VARARGS, NULL},
	 { (char *)"delete_TagNotDefinedForMessage", _wrap_delete_TagNotDefinedForMessage, METH_VARARGS, NULL},
	 { (char *)"TagNotDefinedForMessage_swigregister", TagNotDefinedForMessage_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NoTagValue", _wrap_new_NoTagValue, METH_VARARGS, NULL},
	 { (char *)"NoTagValue_field_set", _wrap_NoTagValue_field_set, METH_VARARGS, NULL},
	 { (char *)"NoTagValue_field_get", _wrap_NoTagValue_field_get, METH_VARARGS, NULL},
	 { (char *)"delete_NoTagValue", _wrap_delete_NoTagValue, METH_VARARGS, NULL},
	 { (char *)"NoTagValue_swigregister", NoTagValue_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IncorrectTagValue", _wrap_new_IncorrectTagValue, METH_VARARGS, NULL},
	 { (char *)"IncorrectTagValue_field_set", _wrap_IncorrectTagValue_field_set, METH_VARARGS, NULL},
	 { (char *)"IncorrectTagValue_field_get", _wrap_IncorrectTagValue_field_get, METH_VARARGS, NULL},
	 { (char *)"delete_IncorrectTagValue", _wrap_delete_IncorrectTagValue, METH_VARARGS, NULL},
	 { (char *)"IncorrectTagValue_swigregister", IncorrectTagValue_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IncorrectDataFormat", _wrap_new_IncorrectDataFormat, METH_VARARGS, NULL},
	 { (char *)"IncorrectDataFormat_field_set", _wrap_IncorrectDataFormat_field_set, METH_VARARGS, NULL},
	 { (char *)"IncorrectDataFormat_field_get", _wrap_IncorrectDataFormat_field_get, METH_VARARGS, NULL},
	 { (char *)"delete_IncorrectDataFormat", _wrap_delete_IncorrectDataFormat, METH_VARARGS, NULL},
	 { (char *)"IncorrectDataFormat_swigregister", IncorrectDataFormat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IncorrectMessageStructure", _wrap_new_IncorrectMessageStructure, METH_VARARGS, NULL},
	 { (char *)"delete_IncorrectMessageStructure", _wrap_delete_IncorrectMessageStructure, METH_VARARGS, NULL},
	 { (char *)"IncorrectMessageStructure_swigregister", IncorrectMessageStructure_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DuplicateFieldNumber", _wrap_new_DuplicateFieldNumber, METH_VARARGS, NULL},
	 { (char *)"delete_DuplicateFieldNumber", _wrap_delete_DuplicateFieldNumber, METH_VARARGS, NULL},
	 { (char *)"DuplicateFieldNumber_swigregister", DuplicateFieldNumber_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InvalidMessageType", _wrap_new_InvalidMessageType, METH_VARARGS, NULL},
	 { (char *)"delete_InvalidMessageType", _wrap_delete_InvalidMessageType, METH_VARARGS, NULL},
	 { (char *)"InvalidMessageType_swigregister", InvalidMessageType_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnsupportedMessageType", _wrap_new_UnsupportedMessageType, METH_VARARGS, NULL},
	 { (char *)"delete_UnsupportedMessageType", _wrap_delete_UnsupportedMessageType, METH_VARARGS, NULL},
	 { (char *)"UnsupportedMessageType_swigregister", UnsupportedMessageType_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnsupportedVersion", _wrap_new_UnsupportedVersion, METH_VARARGS, NULL},
	 { (char *)"delete_UnsupportedVersion", _wrap_delete_UnsupportedVersion, METH_VARARGS, NULL},
	 { (char *)"UnsupportedVersion_swigregister", UnsupportedVersion_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TagOutOfOrder", _wrap_new_TagOutOfOrder, METH_VARARGS, NULL},
	 { (char *)"TagOutOfOrder_field_set", _wrap_TagOutOfOrder_field_set, METH_VARARGS, NULL},
	 { (char *)"TagOutOfOrder_field_get", _wrap_TagOutOfOrder_field_get, METH_VARARGS, NULL},
	 { (char *)"delete_TagOutOfOrder", _wrap_delete_TagOutOfOrder, METH_VARARGS, NULL},
	 { (char *)"TagOutOfOrder_swigregister", TagOutOfOrder_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RepeatedTag", _wrap_new_RepeatedTag, METH_VARARGS, NULL},
	 { (char *)"RepeatedTag_field_set", _wrap_RepeatedTag_field_set, METH_VARARGS, NULL},
	 { (char *)"RepeatedTag_field_get", _wrap_RepeatedTag_field_get, METH_VARARGS, NULL},
	 { (char *)"delete_RepeatedTag", _wrap_delete_RepeatedTag, METH_VARARGS, NULL},
	 { (char *)"RepeatedTag_swigregister", RepeatedTag_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RepeatingGroupCountMismatch", _wrap_new_RepeatingGroupCountMismatch, METH_VARARGS, NULL},
	 { (char *)"RepeatingGroupCountMismatch_field_set", _wrap_RepeatingGroupCountMismatch_field_set, METH_VARARGS, NULL},
	 { (char *)"RepeatingGroupCountMismatch_field_get", _wrap_RepeatingGroupCountMismatch_field_get, METH_VARARGS, NULL},
	 { (char *)"delete_RepeatingGroupCountMismatch", _wrap_delete_RepeatingGroupCountMismatch, METH_VARARGS, NULL},
	 { (char *)"RepeatingGroupCountMismatch_swigregister", RepeatingGroupCountMismatch_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DoNotSend", _wrap_new_DoNotSend, METH_VARARGS, NULL},
	 { (char *)"delete_DoNotSend", _wrap_delete_DoNotSend, METH_VARARGS, NULL},
	 { (char *)"DoNotSend_swigregister", DoNotSend_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RejectLogon", _wrap_new_RejectLogon, METH_VARARGS, NULL},
	 { (char *)"delete_RejectLogon", _wrap_delete_RejectLogon, METH_VARARGS, NULL},
	 { (char *)"RejectLogon_swigregister", RejectLogon_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SessionNotFound", _wrap_new_SessionNotFound, METH_VARARGS, NULL},
	 { (char *)"delete_SessionNotFound", _wrap_delete_SessionNotFound, METH_VARARGS, NULL},
	 { (char *)"SessionNotFound_swigregister", SessionNotFound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IOException", _wrap_new_IOException, METH_VARARGS, NULL},
	 { (char *)"delete_IOException", _wrap_delete_IOException, METH_VARARGS, NULL},
	 { (char *)"IOException_swigregister", IOException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SocketException", _wrap_new_SocketException, METH_VARARGS, NULL},
	 { (char *)"SocketException_errorToWhat", _wrap_SocketException_errorToWhat, METH_VARARGS, NULL},
	 { (char *)"SocketException_error_set", _wrap_SocketException_error_set, METH_VARARGS, NULL},
	 { (char *)"SocketException_error_get", _wrap_SocketException_error_get, METH_VARARGS, NULL},
	 { (char *)"delete_SocketException", _wrap_delete_SocketException, METH_VARARGS, NULL},
	 { (char *)"SocketException_swigregister", SocketException_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SocketSendFailed", _wrap_new_SocketSendFailed, METH_VARARGS, NULL},
	 { (char *)"delete_SocketSendFailed", _wrap_delete_SocketSendFailed, METH_VARARGS, NULL},
	 { (char *)"SocketSendFailed_swigregister", SocketSendFailed_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SocketRecvFailed", _wrap_new_SocketRecvFailed, METH_VARARGS, NULL},
	 { (char *)"delete_SocketRecvFailed", _wrap_delete_SocketRecvFailed, METH_VARARGS, NULL},
	 { (char *)"SocketRecvFailed_swigregister", SocketRecvFailed_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SocketCloseFailed", _wrap_new_SocketCloseFailed, METH_VARARGS, NULL},
	 { (char *)"delete_SocketCloseFailed", _wrap_delete_SocketCloseFailed, METH_VARARGS, NULL},
	 { (char *)"SocketCloseFailed_swigregister", SocketCloseFailed_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FieldBase", _wrap_new_FieldBase, METH_VARARGS, NULL},
	 { (char *)"delete_FieldBase", _wrap_delete_FieldBase, METH_VARARGS, NULL},
	 { (char *)"FieldBase_setField", _wrap_FieldBase_setField, METH_VARARGS, NULL},
	 { (char *)"FieldBase_setString", _wrap_FieldBase_setString, METH_VARARGS, NULL},
	 { (char *)"FieldBase_getField", _wrap_FieldBase_getField, METH_VARARGS, NULL},
	 { (char *)"FieldBase_getString", _wrap_FieldBase_getString, METH_VARARGS, NULL},
	 { (char *)"FieldBase_getValue", _wrap_FieldBase_getValue, METH_VARARGS, NULL},
	 { (char *)"FieldBase_getLength", _wrap_FieldBase_getLength, METH_VARARGS, NULL},
	 { (char *)"FieldBase_getTotal", _wrap_FieldBase_getTotal, METH_VARARGS, NULL},
	 { (char *)"FieldBase___lt__", _wrap_FieldBase___lt__, METH_VARARGS, NULL},
	 { (char *)"FieldBase___str__", _wrap_FieldBase___str__, METH_VARARGS, NULL},
	 { (char *)"FieldBase_swigregister", FieldBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StringField", _wrap_new_StringField, METH_VARARGS, NULL},
	 { (char *)"StringField_setValue", _wrap_StringField_setValue, METH_VARARGS, NULL},
	 { (char *)"StringField_getValue", _wrap_StringField_getValue, METH_VARARGS, NULL},
	 { (char *)"StringField___lt__", _wrap_StringField___lt__, METH_VARARGS, NULL},
	 { (char *)"StringField___gt__", _wrap_StringField___gt__, METH_VARARGS, NULL},
	 { (char *)"StringField___eq__", _wrap_StringField___eq__, METH_VARARGS, NULL},
	 { (char *)"StringField___ne__", _wrap_StringField___ne__, METH_VARARGS, NULL},
	 { (char *)"StringField___le__", _wrap_StringField___le__, METH_VARARGS, NULL},
	 { (char *)"StringField___ge__", _wrap_StringField___ge__, METH_VARARGS, NULL},
	 { (char *)"delete_StringField", _wrap_delete_StringField, METH_VARARGS, NULL},
	 { (char *)"StringField_swigregister", StringField_swigregister, METH_VARARGS, NULL},
	 { (char *)"__gt__", _wrap___gt__, METH_VARARGS, NULL},
	 { (char *)"__le__", _wrap___le__, METH_VARARGS, NULL},
	 { (char *)"__ge__", _wrap___ge__, METH_VARARGS, NULL},
	 { (char *)"new_CharField", _wrap_new_CharField, METH_VARARGS, NULL},
	 { (char *)"CharField_setValue", _wrap_CharField_setValue, METH_VARARGS, NULL},
	 { (char *)"CharField_getValue", _wrap_CharField_getValue, METH_VARARGS, NULL},
	 { (char *)"delete_CharField", _wrap_delete_CharField, METH_VARARGS, NULL},
	 { (char *)"CharField_swigregister", CharField_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DoubleField", _wrap_new_DoubleField, METH_VARARGS, NULL},
	 { (char *)"DoubleField_setValue", _wrap_DoubleField_setValue, METH_VARARGS, NULL},
	 { (char *)"DoubleField_getValue", _wrap_DoubleField_getValue, METH_VARARGS, NULL},
	 { (char *)"delete_DoubleField", _wrap_delete_DoubleField, METH_VARARGS, NULL},
	 { (char *)"DoubleField_swigregister", DoubleField_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IntField", _wrap_new_IntField, METH_VARARGS, NULL},
	 { (char *)"IntField_setValue", _wrap_IntField_setValue, METH_VARARGS, NULL},
	 { (char *)"IntField_getValue", _wrap_IntField_getValue, METH_VARARGS, NULL},
	 { (char *)"delete_IntField", _wrap_delete_IntField, METH_VARARGS, NULL},
	 { (char *)"IntField_swigregister", IntField_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BoolField", _wrap_new_BoolField, METH_VARARGS, NULL},
	 { (char *)"BoolField_setValue", _wrap_BoolField_setValue, METH_VARARGS, NULL},
	 { (char *)"BoolField_getValue", _wrap_BoolField_getValue, METH_VARARGS, NULL},
	 { (char *)"delete_BoolField", _wrap_delete_BoolField, METH_VARARGS, NULL},
	 { (char *)"BoolField_swigregister", BoolField_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UtcTimeStampField", _wrap_new_UtcTimeStampField, METH_VARARGS, NULL},
	 { (char *)"UtcTimeStampField_setValue", _wrap_UtcTimeStampField_setValue, METH_VARARGS, NULL},
	 { (char *)"UtcTimeStampField_getValue", _wrap_UtcTimeStampField_getValue, METH_VARARGS, NULL},
	 { (char *)"UtcTimeStampField___lt__", _wrap_UtcTimeStampField___lt__, METH_VARARGS, NULL},
	 { (char *)"UtcTimeStampField___eq__", _wrap_UtcTimeStampField___eq__, METH_VARARGS, NULL},
	 { (char *)"UtcTimeStampField___ne__", _wrap_UtcTimeStampField___ne__, METH_VARARGS, NULL},
	 { (char *)"delete_UtcTimeStampField", _wrap_delete_UtcTimeStampField, METH_VARARGS, NULL},
	 { (char *)"UtcTimeStampField_swigregister", UtcTimeStampField_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UtcDateField", _wrap_new_UtcDateField, METH_VARARGS, NULL},
	 { (char *)"UtcDateField_setValue", _wrap_UtcDateField_setValue, METH_VARARGS, NULL},
	 { (char *)"UtcDateField_getValue", _wrap_UtcDateField_getValue, METH_VARARGS, NULL},
	 { (char *)"UtcDateField___lt__", _wrap_UtcDateField___lt__, METH_VARARGS, NULL},
	 { (char *)"UtcDateField___eq__", _wrap_UtcDateField___eq__, METH_VARARGS, NULL},
	 { (char *)"UtcDateField___ne__", _wrap_UtcDateField___ne__, METH_VARARGS, NULL},
	 { (char *)"delete_UtcDateField", _wrap_delete_UtcDateField, METH_VARARGS, NULL},
	 { (char *)"UtcDateField_swigregister", UtcDateField_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UtcTimeOnlyField", _wrap_new_UtcTimeOnlyField, METH_VARARGS, NULL},
	 { (char *)"UtcTimeOnlyField_setValue", _wrap_UtcTimeOnlyField_setValue, METH_VARARGS, NULL},
	 { (char *)"UtcTimeOnlyField_getValue", _wrap_UtcTimeOnlyField_getValue, METH_VARARGS, NULL},
	 { (char *)"UtcTimeOnlyField___lt__", _wrap_UtcTimeOnlyField___lt__, METH_VARARGS, NULL},
	 { (char *)"UtcTimeOnlyField___eq__", _wrap_UtcTimeOnlyField___eq__, METH_VARARGS, NULL},
	 { (char *)"UtcTimeOnlyField___ne__", _wrap_UtcTimeOnlyField___ne__, METH_VARARGS, NULL},
	 { (char *)"delete_UtcTimeOnlyField", _wrap_delete_UtcTimeOnlyField, METH_VARARGS, NULL},
	 { (char *)"UtcTimeOnlyField_swigregister", UtcTimeOnlyField_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CheckSumField", _wrap_new_CheckSumField, METH_VARARGS, NULL},
	 { (char *)"CheckSumField_setValue", _wrap_CheckSumField_setValue, METH_VARARGS, NULL},
	 { (char *)"CheckSumField_getValue", _wrap_CheckSumField_getValue, METH_VARARGS, NULL},
	 { (char *)"delete_CheckSumField", _wrap_delete_CheckSumField, METH_VARARGS, NULL},
	 { (char *)"CheckSumField_swigregister", CheckSumField_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FieldMap", _wrap_new_FieldMap, METH_VARARGS, NULL},
	 { (char *)"delete_FieldMap", _wrap_delete_FieldMap, METH_VARARGS, NULL},
	 { (char *)"FieldMap_setField", _wrap_FieldMap_setField, METH_VARARGS, NULL},
	 { (char *)"FieldMap_getField", _wrap_FieldMap_getField, METH_VARARGS, NULL},
	 { (char *)"FieldMap_getFieldRef", _wrap_FieldMap_getFieldRef, METH_VARARGS, NULL},
	 { (char *)"FieldMap_getFieldPtr", _wrap_FieldMap_getFieldPtr, METH_VARARGS, NULL},
	 { (char *)"FieldMap_isSetField", _wrap_FieldMap_isSetField, METH_VARARGS, NULL},
	 { (char *)"FieldMap_removeField", _wrap_FieldMap_removeField, METH_VARARGS, NULL},
	 { (char *)"FieldMap_addGroup", _wrap_FieldMap_addGroup, METH_VARARGS, NULL},
	 { (char *)"FieldMap_replaceGroup", _wrap_FieldMap_replaceGroup, METH_VARARGS, NULL},
	 { (char *)"FieldMap_getGroup", _wrap_FieldMap_getGroup, METH_VARARGS, NULL},
	 { (char *)"FieldMap_removeGroup", _wrap_FieldMap_removeGroup, METH_VARARGS, NULL},
	 { (char *)"FieldMap_hasGroup", _wrap_FieldMap_hasGroup, METH_VARARGS, NULL},
	 { (char *)"FieldMap_groupCount", _wrap_FieldMap_groupCount, METH_VARARGS, NULL},
	 { (char *)"FieldMap_clear", _wrap_FieldMap_clear, METH_VARARGS, NULL},
	 { (char *)"FieldMap_isEmpty", _wrap_FieldMap_isEmpty, METH_VARARGS, NULL},
	 { (char *)"FieldMap_totalFields", _wrap_FieldMap_totalFields, METH_VARARGS, NULL},
	 { (char *)"FieldMap_calculateString", _wrap_FieldMap_calculateString, METH_VARARGS, NULL},
	 { (char *)"FieldMap_calculateLength", _wrap_FieldMap_calculateLength, METH_VARARGS, NULL},
	 { (char *)"FieldMap_calculateTotal", _wrap_FieldMap_calculateTotal, METH_VARARGS, NULL},
	 { (char *)"FieldMap_begin", _wrap_FieldMap_begin, METH_VARARGS, NULL},
	 { (char *)"FieldMap_end", _wrap_FieldMap_end, METH_VARARGS, NULL},
	 { (char *)"FieldMap_g_begin", _wrap_FieldMap_g_begin, METH_VARARGS, NULL},
	 { (char *)"FieldMap_g_end", _wrap_FieldMap_g_end, METH_VARARGS, NULL},
	 { (char *)"FieldMap_swigregister", FieldMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Message", _wrap_new_Message, METH_VARARGS, NULL},
	 { (char *)"Message_InitializeXML", _wrap_Message_InitializeXML, METH_VARARGS, NULL},
	 { (char *)"Message_addGroup", _wrap_Message_addGroup, METH_VARARGS, NULL},
	 { (char *)"Message_replaceGroup", _wrap_Message_replaceGroup, METH_VARARGS, NULL},
	 { (char *)"Message_getGroup", _wrap_Message_getGroup, METH_VARARGS, NULL},
	 { (char *)"Message_removeGroup", _wrap_Message_removeGroup, METH_VARARGS, NULL},
	 { (char *)"Message_hasGroup", _wrap_Message_hasGroup, METH_VARARGS, NULL},
	 { (char *)"Message_toString", _wrap_Message_toString, METH_VARARGS, NULL},
	 { (char *)"Message_toXML", _wrap_Message_toXML, METH_VARARGS, NULL},
	 { (char *)"Message_reverseRoute", _wrap_Message_reverseRoute, METH_VARARGS, NULL},
	 { (char *)"Message_setString", _wrap_Message_setString, METH_VARARGS, NULL},
	 { (char *)"Message_setGroup", _wrap_Message_setGroup, METH_VARARGS, NULL},
	 { (char *)"Message_setStringHeader", _wrap_Message_setStringHeader, METH_VARARGS, NULL},
	 { (char *)"Message_getHeader", _wrap_Message_getHeader, METH_VARARGS, NULL},
	 { (char *)"Message_getTrailer", _wrap_Message_getTrailer, METH_VARARGS, NULL},
	 { (char *)"Message_hasValidStructure", _wrap_Message_hasValidStructure, METH_VARARGS, NULL},
	 { (char *)"Message_bodyLength", _wrap_Message_bodyLength, METH_VARARGS, NULL},
	 { (char *)"Message_checkSum", _wrap_Message_checkSum, METH_VARARGS, NULL},
	 { (char *)"Message_isAdmin", _wrap_Message_isAdmin, METH_VARARGS, NULL},
	 { (char *)"Message_isApp", _wrap_Message_isApp, METH_VARARGS, NULL},
	 { (char *)"Message_isEmpty", _wrap_Message_isEmpty, METH_VARARGS, NULL},
	 { (char *)"Message_clear", _wrap_Message_clear, METH_VARARGS, NULL},
	 { (char *)"Message_isAdminMsgType", _wrap_Message_isAdminMsgType, METH_VARARGS, NULL},
	 { (char *)"Message_isHeaderField", _wrap_Message_isHeaderField, METH_VARARGS, NULL},
	 { (char *)"Message_isTrailerField", _wrap_Message_isTrailerField, METH_VARARGS, NULL},
	 { (char *)"Message_getSessionID", _wrap_Message_getSessionID, METH_VARARGS, NULL},
	 { (char *)"Message_setSessionID", _wrap_Message_setSessionID, METH_VARARGS, NULL},
	 { (char *)"Message___str__", _wrap_Message___str__, METH_VARARGS, NULL},
	 { (char *)"delete_Message", _wrap_delete_Message, METH_VARARGS, NULL},
	 { (char *)"Message_swigregister", Message_swigregister, METH_VARARGS, NULL},
	 { (char *)"identifyType", _wrap_identifyType, METH_VARARGS, NULL},
	 { (char *)"new_Group", _wrap_new_Group, METH_VARARGS, NULL},
	 { (char *)"Group_field", _wrap_Group_field, METH_VARARGS, NULL},
	 { (char *)"Group_delim", _wrap_Group_delim, METH_VARARGS, NULL},
	 { (char *)"Group_addGroup", _wrap_Group_addGroup, METH_VARARGS, NULL},
	 { (char *)"Group_replaceGroup", _wrap_Group_replaceGroup, METH_VARARGS, NULL},
	 { (char *)"Group_getGroup", _wrap_Group_getGroup, METH_VARARGS, NULL},
	 { (char *)"Group_removeGroup", _wrap_Group_removeGroup, METH_VARARGS, NULL},
	 { (char *)"Group_hasGroup", _wrap_Group_hasGroup, METH_VARARGS, NULL},
	 { (char *)"delete_Group", _wrap_delete_Group, METH_VARARGS, NULL},
	 { (char *)"Group_swigregister", Group_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExecTransType", _wrap_new_ExecTransType, METH_VARARGS, NULL},
	 { (char *)"delete_ExecTransType", _wrap_delete_ExecTransType, METH_VARARGS, NULL},
	 { (char *)"ExecTransType_swigregister", ExecTransType_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IDSource", _wrap_new_IDSource, METH_VARARGS, NULL},
	 { (char *)"delete_IDSource", _wrap_delete_IDSource, METH_VARARGS, NULL},
	 { (char *)"IDSource_swigregister", IDSource_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IOIOthSvc", _wrap_new_IOIOthSvc, METH_VARARGS, NULL},
	 { (char *)"delete_IOIOthSvc", _wrap_delete_IOIOthSvc, METH_VARARGS, NULL},
	 { (char *)"IOIOthSvc_swigregister", IOIOthSvc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IOIShares", _wrap_new_IOIShares, METH_VARARGS, NULL},
	 { (char *)"delete_IOIShares", _wrap_delete_IOIShares, METH_VARARGS, NULL},
	 { (char *)"IOIShares_swigregister", IOIShares_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LastShares", _wrap_new_LastShares, METH_VARARGS, NULL},
	 { (char *)"delete_LastShares", _wrap_delete_LastShares, METH_VARARGS, NULL},
	 { (char *)"LastShares_swigregister", LastShares_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RelatdSym", _wrap_new_RelatdSym, METH_VARARGS, NULL},
	 { (char *)"delete_RelatdSym", _wrap_delete_RelatdSym, METH_VARARGS, NULL},
	 { (char *)"RelatdSym_swigregister", RelatdSym_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Rule80A", _wrap_new_Rule80A, METH_VARARGS, NULL},
	 { (char *)"delete_Rule80A", _wrap_delete_Rule80A, METH_VARARGS, NULL},
	 { (char *)"Rule80A_swigregister", Rule80A_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Shares", _wrap_new_Shares, METH_VARARGS, NULL},
	 { (char *)"delete_Shares", _wrap_delete_Shares, METH_VARARGS, NULL},
	 { (char *)"Shares_swigregister", Shares_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SettlmntTyp", _wrap_new_SettlmntTyp, METH_VARARGS, NULL},
	 { (char *)"delete_SettlmntTyp", _wrap_delete_SettlmntTyp, METH_VARARGS, NULL},
	 { (char *)"SettlmntTyp_swigregister", SettlmntTyp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FutSettDate", _wrap_new_FutSettDate, METH_VARARGS, NULL},
	 { (char *)"delete_FutSettDate", _wrap_delete_FutSettDate, METH_VARARGS, NULL},
	 { (char *)"FutSettDate_swigregister", FutSettDate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AvgPrxPrecision", _wrap_new_AvgPrxPrecision, METH_VARARGS, NULL},
	 { (char *)"delete_AvgPrxPrecision", _wrap_delete_AvgPrxPrecision, METH_VARARGS, NULL},
	 { (char *)"AvgPrxPrecision_swigregister", AvgPrxPrecision_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExecBroker", _wrap_new_ExecBroker, METH_VARARGS, NULL},
	 { (char *)"delete_ExecBroker", _wrap_delete_ExecBroker, METH_VARARGS, NULL},
	 { (char *)"ExecBroker_swigregister", ExecBroker_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OpenClose", _wrap_new_OpenClose, METH_VARARGS, NULL},
	 { (char *)"delete_OpenClose", _wrap_delete_OpenClose, METH_VARARGS, NULL},
	 { (char *)"OpenClose_swigregister", OpenClose_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AllocShares", _wrap_new_AllocShares, METH_VARARGS, NULL},
	 { (char *)"delete_AllocShares", _wrap_delete_AllocShares, METH_VARARGS, NULL},
	 { (char *)"AllocShares_swigregister", AllocShares_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DlvyInst", _wrap_new_DlvyInst, METH_VARARGS, NULL},
	 { (char *)"delete_DlvyInst", _wrap_delete_DlvyInst, METH_VARARGS, NULL},
	 { (char *)"DlvyInst_swigregister", DlvyInst_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BrokerOfCredit", _wrap_new_BrokerOfCredit, METH_VARARGS, NULL},
	 { (char *)"delete_BrokerOfCredit", _wrap_delete_BrokerOfCredit, METH_VARARGS, NULL},
	 { (char *)"BrokerOfCredit_swigregister", BrokerOfCredit_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClientID", _wrap_new_ClientID, METH_VARARGS, NULL},
	 { (char *)"delete_ClientID", _wrap_delete_ClientID, METH_VARARGS, NULL},
	 { (char *)"ClientID_swigregister", ClientID_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CxlType", _wrap_new_CxlType, METH_VARARGS, NULL},
	 { (char *)"delete_CxlType", _wrap_delete_CxlType, METH_VARARGS, NULL},
	 { (char *)"CxlType_swigregister", CxlType_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SettlLocation", _wrap_new_SettlLocation, METH_VARARGS, NULL},
	 { (char *)"delete_SettlLocation", _wrap_delete_SettlLocation, METH_VARARGS, NULL},
	 { (char *)"SettlLocation_swigregister", SettlLocation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SettlDepositoryCode", _wrap_new_SettlDepositoryCode, METH_VARARGS, NULL},
	 { (char *)"delete_SettlDepositoryCode", _wrap_delete_SettlDepositoryCode, METH_VARARGS, NULL},
	 { (char *)"SettlDepositoryCode_swigregister", SettlDepositoryCode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SettlBrkrCode", _wrap_new_SettlBrkrCode, METH_VARARGS, NULL},
	 { (char *)"delete_SettlBrkrCode", _wrap_delete_SettlBrkrCode, METH_VARARGS, NULL},
	 { (char *)"SettlBrkrCode_swigregister", SettlBrkrCode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SettlInstCode", _wrap_new_SettlInstCode, METH_VARARGS, NULL},
	 { (char *)"delete_SettlInstCode", _wrap_delete_SettlInstCode, METH_VARARGS, NULL},
	 { (char *)"SettlInstCode_swigregister", SettlInstCode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SecuritySettlAgentName", _wrap_new_SecuritySettlAgentName, METH_VARARGS, NULL},
	 { (char *)"delete_SecuritySettlAgentName", _wrap_delete_SecuritySettlAgentName, METH_VARARGS, NULL},
	 { (char *)"SecuritySettlAgentName_swigregister", SecuritySettlAgentName_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SecuritySettlAgentCode", _wrap_new_SecuritySettlAgentCode, METH_VARARGS, NULL},
	 { (char *)"delete_SecuritySettlAgentCode", _wrap_delete_SecuritySettlAgentCode, METH_VARARGS, NULL},
	 { (char *)"SecuritySettlAgentCode_swigregister", SecuritySettlAgentCode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SecuritySettlAgentAcctNum", _wrap_new_SecuritySettlAgentAcctNum, METH_VARARGS, NULL},
	 { (char *)"delete_SecuritySettlAgentAcctNum", _wrap_delete_SecuritySettlAgentAcctNum, METH_VARARGS, NULL},
	 { (char *)"SecuritySettlAgentAcctNum_swigregister", SecuritySettlAgentAcctNum_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SecuritySettlAgentAcctName", _wrap_new_SecuritySettlAgentAcctName, METH_VARARGS, NULL},
	 { (char *)"delete_SecuritySettlAgentAcctName", _wrap_delete_SecuritySettlAgentAcctName, METH_VARARGS, NULL},
	 { (char *)"SecuritySettlAgentAcctName_swigregister", SecuritySettlAgentAcctName_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SecuritySettlAgentContactName", _wrap_new_SecuritySettlAgentContactName, METH_VARARGS, NULL},
	 { (char *)"delete_SecuritySettlAgentContactName", _wrap_delete_SecuritySettlAgentContactName, METH_VARARGS, NULL},
	 { (char *)"SecuritySettlAgentContactName_swigregister", SecuritySettlAgentContactName_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SecuritySettlAgentContactPhone", _wrap_new_SecuritySettlAgentContactPhone, METH_VARARGS, NULL},
	 { (char *)"delete_SecuritySettlAgentContactPhone", _wrap_delete_SecuritySettlAgentContactPhone, METH_VARARGS, NULL},
	 { (char *)"SecuritySettlAgentContactPhone_swigregister", SecuritySettlAgentContactPhone_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CashSettlAgentName", _wrap_new_CashSettlAgentName, METH_VARARGS, NULL},
	 { (char *)"delete_CashSettlAgentName", _wrap_delete_CashSettlAgentName, METH_VARARGS, NULL},
	 { (char *)"CashSettlAgentName_swigregister", CashSettlAgentName_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CashSettlAgentCode", _wrap_new_CashSettlAgentCode, METH_VARARGS, NULL},
	 { (char *)"delete_CashSettlAgentCode", _wrap_delete_CashSettlAgentCode, METH_VARARGS, NULL},
	 { (char *)"CashSettlAgentCode_swigregister", CashSettlAgentCode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CashSettlAgentAcctNum", _wrap_new_CashSettlAgentAcctNum, METH_VARARGS, NULL},
	 { (char *)"delete_CashSettlAgentAcctNum", _wrap_delete_CashSettlAgentAcctNum, METH_VARARGS, NULL},
	 { (char *)"CashSettlAgentAcctNum_swigregister", CashSettlAgentAcctNum_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CashSettlAgentAcctName", _wrap_new_CashSettlAgentAcctName, METH_VARARGS, NULL},
	 { (char *)"delete_CashSettlAgentAcctName", _wrap_delete_CashSettlAgentAcctName, METH_VARARGS, NULL},
	 { (char *)"CashSettlAgentAcctName_swigregister", CashSettlAgentAcctName_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CashSettlAgentContactName", _wrap_new_CashSettlAgentContactName, METH_VARARGS, NULL},
	 { (char *)"delete_CashSettlAgentContactName", _wrap_delete_CashSettlAgentContactName, METH_VARARGS, NULL},
	 { (char *)"CashSettlAgentContactName_swigregister", CashSettlAgentContactName_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CashSettlAgentContactPhone", _wrap_new_CashSettlAgentContactPhone, METH_VARARGS, NULL},
	 { (char *)"delete_CashSettlAgentContactPhone", _wrap_delete_CashSettlAgentContactPhone, METH_VARARGS, NULL},
	 { (char *)"CashSettlAgentContactPhone_swigregister", CashSettlAgentContactPhone_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FutSettDate2", _wrap_new_FutSettDate2, METH_VARARGS, NULL},
	 { (char *)"delete_FutSettDate2", _wrap_delete_FutSettDate2, METH_VARARGS, NULL},
	 { (char *)"FutSettDate2_swigregister", FutSettDate2_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PutOrCall", _wrap_new_PutOrCall, METH_VARARGS, NULL},
	 { (char *)"delete_PutOrCall", _wrap_delete_PutOrCall, METH_VARARGS, NULL},
	 { (char *)"PutOrCall_swigregister", PutOrCall_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CustomerOrFirm", _wrap_new_CustomerOrFirm, METH_VARARGS, NULL},
	 { (char *)"delete_CustomerOrFirm", _wrap_delete_CustomerOrFirm, METH_VARARGS, NULL},
	 { (char *)"CustomerOrFirm_swigregister", CustomerOrFirm_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MaturityDay", _wrap_new_MaturityDay, METH_VARARGS, NULL},
	 { (char *)"delete_MaturityDay", _wrap_delete_MaturityDay, METH_VARARGS, NULL},
	 { (char *)"MaturityDay_swigregister", MaturityDay_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PegDifference", _wrap_new_PegDifference, METH_VARARGS, NULL},
	 { (char *)"delete_PegDifference", _wrap_delete_PegDifference, METH_VARARGS, NULL},
	 { (char *)"PegDifference_swigregister", PegDifference_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpreadToBenchmark", _wrap_new_SpreadToBenchmark, METH_VARARGS, NULL},
	 { (char *)"delete_SpreadToBenchmark", _wrap_delete_SpreadToBenchmark, METH_VARARGS, NULL},
	 { (char *)"SpreadToBenchmark_swigregister", SpreadToBenchmark_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Benchmark", _wrap_new_Benchmark, METH_VARARGS, NULL},
	 { (char *)"delete_Benchmark", _wrap_delete_Benchmark, METH_VARARGS, NULL},
	 { (char *)"Benchmark_swigregister", Benchmark_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OpenCloseSettleFlag", _wrap_new_OpenCloseSettleFlag, METH_VARARGS, NULL},
	 { (char *)"delete_OpenCloseSettleFlag", _wrap_delete_OpenCloseSettleFlag, METH_VARARGS, NULL},
	 { (char *)"OpenCloseSettleFlag_swigregister", OpenCloseSettleFlag_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnderlyingIDSource", _wrap_new_UnderlyingIDSource, METH_VARARGS, NULL},
	 { (char *)"delete_UnderlyingIDSource", _wrap_delete_UnderlyingIDSource, METH_VARARGS, NULL},
	 { (char *)"UnderlyingIDSource_swigregister", UnderlyingIDSource_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_QuoteAckStatus", _wrap_new_QuoteAckStatus, METH_VARARGS, NULL},
	 { (char *)"delete_QuoteAckStatus", _wrap_delete_QuoteAckStatus, METH_VARARGS, NULL},
	 { (char *)"QuoteAckStatus_swigregister", QuoteAckStatus_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TotQuoteEntries", _wrap_new_TotQuoteEntries, METH_VARARGS, NULL},
	 { (char *)"delete_TotQuoteEntries", _wrap_delete_TotQuoteEntries, METH_VARARGS, NULL},
	 { (char *)"TotQuoteEntries_swigregister", TotQuoteEntries_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnderlyingMaturityDay", _wrap_new_UnderlyingMaturityDay, METH_VARARGS, NULL},
	 { (char *)"delete_UnderlyingMaturityDay", _wrap_delete_UnderlyingMaturityDay, METH_VARARGS, NULL},
	 { (char *)"UnderlyingMaturityDay_swigregister", UnderlyingMaturityDay_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnderlyingPutOrCall", _wrap_new_UnderlyingPutOrCall, METH_VARARGS, NULL},
	 { (char *)"delete_UnderlyingPutOrCall", _wrap_delete_UnderlyingPutOrCall, METH_VARARGS, NULL},
	 { (char *)"UnderlyingPutOrCall_swigregister", UnderlyingPutOrCall_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RatioQty", _wrap_new_RatioQty, METH_VARARGS, NULL},
	 { (char *)"delete_RatioQty", _wrap_delete_RatioQty, METH_VARARGS, NULL},
	 { (char *)"RatioQty_swigregister", RatioQty_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OnBehalfOfSendingTime", _wrap_new_OnBehalfOfSendingTime, METH_VARARGS, NULL},
	 { (char *)"delete_OnBehalfOfSendingTime", _wrap_delete_OnBehalfOfSendingTime, METH_VARARGS, NULL},
	 { (char *)"OnBehalfOfSendingTime_swigregister", OnBehalfOfSendingTime_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DiscretionOffset", _wrap_new_DiscretionOffset, METH_VARARGS, NULL},
	 { (char *)"delete_DiscretionOffset", _wrap_delete_DiscretionOffset, METH_VARARGS, NULL},
	 { (char *)"DiscretionOffset_swigregister", DiscretionOffset_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TotalNumSecurities", _wrap_new_TotalNumSecurities, METH_VARARGS, NULL},
	 { (char *)"delete_TotalNumSecurities", _wrap_delete_TotalNumSecurities, METH_VARARGS, NULL},
	 { (char *)"TotalNumSecurities_swigregister", TotalNumSecurities_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TradeType", _wrap_new_TradeType, METH_VARARGS, NULL},
	 { (char *)"delete_TradeType", _wrap_delete_TradeType, METH_VARARGS, NULL},
	 { (char *)"TradeType_swigregister", TradeType_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClearingFirm", _wrap_new_ClearingFirm, METH_VARARGS, NULL},
	 { (char *)"delete_ClearingFirm", _wrap_delete_ClearingFirm, METH_VARARGS, NULL},
	 { (char *)"ClearingFirm_swigregister", ClearingFirm_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClearingAccount", _wrap_new_ClearingAccount, METH_VARARGS, NULL},
	 { (char *)"delete_ClearingAccount", _wrap_delete_ClearingAccount, METH_VARARGS, NULL},
	 { (char *)"ClearingAccount_swigregister", ClearingAccount_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TotalVolumeTradedDate", _wrap_new_TotalVolumeTradedDate, METH_VARARGS, NULL},
	 { (char *)"delete_TotalVolumeTradedDate", _wrap_delete_TotalVolumeTradedDate, METH_VARARGS, NULL},
	 { (char *)"TotalVolumeTradedDate_swigregister", TotalVolumeTradedDate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TotalVolumeTradedTime", _wrap_new_TotalVolumeTradedTime, METH_VARARGS, NULL},
	 { (char *)"delete_TotalVolumeTradedTime", _wrap_delete_TotalVolumeTradedTime, METH_VARARGS, NULL},
	 { (char *)"TotalVolumeTradedTime_swigregister", TotalVolumeTradedTime_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CardIssNo", _wrap_new_CardIssNo, METH_VARARGS, NULL},
	 { (char *)"delete_CardIssNo", _wrap_delete_CardIssNo, METH_VARARGS, NULL},
	 { (char *)"CardIssNo_swigregister", CardIssNo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RegistDetls", _wrap_new_RegistDetls, METH_VARARGS, NULL},
	 { (char *)"delete_RegistDetls", _wrap_delete_RegistDetls, METH_VARARGS, NULL},
	 { (char *)"RegistDetls_swigregister", RegistDetls_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TotalNumSecurityTypes", _wrap_new_TotalNumSecurityTypes, METH_VARARGS, NULL},
	 { (char *)"delete_TotalNumSecurityTypes", _wrap_delete_TotalNumSecurityTypes, METH_VARARGS, NULL},
	 { (char *)"TotalNumSecurityTypes_swigregister", TotalNumSecurityTypes_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LegSettlmntTyp", _wrap_new_LegSettlmntTyp, METH_VARARGS, NULL},
	 { (char *)"delete_LegSettlmntTyp", _wrap_delete_LegSettlmntTyp, METH_VARARGS, NULL},
	 { (char *)"LegSettlmntTyp_swigregister", LegSettlmntTyp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LegFutSettDate", _wrap_new_LegFutSettDate, METH_VARARGS, NULL},
	 { (char *)"delete_LegFutSettDate", _wrap_delete_LegFutSettDate, METH_VARARGS, NULL},
	 { (char *)"LegFutSettDate_swigregister", LegFutSettDate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SessionID", _wrap_new_SessionID, METH_VARARGS, NULL},
	 { (char *)"SessionID_getBeginString", _wrap_SessionID_getBeginString, METH_VARARGS, NULL},
	 { (char *)"SessionID_getSenderCompID", _wrap_SessionID_getSenderCompID, METH_VARARGS, NULL},
	 { (char *)"SessionID_getTargetCompID", _wrap_SessionID_getTargetCompID, METH_VARARGS, NULL},
	 { (char *)"SessionID_getSessionQualifier", _wrap_SessionID_getSessionQualifier, METH_VARARGS, NULL},
	 { (char *)"SessionID_fromString", _wrap_SessionID_fromString, METH_VARARGS, NULL},
	 { (char *)"SessionID_toString", _wrap_SessionID_toString, METH_VARARGS, NULL},
	 { (char *)"SessionID___invert__", _wrap_SessionID___invert__, METH_VARARGS, NULL},
	 { (char *)"SessionID___str__", _wrap_SessionID___str__, METH_VARARGS, NULL},
	 { (char *)"delete_SessionID", _wrap_delete_SessionID, METH_VARARGS, NULL},
	 { (char *)"SessionID_swigregister", SessionID_swigregister, METH_VARARGS, NULL},
	 { (char *)"__lt__", _wrap___lt__, METH_VARARGS, NULL},
	 { (char *)"__eq__", _wrap___eq__, METH_VARARGS, NULL},
	 { (char *)"__ne__", _wrap___ne__, METH_VARARGS, NULL},
	 { (char *)"new_Dictionary", _wrap_new_Dictionary, METH_VARARGS, NULL},
	 { (char *)"delete_Dictionary", _wrap_delete_Dictionary, METH_VARARGS, NULL},
	 { (char *)"Dictionary_getName", _wrap_Dictionary_getName, METH_VARARGS, NULL},
	 { (char *)"Dictionary_size", _wrap_Dictionary_size, METH_VARARGS, NULL},
	 { (char *)"Dictionary_getString", _wrap_Dictionary_getString, METH_VARARGS, NULL},
	 { (char *)"Dictionary_getLong", _wrap_Dictionary_getLong, METH_VARARGS, NULL},
	 { (char *)"Dictionary_getDouble", _wrap_Dictionary_getDouble, METH_VARARGS, NULL},
	 { (char *)"Dictionary_getBool", _wrap_Dictionary_getBool, METH_VARARGS, NULL},
	 { (char *)"Dictionary_getDay", _wrap_Dictionary_getDay, METH_VARARGS, NULL},
	 { (char *)"Dictionary_setString", _wrap_Dictionary_setString, METH_VARARGS, NULL},
	 { (char *)"Dictionary_setLong", _wrap_Dictionary_setLong, METH_VARARGS, NULL},
	 { (char *)"Dictionary_setDouble", _wrap_Dictionary_setDouble, METH_VARARGS, NULL},
	 { (char *)"Dictionary_setBool", _wrap_Dictionary_setBool, METH_VARARGS, NULL},
	 { (char *)"Dictionary_setDay", _wrap_Dictionary_setDay, METH_VARARGS, NULL},
	 { (char *)"Dictionary_has", _wrap_Dictionary_has, METH_VARARGS, NULL},
	 { (char *)"Dictionary_merge", _wrap_Dictionary_merge, METH_VARARGS, NULL},
	 { (char *)"Dictionary_begin", _wrap_Dictionary_begin, METH_VARARGS, NULL},
	 { (char *)"Dictionary_end", _wrap_Dictionary_end, METH_VARARGS, NULL},
	 { (char *)"Dictionary_swigregister", Dictionary_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SessionSettings", _wrap_new_SessionSettings, METH_VARARGS, NULL},
	 { (char *)"SessionSettings_has", _wrap_SessionSettings_has, METH_VARARGS, NULL},
	 { (char *)"SessionSettings_get", _wrap_SessionSettings_get, METH_VARARGS, NULL},
	 { (char *)"SessionSettings_set", _wrap_SessionSettings_set, METH_VARARGS, NULL},
	 { (char *)"SessionSettings_size", _wrap_SessionSettings_size, METH_VARARGS, NULL},
	 { (char *)"SessionSettings_getSessions", _wrap_SessionSettings_getSessions, METH_VARARGS, NULL},
	 { (char *)"delete_SessionSettings", _wrap_delete_SessionSettings, METH_VARARGS, NULL},
	 { (char *)"SessionSettings_swigregister", SessionSettings_swigregister, METH_VARARGS, NULL},
	 { (char *)"__rshift__", _wrap___rshift__, METH_VARARGS, NULL},
	 { (char *)"__lshift__", _wrap___lshift__, METH_VARARGS, NULL},
	 { (char *)"new_Session", _wrap_new_Session, METH_VARARGS, NULL},
	 { (char *)"delete_Session", _wrap_delete_Session, METH_VARARGS, NULL},
	 { (char *)"Session_logon", _wrap_Session_logon, METH_VARARGS, NULL},
	 { (char *)"Session_logout", _wrap_Session_logout, METH_VARARGS, NULL},
	 { (char *)"Session_isEnabled", _wrap_Session_isEnabled, METH_VARARGS, NULL},
	 { (char *)"Session_sentLogon", _wrap_Session_sentLogon, METH_VARARGS, NULL},
	 { (char *)"Session_sentLogout", _wrap_Session_sentLogout, METH_VARARGS, NULL},
	 { (char *)"Session_receivedLogon", _wrap_Session_receivedLogon, METH_VARARGS, NULL},
	 { (char *)"Session_isLoggedOn", _wrap_Session_isLoggedOn, METH_VARARGS, NULL},
	 { (char *)"Session_reset", _wrap_Session_reset, METH_VARARGS, NULL},
	 { (char *)"Session_refresh", _wrap_Session_refresh, METH_VARARGS, NULL},
	 { (char *)"Session_setNextSenderMsgSeqNum", _wrap_Session_setNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"Session_setNextTargetMsgSeqNum", _wrap_Session_setNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"Session_getSessionID", _wrap_Session_getSessionID, METH_VARARGS, NULL},
	 { (char *)"Session_setDataDictionary", _wrap_Session_setDataDictionary, METH_VARARGS, NULL},
	 { (char *)"Session_getDataDictionary", _wrap_Session_getDataDictionary, METH_VARARGS, NULL},
	 { (char *)"Session_sendToTarget", _wrap_Session_sendToTarget, METH_VARARGS, NULL},
	 { (char *)"Session_getSessions", _wrap_Session_getSessions, METH_VARARGS, NULL},
	 { (char *)"Session_doesSessionExist", _wrap_Session_doesSessionExist, METH_VARARGS, NULL},
	 { (char *)"Session_lookupSession", _wrap_Session_lookupSession, METH_VARARGS, NULL},
	 { (char *)"Session_isSessionRegistered", _wrap_Session_isSessionRegistered, METH_VARARGS, NULL},
	 { (char *)"Session_registerSession", _wrap_Session_registerSession, METH_VARARGS, NULL},
	 { (char *)"Session_unregisterSession", _wrap_Session_unregisterSession, METH_VARARGS, NULL},
	 { (char *)"Session_numSessions", _wrap_Session_numSessions, METH_VARARGS, NULL},
	 { (char *)"Session_isSessionTime", _wrap_Session_isSessionTime, METH_VARARGS, NULL},
	 { (char *)"Session_isInitiator", _wrap_Session_isInitiator, METH_VARARGS, NULL},
	 { (char *)"Session_isAcceptor", _wrap_Session_isAcceptor, METH_VARARGS, NULL},
	 { (char *)"Session_getSendRedundantResendRequests", _wrap_Session_getSendRedundantResendRequests, METH_VARARGS, NULL},
	 { (char *)"Session_setSendRedundantResendRequests", _wrap_Session_setSendRedundantResendRequests, METH_VARARGS, NULL},
	 { (char *)"Session_getCheckCompId", _wrap_Session_getCheckCompId, METH_VARARGS, NULL},
	 { (char *)"Session_setCheckCompId", _wrap_Session_setCheckCompId, METH_VARARGS, NULL},
	 { (char *)"Session_getCheckLatency", _wrap_Session_getCheckLatency, METH_VARARGS, NULL},
	 { (char *)"Session_setCheckLatency", _wrap_Session_setCheckLatency, METH_VARARGS, NULL},
	 { (char *)"Session_getMaxLatency", _wrap_Session_getMaxLatency, METH_VARARGS, NULL},
	 { (char *)"Session_setMaxLatency", _wrap_Session_setMaxLatency, METH_VARARGS, NULL},
	 { (char *)"Session_getLogonTimeout", _wrap_Session_getLogonTimeout, METH_VARARGS, NULL},
	 { (char *)"Session_setLogonTimeout", _wrap_Session_setLogonTimeout, METH_VARARGS, NULL},
	 { (char *)"Session_getLogoutTimeout", _wrap_Session_getLogoutTimeout, METH_VARARGS, NULL},
	 { (char *)"Session_setLogoutTimeout", _wrap_Session_setLogoutTimeout, METH_VARARGS, NULL},
	 { (char *)"Session_getResetOnLogon", _wrap_Session_getResetOnLogon, METH_VARARGS, NULL},
	 { (char *)"Session_setResetOnLogon", _wrap_Session_setResetOnLogon, METH_VARARGS, NULL},
	 { (char *)"Session_getResetOnLogout", _wrap_Session_getResetOnLogout, METH_VARARGS, NULL},
	 { (char *)"Session_setResetOnLogout", _wrap_Session_setResetOnLogout, METH_VARARGS, NULL},
	 { (char *)"Session_getResetOnDisconnect", _wrap_Session_getResetOnDisconnect, METH_VARARGS, NULL},
	 { (char *)"Session_setResetOnDisconnect", _wrap_Session_setResetOnDisconnect, METH_VARARGS, NULL},
	 { (char *)"Session_getRefreshOnLogon", _wrap_Session_getRefreshOnLogon, METH_VARARGS, NULL},
	 { (char *)"Session_setRefreshOnLogon", _wrap_Session_setRefreshOnLogon, METH_VARARGS, NULL},
	 { (char *)"Session_getMillisecondsInTimeStamp", _wrap_Session_getMillisecondsInTimeStamp, METH_VARARGS, NULL},
	 { (char *)"Session_setMillisecondsInTimeStamp", _wrap_Session_setMillisecondsInTimeStamp, METH_VARARGS, NULL},
	 { (char *)"Session_getPersistMessages", _wrap_Session_getPersistMessages, METH_VARARGS, NULL},
	 { (char *)"Session_setPersistMessages", _wrap_Session_setPersistMessages, METH_VARARGS, NULL},
	 { (char *)"Session_setResponder", _wrap_Session_setResponder, METH_VARARGS, NULL},
	 { (char *)"Session_send", _wrap_Session_send, METH_VARARGS, NULL},
	 { (char *)"Session_next", _wrap_Session_next, METH_VARARGS, NULL},
	 { (char *)"Session_disconnect", _wrap_Session_disconnect, METH_VARARGS, NULL},
	 { (char *)"Session_getExpectedSenderNum", _wrap_Session_getExpectedSenderNum, METH_VARARGS, NULL},
	 { (char *)"Session_getExpectedTargetNum", _wrap_Session_getExpectedTargetNum, METH_VARARGS, NULL},
	 { (char *)"Session_getLog", _wrap_Session_getLog, METH_VARARGS, NULL},
	 { (char *)"Session_getStore", _wrap_Session_getStore, METH_VARARGS, NULL},
	 { (char *)"Session_swigregister", Session_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_LogFactory", _wrap_delete_LogFactory, METH_VARARGS, NULL},
	 { (char *)"LogFactory_create", _wrap_LogFactory_create, METH_VARARGS, NULL},
	 { (char *)"LogFactory_destroy", _wrap_LogFactory_destroy, METH_VARARGS, NULL},
	 { (char *)"LogFactory_swigregister", LogFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScreenLogFactory", _wrap_new_ScreenLogFactory, METH_VARARGS, NULL},
	 { (char *)"ScreenLogFactory_create", _wrap_ScreenLogFactory_create, METH_VARARGS, NULL},
	 { (char *)"ScreenLogFactory_destroy", _wrap_ScreenLogFactory_destroy, METH_VARARGS, NULL},
	 { (char *)"delete_ScreenLogFactory", _wrap_delete_ScreenLogFactory, METH_VARARGS, NULL},
	 { (char *)"ScreenLogFactory_swigregister", ScreenLogFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Log", _wrap_delete_Log, METH_VARARGS, NULL},
	 { (char *)"Log_clear", _wrap_Log_clear, METH_VARARGS, NULL},
	 { (char *)"Log_onIncoming", _wrap_Log_onIncoming, METH_VARARGS, NULL},
	 { (char *)"Log_onOutgoing", _wrap_Log_onOutgoing, METH_VARARGS, NULL},
	 { (char *)"Log_onEvent", _wrap_Log_onEvent, METH_VARARGS, NULL},
	 { (char *)"Log_swigregister", Log_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScreenLog", _wrap_new_ScreenLog, METH_VARARGS, NULL},
	 { (char *)"ScreenLog_clear", _wrap_ScreenLog_clear, METH_VARARGS, NULL},
	 { (char *)"ScreenLog_onIncoming", _wrap_ScreenLog_onIncoming, METH_VARARGS, NULL},
	 { (char *)"ScreenLog_onOutgoing", _wrap_ScreenLog_onOutgoing, METH_VARARGS, NULL},
	 { (char *)"ScreenLog_onEvent", _wrap_ScreenLog_onEvent, METH_VARARGS, NULL},
	 { (char *)"delete_ScreenLog", _wrap_delete_ScreenLog, METH_VARARGS, NULL},
	 { (char *)"ScreenLog_swigregister", ScreenLog_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileLogFactory", _wrap_new_FileLogFactory, METH_VARARGS, NULL},
	 { (char *)"FileLogFactory_create", _wrap_FileLogFactory_create, METH_VARARGS, NULL},
	 { (char *)"FileLogFactory_destroy", _wrap_FileLogFactory_destroy, METH_VARARGS, NULL},
	 { (char *)"delete_FileLogFactory", _wrap_delete_FileLogFactory, METH_VARARGS, NULL},
	 { (char *)"FileLogFactory_swigregister", FileLogFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileLog", _wrap_new_FileLog, METH_VARARGS, NULL},
	 { (char *)"delete_FileLog", _wrap_delete_FileLog, METH_VARARGS, NULL},
	 { (char *)"FileLog_clear", _wrap_FileLog_clear, METH_VARARGS, NULL},
	 { (char *)"FileLog_onIncoming", _wrap_FileLog_onIncoming, METH_VARARGS, NULL},
	 { (char *)"FileLog_onOutgoing", _wrap_FileLog_onOutgoing, METH_VARARGS, NULL},
	 { (char *)"FileLog_onEvent", _wrap_FileLog_onEvent, METH_VARARGS, NULL},
	 { (char *)"FileLog_swigregister", FileLog_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_MessageStoreFactory", _wrap_delete_MessageStoreFactory, METH_VARARGS, NULL},
	 { (char *)"MessageStoreFactory_create", _wrap_MessageStoreFactory_create, METH_VARARGS, NULL},
	 { (char *)"MessageStoreFactory_destroy", _wrap_MessageStoreFactory_destroy, METH_VARARGS, NULL},
	 { (char *)"MessageStoreFactory_swigregister", MessageStoreFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"MemoryStoreFactory_create", _wrap_MemoryStoreFactory_create, METH_VARARGS, NULL},
	 { (char *)"MemoryStoreFactory_destroy", _wrap_MemoryStoreFactory_destroy, METH_VARARGS, NULL},
	 { (char *)"new_MemoryStoreFactory", _wrap_new_MemoryStoreFactory, METH_VARARGS, NULL},
	 { (char *)"delete_MemoryStoreFactory", _wrap_delete_MemoryStoreFactory, METH_VARARGS, NULL},
	 { (char *)"MemoryStoreFactory_swigregister", MemoryStoreFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_MessageStore", _wrap_delete_MessageStore, METH_VARARGS, NULL},
	 { (char *)"MessageStore_set", _wrap_MessageStore_set, METH_VARARGS, NULL},
	 { (char *)"MessageStore_get", _wrap_MessageStore_get, METH_VARARGS, NULL},
	 { (char *)"MessageStore_getNextSenderMsgSeqNum", _wrap_MessageStore_getNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStore_getNextTargetMsgSeqNum", _wrap_MessageStore_getNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStore_setNextSenderMsgSeqNum", _wrap_MessageStore_setNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStore_setNextTargetMsgSeqNum", _wrap_MessageStore_setNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStore_incrNextSenderMsgSeqNum", _wrap_MessageStore_incrNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStore_incrNextTargetMsgSeqNum", _wrap_MessageStore_incrNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStore_getCreationTime", _wrap_MessageStore_getCreationTime, METH_VARARGS, NULL},
	 { (char *)"MessageStore_reset", _wrap_MessageStore_reset, METH_VARARGS, NULL},
	 { (char *)"MessageStore_refresh", _wrap_MessageStore_refresh, METH_VARARGS, NULL},
	 { (char *)"MessageStore_swigregister", MessageStore_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MemoryStore", _wrap_new_MemoryStore, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_set", _wrap_MemoryStore_set, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_get", _wrap_MemoryStore_get, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_getNextSenderMsgSeqNum", _wrap_MemoryStore_getNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_getNextTargetMsgSeqNum", _wrap_MemoryStore_getNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_setNextSenderMsgSeqNum", _wrap_MemoryStore_setNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_setNextTargetMsgSeqNum", _wrap_MemoryStore_setNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_incrNextSenderMsgSeqNum", _wrap_MemoryStore_incrNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_incrNextTargetMsgSeqNum", _wrap_MemoryStore_incrNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_setCreationTime", _wrap_MemoryStore_setCreationTime, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_getCreationTime", _wrap_MemoryStore_getCreationTime, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_reset", _wrap_MemoryStore_reset, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_refresh", _wrap_MemoryStore_refresh, METH_VARARGS, NULL},
	 { (char *)"delete_MemoryStore", _wrap_delete_MemoryStore, METH_VARARGS, NULL},
	 { (char *)"MemoryStore_swigregister", MemoryStore_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MessageStoreFactoryExceptionWrapper", _wrap_new_MessageStoreFactoryExceptionWrapper, METH_VARARGS, NULL},
	 { (char *)"MessageStoreFactoryExceptionWrapper_create", _wrap_MessageStoreFactoryExceptionWrapper_create, METH_VARARGS, NULL},
	 { (char *)"MessageStoreFactoryExceptionWrapper_destroy", _wrap_MessageStoreFactoryExceptionWrapper_destroy, METH_VARARGS, NULL},
	 { (char *)"delete_MessageStoreFactoryExceptionWrapper", _wrap_delete_MessageStoreFactoryExceptionWrapper, METH_VARARGS, NULL},
	 { (char *)"MessageStoreFactoryExceptionWrapper_swigregister", MessageStoreFactoryExceptionWrapper_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MessageStoreExceptionWrapper", _wrap_new_MessageStoreExceptionWrapper, METH_VARARGS, NULL},
	 { (char *)"delete_MessageStoreExceptionWrapper", _wrap_delete_MessageStoreExceptionWrapper, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_set", _wrap_MessageStoreExceptionWrapper_set, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_get", _wrap_MessageStoreExceptionWrapper_get, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_getNextSenderMsgSeqNum", _wrap_MessageStoreExceptionWrapper_getNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_getNextTargetMsgSeqNum", _wrap_MessageStoreExceptionWrapper_getNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_setNextSenderMsgSeqNum", _wrap_MessageStoreExceptionWrapper_setNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_setNextTargetMsgSeqNum", _wrap_MessageStoreExceptionWrapper_setNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum", _wrap_MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum", _wrap_MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_getCreationTime", _wrap_MessageStoreExceptionWrapper_getCreationTime, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_reset", _wrap_MessageStoreExceptionWrapper_reset, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_refresh", _wrap_MessageStoreExceptionWrapper_refresh, METH_VARARGS, NULL},
	 { (char *)"MessageStoreExceptionWrapper_swigregister", MessageStoreExceptionWrapper_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileStoreFactory", _wrap_new_FileStoreFactory, METH_VARARGS, NULL},
	 { (char *)"FileStoreFactory_create", _wrap_FileStoreFactory_create, METH_VARARGS, NULL},
	 { (char *)"FileStoreFactory_destroy", _wrap_FileStoreFactory_destroy, METH_VARARGS, NULL},
	 { (char *)"delete_FileStoreFactory", _wrap_delete_FileStoreFactory, METH_VARARGS, NULL},
	 { (char *)"FileStoreFactory_swigregister", FileStoreFactory_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileStore", _wrap_new_FileStore, METH_VARARGS, NULL},
	 { (char *)"delete_FileStore", _wrap_delete_FileStore, METH_VARARGS, NULL},
	 { (char *)"FileStore_set", _wrap_FileStore_set, METH_VARARGS, NULL},
	 { (char *)"FileStore_get", _wrap_FileStore_get, METH_VARARGS, NULL},
	 { (char *)"FileStore_getNextSenderMsgSeqNum", _wrap_FileStore_getNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"FileStore_getNextTargetMsgSeqNum", _wrap_FileStore_getNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"FileStore_setNextSenderMsgSeqNum", _wrap_FileStore_setNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"FileStore_setNextTargetMsgSeqNum", _wrap_FileStore_setNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"FileStore_incrNextSenderMsgSeqNum", _wrap_FileStore_incrNextSenderMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"FileStore_incrNextTargetMsgSeqNum", _wrap_FileStore_incrNextTargetMsgSeqNum, METH_VARARGS, NULL},
	 { (char *)"FileStore_getCreationTime", _wrap_FileStore_getCreationTime, METH_VARARGS, NULL},
	 { (char *)"FileStore_reset", _wrap_FileStore_reset, METH_VARARGS, NULL},
	 { (char *)"FileStore_refresh", _wrap_FileStore_refresh, METH_VARARGS, NULL},
	 { (char *)"FileStore_swigregister", FileStore_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Application", _wrap_delete_Application, METH_VARARGS, NULL},
	 { (char *)"Application_onCreate", _wrap_Application_onCreate, METH_VARARGS, NULL},
	 { (char *)"Application_onLogon", _wrap_Application_onLogon, METH_VARARGS, NULL},
	 { (char *)"Application_onLogout", _wrap_Application_onLogout, METH_VARARGS, NULL},
	 { (char *)"Application_toAdmin", _wrap_Application_toAdmin, METH_VARARGS, NULL},
	 { (char *)"Application_toApp", _wrap_Application_toApp, METH_VARARGS, NULL},
	 { (char *)"Application_fromAdmin", _wrap_Application_fromAdmin, METH_VARARGS, NULL},
	 { (char *)"Application_fromApp", _wrap_Application_fromApp, METH_VARARGS, NULL},
	 { (char *)"new_Application", _wrap_new_Application, METH_VARARGS, NULL},
	 { (char *)"disown_Application", _wrap_disown_Application, METH_VARARGS, NULL},
	 { (char *)"Application_swigregister", Application_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SynchronizedApplication", _wrap_new_SynchronizedApplication, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_onCreate", _wrap_SynchronizedApplication_onCreate, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_onLogon", _wrap_SynchronizedApplication_onLogon, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_onLogout", _wrap_SynchronizedApplication_onLogout, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_toAdmin", _wrap_SynchronizedApplication_toAdmin, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_toApp", _wrap_SynchronizedApplication_toApp, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_fromAdmin", _wrap_SynchronizedApplication_fromAdmin, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_fromApp", _wrap_SynchronizedApplication_fromApp, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_m_mutex_set", _wrap_SynchronizedApplication_m_mutex_set, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_m_mutex_get", _wrap_SynchronizedApplication_m_mutex_get, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_app", _wrap_SynchronizedApplication_app, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_m_app_set", _wrap_SynchronizedApplication_m_app_set, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_m_app_get", _wrap_SynchronizedApplication_m_app_get, METH_VARARGS, NULL},
	 { (char *)"delete_SynchronizedApplication", _wrap_delete_SynchronizedApplication, METH_VARARGS, NULL},
	 { (char *)"SynchronizedApplication_swigregister", SynchronizedApplication_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NullApplication", _wrap_new_NullApplication, METH_VARARGS, NULL},
	 { (char *)"delete_NullApplication", _wrap_delete_NullApplication, METH_VARARGS, NULL},
	 { (char *)"NullApplication_swigregister", NullApplication_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Initiator", _wrap_delete_Initiator, METH_VARARGS, NULL},
	 { (char *)"Initiator_start", _wrap_Initiator_start, METH_VARARGS, NULL},
	 { (char *)"Initiator_block", _wrap_Initiator_block, METH_VARARGS, NULL},
	 { (char *)"Initiator_poll", _wrap_Initiator_poll, METH_VARARGS, NULL},
	 { (char *)"Initiator_stop", _wrap_Initiator_stop, METH_VARARGS, NULL},
	 { (char *)"Initiator_isLoggedOn", _wrap_Initiator_isLoggedOn, METH_VARARGS, NULL},
	 { (char *)"Initiator_getSession", _wrap_Initiator_getSession, METH_VARARGS, NULL},
	 { (char *)"Initiator_getSessions", _wrap_Initiator_getSessions, METH_VARARGS, NULL},
	 { (char *)"Initiator_has", _wrap_Initiator_has, METH_VARARGS, NULL},
	 { (char *)"Initiator_isStopped", _wrap_Initiator_isStopped, METH_VARARGS, NULL},
	 { (char *)"Initiator_getApplication", _wrap_Initiator_getApplication, METH_VARARGS, NULL},
	 { (char *)"Initiator_getMessageStoreFactory", _wrap_Initiator_getMessageStoreFactory, METH_VARARGS, NULL},
	 { (char *)"Initiator_onEvent", _wrap_Initiator_onEvent, METH_VARARGS, NULL},
	 { (char *)"Initiator_onIncoming", _wrap_Initiator_onIncoming, METH_VARARGS, NULL},
	 { (char *)"Initiator_onOutgoing", _wrap_Initiator_onOutgoing, METH_VARARGS, NULL},
	 { (char *)"Initiator_clear", _wrap_Initiator_clear, METH_VARARGS, NULL},
	 { (char *)"Initiator_swigregister", Initiator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SocketInitiatorBase", _wrap_new_SocketInitiatorBase, METH_VARARGS, NULL},
	 { (char *)"delete_SocketInitiatorBase", _wrap_delete_SocketInitiatorBase, METH_VARARGS, NULL},
	 { (char *)"SocketInitiatorBase_swigregister", SocketInitiatorBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Acceptor", _wrap_delete_Acceptor, METH_VARARGS, NULL},
	 { (char *)"Acceptor_start", _wrap_Acceptor_start, METH_VARARGS, NULL},
	 { (char *)"Acceptor_block", _wrap_Acceptor_block, METH_VARARGS, NULL},
	 { (char *)"Acceptor_poll", _wrap_Acceptor_poll, METH_VARARGS, NULL},
	 { (char *)"Acceptor_stop", _wrap_Acceptor_stop, METH_VARARGS, NULL},
	 { (char *)"Acceptor_isLoggedOn", _wrap_Acceptor_isLoggedOn, METH_VARARGS, NULL},
	 { (char *)"Acceptor_getSession", _wrap_Acceptor_getSession, METH_VARARGS, NULL},
	 { (char *)"Acceptor_getSessions", _wrap_Acceptor_getSessions, METH_VARARGS, NULL},
	 { (char *)"Acceptor_has", _wrap_Acceptor_has, METH_VARARGS, NULL},
	 { (char *)"Acceptor_isStopped", _wrap_Acceptor_isStopped, METH_VARARGS, NULL},
	 { (char *)"Acceptor_getApplication", _wrap_Acceptor_getApplication, METH_VARARGS, NULL},
	 { (char *)"Acceptor_getMessageStoreFactory", _wrap_Acceptor_getMessageStoreFactory, METH_VARARGS, NULL},
	 { (char *)"Acceptor_onEvent", _wrap_Acceptor_onEvent, METH_VARARGS, NULL},
	 { (char *)"Acceptor_onIncoming", _wrap_Acceptor_onIncoming, METH_VARARGS, NULL},
	 { (char *)"Acceptor_onOutgoing", _wrap_Acceptor_onOutgoing, METH_VARARGS, NULL},
	 { (char *)"Acceptor_clear", _wrap_Acceptor_clear, METH_VARARGS, NULL},
	 { (char *)"Acceptor_swigregister", Acceptor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SocketAcceptorBase", _wrap_new_SocketAcceptorBase, METH_VARARGS, NULL},
	 { (char *)"delete_SocketAcceptorBase", _wrap_delete_SocketAcceptorBase, METH_VARARGS, NULL},
	 { (char *)"SocketAcceptorBase_swigregister", SocketAcceptorBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DataDictionary", _wrap_new_DataDictionary, METH_VARARGS, NULL},
	 { (char *)"delete_DataDictionary", _wrap_delete_DataDictionary, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_readFromURL", _wrap_DataDictionary_readFromURL, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_readFromDocument", _wrap_DataDictionary_readFromDocument, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_readFromStream", _wrap_DataDictionary_readFromStream, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_getOrderedFields", _wrap_DataDictionary_getOrderedFields, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_setVersion", _wrap_DataDictionary_setVersion, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_getVersion", _wrap_DataDictionary_getVersion, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_addField", _wrap_DataDictionary_addField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_addFieldName", _wrap_DataDictionary_addFieldName, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_getFieldName", _wrap_DataDictionary_getFieldName, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_getFieldTag", _wrap_DataDictionary_getFieldTag, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_addValueName", _wrap_DataDictionary_addValueName, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_getValueName", _wrap_DataDictionary_getValueName, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_isField", _wrap_DataDictionary_isField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_addMsgType", _wrap_DataDictionary_addMsgType, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_isMsgType", _wrap_DataDictionary_isMsgType, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_addMsgField", _wrap_DataDictionary_addMsgField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_isMsgField", _wrap_DataDictionary_isMsgField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_addHeaderField", _wrap_DataDictionary_addHeaderField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_isHeaderField", _wrap_DataDictionary_isHeaderField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_addTrailerField", _wrap_DataDictionary_addTrailerField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_isTrailerField", _wrap_DataDictionary_isTrailerField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_addFieldType", _wrap_DataDictionary_addFieldType, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_getFieldType", _wrap_DataDictionary_getFieldType, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_addRequiredField", _wrap_DataDictionary_addRequiredField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_isRequiredField", _wrap_DataDictionary_isRequiredField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_addFieldValue", _wrap_DataDictionary_addFieldValue, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_hasFieldValue", _wrap_DataDictionary_hasFieldValue, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_isFieldValue", _wrap_DataDictionary_isFieldValue, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_addGroup", _wrap_DataDictionary_addGroup, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_isGroup", _wrap_DataDictionary_isGroup, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_getGroup", _wrap_DataDictionary_getGroup, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_isDataField", _wrap_DataDictionary_isDataField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_isMultipleValueStringField", _wrap_DataDictionary_isMultipleValueStringField, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_checkFieldsOutOfOrder", _wrap_DataDictionary_checkFieldsOutOfOrder, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_checkFieldsHaveValues", _wrap_DataDictionary_checkFieldsHaveValues, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_checkUserDefinedFields", _wrap_DataDictionary_checkUserDefinedFields, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_validate", _wrap_DataDictionary_validate, METH_VARARGS, NULL},
	 { (char *)"DataDictionary_swigregister", DataDictionary_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_FIX__SocketAcceptorTo_p_FIX__Acceptor(void *x) {
    return (void *)((FIX::Acceptor *)  ((FIX::SocketAcceptor *) x));
}
static void *_p_FIX__SynchronizedApplicationTo_p_FIX__Application(void *x) {
    return (void *)((FIX::Application *)  ((FIX::SynchronizedApplication *) x));
}
static void *_p_FIX__NullApplicationTo_p_FIX__Application(void *x) {
    return (void *)((FIX::Application *)  ((FIX::NullApplication *) x));
}
static void *_p_IntArrayTo_p_int(void *x) {
    return (void *)((int *)  ((IntArray *) x));
}
static void *_p_FIX__SecuritySettlAgentNameTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::SecuritySettlAgentName *) x));
}
static void *_p_FIX__ExecBrokerTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::ExecBroker *) x));
}
static void *_p_FIX__CashSettlAgentNameTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::CashSettlAgentName *) x));
}
static void *_p_FIX__BrokerOfCreditTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::BrokerOfCredit *) x));
}
static void *_p_FIX__SettlBrkrCodeTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::SettlBrkrCode *) x));
}
static void *_p_FIX__SettlLocationTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::SettlLocation *) x));
}
static void *_p_FIX__RegistDetlsTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::RegistDetls *) x));
}
static void *_p_FIX__CardIssNoTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::CardIssNo *) x));
}
static void *_p_FIX__OpenCloseSettleFlagTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::OpenCloseSettleFlag *) x));
}
static void *_p_FIX__ClearingFirmTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::ClearingFirm *) x));
}
static void *_p_FIX__SecuritySettlAgentCodeTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::SecuritySettlAgentCode *) x));
}
static void *_p_FIX__CashSettlAgentCodeTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::CashSettlAgentCode *) x));
}
static void *_p_FIX__FutSettDateTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::FutSettDate *) x));
}
static void *_p_FIX__LegFutSettDateTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::LegFutSettDate *) x));
}
static void *_p_FIX__RelatdSymTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::RelatdSym *) x));
}
static void *_p_FIX__ClearingAccountTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::ClearingAccount *) x));
}
static void *_p_FIX__SettlDepositoryCodeTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::SettlDepositoryCode *) x));
}
static void *_p_FIX__IDSourceTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::IDSource *) x));
}
static void *_p_FIX__SecuritySettlAgentAcctNameTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::SecuritySettlAgentAcctName *) x));
}
static void *_p_FIX__SecuritySettlAgentContactNameTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::SecuritySettlAgentContactName *) x));
}
static void *_p_FIX__CashSettlAgentAcctNameTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::CashSettlAgentAcctName *) x));
}
static void *_p_FIX__CashSettlAgentContactNameTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::CashSettlAgentContactName *) x));
}
static void *_p_FIX__MaturityDayTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::MaturityDay *) x));
}
static void *_p_FIX__UnderlyingIDSourceTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::UnderlyingIDSource *) x));
}
static void *_p_FIX__UnderlyingMaturityDayTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::UnderlyingMaturityDay *) x));
}
static void *_p_FIX__ClientIDTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::ClientID *) x));
}
static void *_p_FIX__SecuritySettlAgentContactPhoneTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::SecuritySettlAgentContactPhone *) x));
}
static void *_p_FIX__CashSettlAgentContactPhoneTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::CashSettlAgentContactPhone *) x));
}
static void *_p_FIX__FutSettDate2To_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::FutSettDate2 *) x));
}
static void *_p_FIX__SecuritySettlAgentAcctNumTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::SecuritySettlAgentAcctNum *) x));
}
static void *_p_FIX__SettlInstCodeTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::SettlInstCode *) x));
}
static void *_p_FIX__IOISharesTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::IOIShares *) x));
}
static void *_p_FIX__CashSettlAgentAcctNumTo_p_FIX__StringField(void *x) {
    return (void *)((FIX::StringField *)  ((FIX::CashSettlAgentAcctNum *) x));
}
static void *_p_FIX__MemoryStoreTo_p_FIX__MessageStore(void *x) {
    return (void *)((FIX::MessageStore *)  ((FIX::MemoryStore *) x));
}
static void *_p_FIX__FileStoreTo_p_FIX__MessageStore(void *x) {
    return (void *)((FIX::MessageStore *)  ((FIX::FileStore *) x));
}
static void *_p_FIX__SpreadToBenchmarkTo_p_FIX__DoubleField(void *x) {
    return (void *)((FIX::DoubleField *)  ((FIX::SpreadToBenchmark *) x));
}
static void *_p_FIX__RatioQtyTo_p_FIX__DoubleField(void *x) {
    return (void *)((FIX::DoubleField *)  ((FIX::RatioQty *) x));
}
static void *_p_FIX__DiscretionOffsetTo_p_FIX__DoubleField(void *x) {
    return (void *)((FIX::DoubleField *)  ((FIX::DiscretionOffset *) x));
}
static void *_p_FIX__LastSharesTo_p_FIX__DoubleField(void *x) {
    return (void *)((FIX::DoubleField *)  ((FIX::LastShares *) x));
}
static void *_p_FIX__SharesTo_p_FIX__DoubleField(void *x) {
    return (void *)((FIX::DoubleField *)  ((FIX::Shares *) x));
}
static void *_p_FIX__PegDifferenceTo_p_FIX__DoubleField(void *x) {
    return (void *)((FIX::DoubleField *)  ((FIX::PegDifference *) x));
}
static void *_p_FIX__TotalVolumeTradedDateTo_p_FIX__UtcDateField(void *x) {
    return (void *)((FIX::UtcDateField *)  ((FIX::TotalVolumeTradedDate *) x));
}
static void *_p_FIX__SocketInitiatorTo_p_FIX__Initiator(void *x) {
    return (void *)((FIX::Initiator *)  ((FIX::SocketInitiator *) x));
}
static void *_p_FIX__GroupTo_p_FIX__FieldMap(void *x) {
    return (void *)((FIX::FieldMap *)  ((FIX::Group *) x));
}
static void *_p_FIX__MessageTo_p_FIX__FieldMap(void *x) {
    return (void *)((FIX::FieldMap *)  ((FIX::Message *) x));
}
static void *_p_FIX__InitiatorTo_p_FIX__Log(void *x) {
    return (void *)((FIX::Log *)  ((FIX::Initiator *) x));
}
static void *_p_FIX__SocketInitiatorTo_p_FIX__Log(void *x) {
    return (void *)((FIX::Log *) (FIX::Initiator *) ((FIX::SocketInitiator *) x));
}
static void *_p_FIX__AcceptorTo_p_FIX__Log(void *x) {
    return (void *)((FIX::Log *)  ((FIX::Acceptor *) x));
}
static void *_p_FIX__SocketAcceptorTo_p_FIX__Log(void *x) {
    return (void *)((FIX::Log *) (FIX::Acceptor *) ((FIX::SocketAcceptor *) x));
}
static void *_p_FIX__FileLogTo_p_FIX__Log(void *x) {
    return (void *)((FIX::Log *)  ((FIX::FileLog *) x));
}
static void *_p_FIX__ScreenLogTo_p_FIX__Log(void *x) {
    return (void *)((FIX::Log *)  ((FIX::ScreenLog *) x));
}
static void *_p_FIX__CustomerOrFirmTo_p_FIX__IntField(void *x) {
    return (void *)((FIX::IntField *)  ((FIX::CustomerOrFirm *) x));
}
static void *_p_FIX__QuoteAckStatusTo_p_FIX__IntField(void *x) {
    return (void *)((FIX::IntField *)  ((FIX::QuoteAckStatus *) x));
}
static void *_p_FIX__AvgPrxPrecisionTo_p_FIX__IntField(void *x) {
    return (void *)((FIX::IntField *)  ((FIX::AvgPrxPrecision *) x));
}
static void *_p_FIX__AllocSharesTo_p_FIX__IntField(void *x) {
    return (void *)((FIX::IntField *)  ((FIX::AllocShares *) x));
}
static void *_p_FIX__TotQuoteEntriesTo_p_FIX__IntField(void *x) {
    return (void *)((FIX::IntField *)  ((FIX::TotQuoteEntries *) x));
}
static void *_p_FIX__TotalNumSecurityTypesTo_p_FIX__IntField(void *x) {
    return (void *)((FIX::IntField *)  ((FIX::TotalNumSecurityTypes *) x));
}
static void *_p_FIX__PutOrCallTo_p_FIX__IntField(void *x) {
    return (void *)((FIX::IntField *)  ((FIX::PutOrCall *) x));
}
static void *_p_FIX__UnderlyingPutOrCallTo_p_FIX__IntField(void *x) {
    return (void *)((FIX::IntField *)  ((FIX::UnderlyingPutOrCall *) x));
}
static void *_p_FIX__TotalNumSecuritiesTo_p_FIX__IntField(void *x) {
    return (void *)((FIX::IntField *)  ((FIX::TotalNumSecurities *) x));
}
static void *_p_FIX__RequiredTagMissingTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::RequiredTagMissing *) x));
}
static void *_p_FIX__SocketSendFailedTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *) (FIX::SocketException *) ((FIX::SocketSendFailed *) x));
}
static void *_p_FIX__SocketRecvFailedTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *) (FIX::SocketException *) ((FIX::SocketRecvFailed *) x));
}
static void *_p_FIX__InvalidTagNumberTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::InvalidTagNumber *) x));
}
static void *_p_FIX__RejectLogonTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::RejectLogon *) x));
}
static void *_p_FIX__IncorrectDataFormatTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::IncorrectDataFormat *) x));
}
static void *_p_FIX__TagNotDefinedForMessageTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::TagNotDefinedForMessage *) x));
}
static void *_p_FIX__InvalidMessageTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::InvalidMessage *) x));
}
static void *_p_FIX__DuplicateFieldNumberTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::DuplicateFieldNumber *) x));
}
static void *_p_FIX__RuntimeErrorTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::RuntimeError *) x));
}
static void *_p_FIX__MessageParseErrorTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::MessageParseError *) x));
}
static void *_p_FIX__DoNotSendTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::DoNotSend *) x));
}
static void *_p_FIX__FieldNotFoundTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::FieldNotFound *) x));
}
static void *_p_FIX__SessionNotFoundTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::SessionNotFound *) x));
}
static void *_p_FIX__IOExceptionTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::IOException *) x));
}
static void *_p_FIX__SocketExceptionTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::SocketException *) x));
}
static void *_p_FIX__ConfigErrorTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::ConfigError *) x));
}
static void *_p_FIX__InvalidMessageTypeTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::InvalidMessageType *) x));
}
static void *_p_FIX__UnsupportedMessageTypeTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::UnsupportedMessageType *) x));
}
static void *_p_FIX__UnsupportedVersionTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::UnsupportedVersion *) x));
}
static void *_p_FIX__IncorrectTagValueTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::IncorrectTagValue *) x));
}
static void *_p_FIX__NoTagValueTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::NoTagValue *) x));
}
static void *_p_FIX__TagOutOfOrderTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::TagOutOfOrder *) x));
}
static void *_p_FIX__RepeatedTagTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::RepeatedTag *) x));
}
static void *_p_FIX__SocketCloseFailedTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *) (FIX::SocketException *) ((FIX::SocketCloseFailed *) x));
}
static void *_p_FIX__FieldConvertErrorTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::FieldConvertError *) x));
}
static void *_p_FIX__IncorrectMessageStructureTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::IncorrectMessageStructure *) x));
}
static void *_p_FIX__RepeatingGroupCountMismatchTo_p_FIX__Exception(void *x) {
    return (void *)((FIX::Exception *)  ((FIX::RepeatingGroupCountMismatch *) x));
}
static void *_p_FIX__SocketSendFailedTo_p_FIX__SocketException(void *x) {
    return (void *)((FIX::SocketException *)  ((FIX::SocketSendFailed *) x));
}
static void *_p_FIX__SocketRecvFailedTo_p_FIX__SocketException(void *x) {
    return (void *)((FIX::SocketException *)  ((FIX::SocketRecvFailed *) x));
}
static void *_p_FIX__SocketCloseFailedTo_p_FIX__SocketException(void *x) {
    return (void *)((FIX::SocketException *)  ((FIX::SocketCloseFailed *) x));
}
static void *_p_FIX__Rule80ATo_p_FIX__CharField(void *x) {
    return (void *)((FIX::CharField *)  ((FIX::Rule80A *) x));
}
static void *_p_FIX__BenchmarkTo_p_FIX__CharField(void *x) {
    return (void *)((FIX::CharField *)  ((FIX::Benchmark *) x));
}
static void *_p_FIX__SettlmntTypTo_p_FIX__CharField(void *x) {
    return (void *)((FIX::CharField *)  ((FIX::SettlmntTyp *) x));
}
static void *_p_FIX__LegSettlmntTypTo_p_FIX__CharField(void *x) {
    return (void *)((FIX::CharField *)  ((FIX::LegSettlmntTyp *) x));
}
static void *_p_FIX__OpenCloseTo_p_FIX__CharField(void *x) {
    return (void *)((FIX::CharField *)  ((FIX::OpenClose *) x));
}
static void *_p_FIX__CxlTypeTo_p_FIX__CharField(void *x) {
    return (void *)((FIX::CharField *)  ((FIX::CxlType *) x));
}
static void *_p_FIX__ExecTransTypeTo_p_FIX__CharField(void *x) {
    return (void *)((FIX::CharField *)  ((FIX::ExecTransType *) x));
}
static void *_p_FIX__DlvyInstTo_p_FIX__CharField(void *x) {
    return (void *)((FIX::CharField *)  ((FIX::DlvyInst *) x));
}
static void *_p_FIX__IOIOthSvcTo_p_FIX__CharField(void *x) {
    return (void *)((FIX::CharField *)  ((FIX::IOIOthSvc *) x));
}
static void *_p_FIX__TradeTypeTo_p_FIX__CharField(void *x) {
    return (void *)((FIX::CharField *)  ((FIX::TradeType *) x));
}
static void *_p_FIX__TotalVolumeTradedTimeTo_p_FIX__UtcTimeOnlyField(void *x) {
    return (void *)((FIX::UtcTimeOnlyField *)  ((FIX::TotalVolumeTradedTime *) x));
}
static void *_p_FIX__QuoteAckStatusTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::IntField *) ((FIX::QuoteAckStatus *) x));
}
static void *_p_FIX__OpenCloseSettleFlagTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::OpenCloseSettleFlag *) x));
}
static void *_p_FIX__DoubleFieldTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *)  ((FIX::DoubleField *) x));
}
static void *_p_FIX__UtcDateFieldTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *)  ((FIX::UtcDateField *) x));
}
static void *_p_FIX__SecuritySettlAgentNameTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::SecuritySettlAgentName *) x));
}
static void *_p_FIX__CashSettlAgentNameTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::CashSettlAgentName *) x));
}
static void *_p_FIX__TotalVolumeTradedDateTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::UtcDateField *) ((FIX::TotalVolumeTradedDate *) x));
}
static void *_p_FIX__CheckSumFieldTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *)  ((FIX::CheckSumField *) x));
}
static void *_p_FIX__TotalNumSecurityTypesTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::IntField *) ((FIX::TotalNumSecurityTypes *) x));
}
static void *_p_FIX__AllocSharesTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::IntField *) ((FIX::AllocShares *) x));
}
static void *_p_FIX__IOISharesTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::IOIShares *) x));
}
static void *_p_FIX__SecuritySettlAgentAcctNameTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::SecuritySettlAgentAcctName *) x));
}
static void *_p_FIX__SecuritySettlAgentContactNameTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::SecuritySettlAgentContactName *) x));
}
static void *_p_FIX__CashSettlAgentAcctNameTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::CashSettlAgentAcctName *) x));
}
static void *_p_FIX__CashSettlAgentContactNameTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::CashSettlAgentContactName *) x));
}
static void *_p_FIX__RelatdSymTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::RelatdSym *) x));
}
static void *_p_FIX__FutSettDateTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::FutSettDate *) x));
}
static void *_p_FIX__StringFieldTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *)  ((FIX::StringField *) x));
}
static void *_p_FIX__FutSettDate2To_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::FutSettDate2 *) x));
}
static void *_p_FIX__PegDifferenceTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::DoubleField *) ((FIX::PegDifference *) x));
}
static void *_p_FIX__RegistDetlsTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::RegistDetls *) x));
}
static void *_p_FIX__LegFutSettDateTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::LegFutSettDate *) x));
}
static void *_p_FIX__IntFieldTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *)  ((FIX::IntField *) x));
}
static void *_p_FIX__SettlLocationTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::SettlLocation *) x));
}
static void *_p_FIX__CardIssNoTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::CardIssNo *) x));
}
static void *_p_FIX__ClearingAccountTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::ClearingAccount *) x));
}
static void *_p_FIX__PutOrCallTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::IntField *) ((FIX::PutOrCall *) x));
}
static void *_p_FIX__TotQuoteEntriesTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::IntField *) ((FIX::TotQuoteEntries *) x));
}
static void *_p_FIX__UnderlyingPutOrCallTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::IntField *) ((FIX::UnderlyingPutOrCall *) x));
}
static void *_p_FIX__IOIOthSvcTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::CharField *) ((FIX::IOIOthSvc *) x));
}
static void *_p_FIX__TotalVolumeTradedTimeTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::UtcTimeOnlyField *) ((FIX::TotalVolumeTradedTime *) x));
}
static void *_p_FIX__IDSourceTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::IDSource *) x));
}
static void *_p_FIX__UnderlyingIDSourceTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::UnderlyingIDSource *) x));
}
static void *_p_FIX__DlvyInstTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::CharField *) ((FIX::DlvyInst *) x));
}
static void *_p_FIX__ClearingFirmTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::ClearingFirm *) x));
}
static void *_p_FIX__SpreadToBenchmarkTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::DoubleField *) ((FIX::SpreadToBenchmark *) x));
}
static void *_p_FIX__BenchmarkTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::CharField *) ((FIX::Benchmark *) x));
}
static void *_p_FIX__SettlDepositoryCodeTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::SettlDepositoryCode *) x));
}
static void *_p_FIX__BoolFieldTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *)  ((FIX::BoolField *) x));
}
static void *_p_FIX__BrokerOfCreditTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::BrokerOfCredit *) x));
}
static void *_p_FIX__OnBehalfOfSendingTimeTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::UtcTimeStampField *) ((FIX::OnBehalfOfSendingTime *) x));
}
static void *_p_FIX__OpenCloseTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::CharField *) ((FIX::OpenClose *) x));
}
static void *_p_FIX__AvgPrxPrecisionTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::IntField *) ((FIX::AvgPrxPrecision *) x));
}
static void *_p_FIX__SecuritySettlAgentContactPhoneTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::SecuritySettlAgentContactPhone *) x));
}
static void *_p_FIX__CashSettlAgentContactPhoneTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::CashSettlAgentContactPhone *) x));
}
static void *_p_FIX__DiscretionOffsetTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::DoubleField *) ((FIX::DiscretionOffset *) x));
}
static void *_p_FIX__ExecTransTypeTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::CharField *) ((FIX::ExecTransType *) x));
}
static void *_p_FIX__UtcTimeStampFieldTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *)  ((FIX::UtcTimeStampField *) x));
}
static void *_p_FIX__CharFieldTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *)  ((FIX::CharField *) x));
}
static void *_p_FIX__SettlBrkrCodeTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::SettlBrkrCode *) x));
}
static void *_p_FIX__ExecBrokerTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::ExecBroker *) x));
}
static void *_p_FIX__CustomerOrFirmTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::IntField *) ((FIX::CustomerOrFirm *) x));
}
static void *_p_FIX__RatioQtyTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::DoubleField *) ((FIX::RatioQty *) x));
}
static void *_p_FIX__SharesTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::DoubleField *) ((FIX::Shares *) x));
}
static void *_p_FIX__LastSharesTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::DoubleField *) ((FIX::LastShares *) x));
}
static void *_p_FIX__TradeTypeTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::CharField *) ((FIX::TradeType *) x));
}
static void *_p_FIX__SecuritySettlAgentAcctNumTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::SecuritySettlAgentAcctNum *) x));
}
static void *_p_FIX__Rule80ATo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::CharField *) ((FIX::Rule80A *) x));
}
static void *_p_FIX__CxlTypeTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::CharField *) ((FIX::CxlType *) x));
}
static void *_p_FIX__UtcTimeOnlyFieldTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *)  ((FIX::UtcTimeOnlyField *) x));
}
static void *_p_FIX__CashSettlAgentAcctNumTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::CashSettlAgentAcctNum *) x));
}
static void *_p_FIX__SettlInstCodeTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::SettlInstCode *) x));
}
static void *_p_FIX__SecuritySettlAgentCodeTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::SecuritySettlAgentCode *) x));
}
static void *_p_FIX__CashSettlAgentCodeTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::CashSettlAgentCode *) x));
}
static void *_p_FIX__TotalNumSecuritiesTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::IntField *) ((FIX::TotalNumSecurities *) x));
}
static void *_p_FIX__MaturityDayTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::MaturityDay *) x));
}
static void *_p_FIX__UnderlyingMaturityDayTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::UnderlyingMaturityDay *) x));
}
static void *_p_FIX__ClientIDTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::StringField *) ((FIX::ClientID *) x));
}
static void *_p_FIX__SettlmntTypTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::CharField *) ((FIX::SettlmntTyp *) x));
}
static void *_p_FIX__LegSettlmntTypTo_p_FIX__FieldBase(void *x) {
    return (void *)((FIX::FieldBase *) (FIX::CharField *) ((FIX::LegSettlmntTyp *) x));
}
static void *_p_FIX__ScreenLogFactoryTo_p_FIX__LogFactory(void *x) {
    return (void *)((FIX::LogFactory *)  ((FIX::ScreenLogFactory *) x));
}
static void *_p_FIX__FileLogFactoryTo_p_FIX__LogFactory(void *x) {
    return (void *)((FIX::LogFactory *)  ((FIX::FileLogFactory *) x));
}
static void *_p_FIX__MemoryStoreFactoryTo_p_FIX__MessageStoreFactory(void *x) {
    return (void *)((FIX::MessageStoreFactory *)  ((FIX::MemoryStoreFactory *) x));
}
static void *_p_FIX__FileStoreFactoryTo_p_FIX__MessageStoreFactory(void *x) {
    return (void *)((FIX::MessageStoreFactory *)  ((FIX::FileStoreFactory *) x));
}
static void *_p_FIX__OnBehalfOfSendingTimeTo_p_FIX__UtcTimeStampField(void *x) {
    return (void *)((FIX::UtcTimeStampField *)  ((FIX::OnBehalfOfSendingTime *) x));
}
static swig_type_info _swigt__p_Application = {"_p_Application", "Application *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BeginString = {"_p_BeginString", "BeginString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DOMDocumentPtr = {"_p_DOMDocumentPtr", "DOMDocumentPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Data = {"_p_Data", "Data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataDictionary = {"_p_DataDictionary", "DataDictionary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dictionaries = {"_p_Dictionaries", "Dictionaries *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DoubleField = {"_p_DoubleField", "DoubleField *|PercentageField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIELD__Field = {"_p_FIELD__Field", "FIELD::Field *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX_CHAR = {"_p_FIX_CHAR", "FIX_CHAR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX_DAYOFMONTH = {"_p_FIX_DAYOFMONTH", "FIX_DAYOFMONTH *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX_INT = {"_p_FIX_INT", "FIX_INT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX_LOCALMKTDATE = {"_p_FIX_LOCALMKTDATE", "FIX_LOCALMKTDATE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX_PRICEOFFSET = {"_p_FIX_PRICEOFFSET", "FIX_PRICEOFFSET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX_QTY = {"_p_FIX_QTY", "FIX_QTY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX_STRING = {"_p_FIX_STRING", "FIX_STRING *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX_UTCDATE = {"_p_FIX_UTCDATE", "FIX_UTCDATE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX_UTCTIMEONLY = {"_p_FIX_UTCTIMEONLY", "FIX_UTCTIMEONLY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX_UTCTIMESTAMP = {"_p_FIX_UTCTIMESTAMP", "FIX_UTCTIMESTAMP *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Acceptor = {"_p_FIX__Acceptor", "FIX::Acceptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__AllocShares = {"_p_FIX__AllocShares", "FIX::AllocShares *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Application = {"_p_FIX__Application", "FIX::Application *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__AvgPrxPrecision = {"_p_FIX__AvgPrxPrecision", "FIX::AvgPrxPrecision *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Benchmark = {"_p_FIX__Benchmark", "FIX::Benchmark *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__BoolField = {"_p_FIX__BoolField", "FIX::BoolField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__BrokerOfCredit = {"_p_FIX__BrokerOfCredit", "FIX::BrokerOfCredit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__CardIssNo = {"_p_FIX__CardIssNo", "FIX::CardIssNo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__CashSettlAgentAcctName = {"_p_FIX__CashSettlAgentAcctName", "FIX::CashSettlAgentAcctName *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__CashSettlAgentAcctNum = {"_p_FIX__CashSettlAgentAcctNum", "FIX::CashSettlAgentAcctNum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__CashSettlAgentCode = {"_p_FIX__CashSettlAgentCode", "FIX::CashSettlAgentCode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__CashSettlAgentContactName = {"_p_FIX__CashSettlAgentContactName", "FIX::CashSettlAgentContactName *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__CashSettlAgentContactPhone = {"_p_FIX__CashSettlAgentContactPhone", "FIX::CashSettlAgentContactPhone *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__CashSettlAgentName = {"_p_FIX__CashSettlAgentName", "FIX::CashSettlAgentName *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__CharField = {"_p_FIX__CharField", "FIX::CharField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__CheckSumField = {"_p_FIX__CheckSumField", "FIX::CheckSumField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__ClearingAccount = {"_p_FIX__ClearingAccount", "FIX::ClearingAccount *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__ClearingFirm = {"_p_FIX__ClearingFirm", "FIX::ClearingFirm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__ClientID = {"_p_FIX__ClientID", "FIX::ClientID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__ConfigError = {"_p_FIX__ConfigError", "FIX::ConfigError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__CustomerOrFirm = {"_p_FIX__CustomerOrFirm", "FIX::CustomerOrFirm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__CxlType = {"_p_FIX__CxlType", "FIX::CxlType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__DataDictionary = {"_p_FIX__DataDictionary", "FIX::DataDictionary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Dictionary = {"_p_FIX__Dictionary", "FIX::Dictionary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Dictionary__Data__const_iterator = {"_p_FIX__Dictionary__Data__const_iterator", "FIX::Dictionary::Data::const_iterator *|FIX::Dictionary::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__DiscretionOffset = {"_p_FIX__DiscretionOffset", "FIX::DiscretionOffset *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__DlvyInst = {"_p_FIX__DlvyInst", "FIX::DlvyInst *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__DoNotSend = {"_p_FIX__DoNotSend", "FIX::DoNotSend *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__DoubleField = {"_p_FIX__DoubleField", "FIX::DoubleField *|FIX::PercentageField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__DuplicateFieldNumber = {"_p_FIX__DuplicateFieldNumber", "FIX::DuplicateFieldNumber *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Exception = {"_p_FIX__Exception", "FIX::Exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__ExecBroker = {"_p_FIX__ExecBroker", "FIX::ExecBroker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__ExecTransType = {"_p_FIX__ExecTransType", "FIX::ExecTransType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FieldBase = {"_p_FIX__FieldBase", "FIX::FieldBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FieldConvertError = {"_p_FIX__FieldConvertError", "FIX::FieldConvertError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FieldMap = {"_p_FIX__FieldMap", "FIX::FieldMap *|FIX::Trailer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FieldMap__Fields__const_iterator = {"_p_FIX__FieldMap__Fields__const_iterator", "FIX::FieldMap::Fields::const_iterator *|FIX::FieldMap::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FieldMap__Groups__const_iterator = {"_p_FIX__FieldMap__Groups__const_iterator", "FIX::FieldMap::Groups::const_iterator *|FIX::FieldMap::g_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FieldNotFound = {"_p_FIX__FieldNotFound", "FIX::FieldNotFound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FileLog = {"_p_FIX__FileLog", "FIX::FileLog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FileLogFactory = {"_p_FIX__FileLogFactory", "FIX::FileLogFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FileStore = {"_p_FIX__FileStore", "FIX::FileStore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FileStoreFactory = {"_p_FIX__FileStoreFactory", "FIX::FileStoreFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FutSettDate = {"_p_FIX__FutSettDate", "FIX::FutSettDate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__FutSettDate2 = {"_p_FIX__FutSettDate2", "FIX::FutSettDate2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Group = {"_p_FIX__Group", "FIX::Group *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__IDSource = {"_p_FIX__IDSource", "FIX::IDSource *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__IOException = {"_p_FIX__IOException", "FIX::IOException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__IOIOthSvc = {"_p_FIX__IOIOthSvc", "FIX::IOIOthSvc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__IOIShares = {"_p_FIX__IOIShares", "FIX::IOIShares *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__IncorrectDataFormat = {"_p_FIX__IncorrectDataFormat", "FIX::IncorrectDataFormat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__IncorrectMessageStructure = {"_p_FIX__IncorrectMessageStructure", "FIX::IncorrectMessageStructure *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__IncorrectTagValue = {"_p_FIX__IncorrectTagValue", "FIX::IncorrectTagValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Initiator = {"_p_FIX__Initiator", "FIX::Initiator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__IntField = {"_p_FIX__IntField", "FIX::IntField *|FIX::SeqNumField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__InvalidMessage = {"_p_FIX__InvalidMessage", "FIX::InvalidMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__InvalidMessageType = {"_p_FIX__InvalidMessageType", "FIX::InvalidMessageType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__InvalidTagNumber = {"_p_FIX__InvalidTagNumber", "FIX::InvalidTagNumber *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__LastShares = {"_p_FIX__LastShares", "FIX::LastShares *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__LegFutSettDate = {"_p_FIX__LegFutSettDate", "FIX::LegFutSettDate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__LegSettlmntTyp = {"_p_FIX__LegSettlmntTyp", "FIX::LegSettlmntTyp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Log = {"_p_FIX__Log", "FIX::Log *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__LogFactory = {"_p_FIX__LogFactory", "FIX::LogFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__MaturityDay = {"_p_FIX__MaturityDay", "FIX::MaturityDay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__MemoryStore = {"_p_FIX__MemoryStore", "FIX::MemoryStore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__MemoryStoreFactory = {"_p_FIX__MemoryStoreFactory", "FIX::MemoryStoreFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Message = {"_p_FIX__Message", "FIX::Message *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__MessageParseError = {"_p_FIX__MessageParseError", "FIX::MessageParseError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__MessageStore = {"_p_FIX__MessageStore", "FIX::MessageStore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__MessageStoreExceptionWrapper = {"_p_FIX__MessageStoreExceptionWrapper", "FIX::MessageStoreExceptionWrapper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__MessageStoreFactory = {"_p_FIX__MessageStoreFactory", "FIX::MessageStoreFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__MessageStoreFactoryExceptionWrapper = {"_p_FIX__MessageStoreFactoryExceptionWrapper", "FIX::MessageStoreFactoryExceptionWrapper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__NoTagValue = {"_p_FIX__NoTagValue", "FIX::NoTagValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__NullApplication = {"_p_FIX__NullApplication", "FIX::NullApplication *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__OnBehalfOfSendingTime = {"_p_FIX__OnBehalfOfSendingTime", "FIX::OnBehalfOfSendingTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__OpenClose = {"_p_FIX__OpenClose", "FIX::OpenClose *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__OpenCloseSettleFlag = {"_p_FIX__OpenCloseSettleFlag", "FIX::OpenCloseSettleFlag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__PegDifference = {"_p_FIX__PegDifference", "FIX::PegDifference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__PutOrCall = {"_p_FIX__PutOrCall", "FIX::PutOrCall *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__QuoteAckStatus = {"_p_FIX__QuoteAckStatus", "FIX::QuoteAckStatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__RatioQty = {"_p_FIX__RatioQty", "FIX::RatioQty *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__RegistDetls = {"_p_FIX__RegistDetls", "FIX::RegistDetls *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__RejectLogon = {"_p_FIX__RejectLogon", "FIX::RejectLogon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__RelatdSym = {"_p_FIX__RelatdSym", "FIX::RelatdSym *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__RepeatedTag = {"_p_FIX__RepeatedTag", "FIX::RepeatedTag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__RepeatingGroupCountMismatch = {"_p_FIX__RepeatingGroupCountMismatch", "FIX::RepeatingGroupCountMismatch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__RequiredTagMissing = {"_p_FIX__RequiredTagMissing", "FIX::RequiredTagMissing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Rule80A = {"_p_FIX__Rule80A", "FIX::Rule80A *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__RuntimeError = {"_p_FIX__RuntimeError", "FIX::RuntimeError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__ScreenLog = {"_p_FIX__ScreenLog", "FIX::ScreenLog *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__ScreenLogFactory = {"_p_FIX__ScreenLogFactory", "FIX::ScreenLogFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SecuritySettlAgentAcctName = {"_p_FIX__SecuritySettlAgentAcctName", "FIX::SecuritySettlAgentAcctName *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SecuritySettlAgentAcctNum = {"_p_FIX__SecuritySettlAgentAcctNum", "FIX::SecuritySettlAgentAcctNum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SecuritySettlAgentCode = {"_p_FIX__SecuritySettlAgentCode", "FIX::SecuritySettlAgentCode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SecuritySettlAgentContactName = {"_p_FIX__SecuritySettlAgentContactName", "FIX::SecuritySettlAgentContactName *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SecuritySettlAgentContactPhone = {"_p_FIX__SecuritySettlAgentContactPhone", "FIX::SecuritySettlAgentContactPhone *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SecuritySettlAgentName = {"_p_FIX__SecuritySettlAgentName", "FIX::SecuritySettlAgentName *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Session = {"_p_FIX__Session", "FIX::Session *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SessionID = {"_p_FIX__SessionID", "FIX::SessionID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SessionNotFound = {"_p_FIX__SessionNotFound", "FIX::SessionNotFound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SessionSettings = {"_p_FIX__SessionSettings", "FIX::SessionSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SettlBrkrCode = {"_p_FIX__SettlBrkrCode", "FIX::SettlBrkrCode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SettlDepositoryCode = {"_p_FIX__SettlDepositoryCode", "FIX::SettlDepositoryCode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SettlInstCode = {"_p_FIX__SettlInstCode", "FIX::SettlInstCode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SettlLocation = {"_p_FIX__SettlLocation", "FIX::SettlLocation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SettlmntTyp = {"_p_FIX__SettlmntTyp", "FIX::SettlmntTyp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__Shares = {"_p_FIX__Shares", "FIX::Shares *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SocketAcceptor = {"_p_FIX__SocketAcceptor", "FIX::SocketAcceptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SocketCloseFailed = {"_p_FIX__SocketCloseFailed", "FIX::SocketCloseFailed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SocketException = {"_p_FIX__SocketException", "FIX::SocketException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SocketInitiator = {"_p_FIX__SocketInitiator", "FIX::SocketInitiator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SocketRecvFailed = {"_p_FIX__SocketRecvFailed", "FIX::SocketRecvFailed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SocketSendFailed = {"_p_FIX__SocketSendFailed", "FIX::SocketSendFailed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SpreadToBenchmark = {"_p_FIX__SpreadToBenchmark", "FIX::SpreadToBenchmark *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__StringField = {"_p_FIX__StringField", "FIX::StringField *|FIX::CountryField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__SynchronizedApplication = {"_p_FIX__SynchronizedApplication", "FIX::SynchronizedApplication *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__TagNotDefinedForMessage = {"_p_FIX__TagNotDefinedForMessage", "FIX::TagNotDefinedForMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__TagOutOfOrder = {"_p_FIX__TagOutOfOrder", "FIX::TagOutOfOrder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__TotQuoteEntries = {"_p_FIX__TotQuoteEntries", "FIX::TotQuoteEntries *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__TotalNumSecurities = {"_p_FIX__TotalNumSecurities", "FIX::TotalNumSecurities *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__TotalNumSecurityTypes = {"_p_FIX__TotalNumSecurityTypes", "FIX::TotalNumSecurityTypes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__TotalVolumeTradedDate = {"_p_FIX__TotalVolumeTradedDate", "FIX::TotalVolumeTradedDate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__TotalVolumeTradedTime = {"_p_FIX__TotalVolumeTradedTime", "FIX::TotalVolumeTradedTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__TradeType = {"_p_FIX__TradeType", "FIX::TradeType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__UnderlyingIDSource = {"_p_FIX__UnderlyingIDSource", "FIX::UnderlyingIDSource *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__UnderlyingMaturityDay = {"_p_FIX__UnderlyingMaturityDay", "FIX::UnderlyingMaturityDay *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__UnderlyingPutOrCall = {"_p_FIX__UnderlyingPutOrCall", "FIX::UnderlyingPutOrCall *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__UnsupportedMessageType = {"_p_FIX__UnsupportedMessageType", "FIX::UnsupportedMessageType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__UnsupportedVersion = {"_p_FIX__UnsupportedVersion", "FIX::UnsupportedVersion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__UtcDateField = {"_p_FIX__UtcDateField", "FIX::UtcDateField *|FIX::UtcDateOnlyField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__UtcTimeOnlyField = {"_p_FIX__UtcTimeOnlyField", "FIX::UtcTimeOnlyField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIX__UtcTimeStampField = {"_p_FIX__UtcTimeStampField", "FIX::UtcTimeStampField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Fields = {"_p_Fields", "Fields *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Group = {"_p_Group", "Group *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Groups = {"_p_Groups", "Groups *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntArray = {"_p_IntArray", "IntArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntField = {"_p_IntField", "IntField *|SeqNumField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Log = {"_p_Log", "Log *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LogFactory = {"_p_LogFactory", "LogFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MessageStore = {"_p_MessageStore", "MessageStore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MessageStoreFactory = {"_p_MessageStoreFactory", "MessageStoreFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MsgType = {"_p_MsgType", "MsgType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mutex = {"_p_Mutex", "Mutex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Responder = {"_p_Responder", "Responder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SenderCompID = {"_p_SenderCompID", "SenderCompID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SessionID = {"_p_SessionID", "SessionID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SessionTime = {"_p_SessionTime", "SessionTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StringField = {"_p_StringField", "StringField *|CountryField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TYPE__Type = {"_p_TYPE__Type", "TYPE::Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TargetCompID = {"_p_TargetCompID", "TargetCompID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UtcDate = {"_p_UtcDate", "UtcDate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UtcDateField = {"_p_UtcDateField", "UtcDateField *|UtcDateOnlyField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UtcDateOnly = {"_p_UtcDateOnly", "UtcDateOnly *|UTCDATEONLY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UtcTimeOnly = {"_p_UtcTimeOnly", "UtcTimeOnly *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UtcTimeStamp = {"_p_UtcTimeStamp", "UtcTimeStamp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|CHAR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|PERCENTAGE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_g_const_iterator = {"_p_g_const_iterator", "g_const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_g_iterator = {"_p_g_iterator", "g_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_message_order = {"_p_message_order", "message_order *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_FIX__DataDictionary = {"_p_p_FIX__DataDictionary", "FIX::DataDictionary **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setTFIX__SessionID_t = {"_p_std__setTFIX__SessionID_t", "std::set<FIX::SessionID > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string__size_type = {"_p_std__string__size_type", "std::string::size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTstd__string_t = {"_p_std__vectorTstd__string_t", "std::vector<std::string > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Application,
  &_swigt__p_BeginString,
  &_swigt__p_DOMDocumentPtr,
  &_swigt__p_Data,
  &_swigt__p_DataDictionary,
  &_swigt__p_Dictionaries,
  &_swigt__p_DoubleField,
  &_swigt__p_FIELD__Field,
  &_swigt__p_FIX_CHAR,
  &_swigt__p_FIX_DAYOFMONTH,
  &_swigt__p_FIX_INT,
  &_swigt__p_FIX_LOCALMKTDATE,
  &_swigt__p_FIX_PRICEOFFSET,
  &_swigt__p_FIX_QTY,
  &_swigt__p_FIX_STRING,
  &_swigt__p_FIX_UTCDATE,
  &_swigt__p_FIX_UTCTIMEONLY,
  &_swigt__p_FIX_UTCTIMESTAMP,
  &_swigt__p_FIX__Acceptor,
  &_swigt__p_FIX__AllocShares,
  &_swigt__p_FIX__Application,
  &_swigt__p_FIX__AvgPrxPrecision,
  &_swigt__p_FIX__Benchmark,
  &_swigt__p_FIX__BoolField,
  &_swigt__p_FIX__BrokerOfCredit,
  &_swigt__p_FIX__CardIssNo,
  &_swigt__p_FIX__CashSettlAgentAcctName,
  &_swigt__p_FIX__CashSettlAgentAcctNum,
  &_swigt__p_FIX__CashSettlAgentCode,
  &_swigt__p_FIX__CashSettlAgentContactName,
  &_swigt__p_FIX__CashSettlAgentContactPhone,
  &_swigt__p_FIX__CashSettlAgentName,
  &_swigt__p_FIX__CharField,
  &_swigt__p_FIX__CheckSumField,
  &_swigt__p_FIX__ClearingAccount,
  &_swigt__p_FIX__ClearingFirm,
  &_swigt__p_FIX__ClientID,
  &_swigt__p_FIX__ConfigError,
  &_swigt__p_FIX__CustomerOrFirm,
  &_swigt__p_FIX__CxlType,
  &_swigt__p_FIX__DataDictionary,
  &_swigt__p_FIX__Dictionary,
  &_swigt__p_FIX__Dictionary__Data__const_iterator,
  &_swigt__p_FIX__DiscretionOffset,
  &_swigt__p_FIX__DlvyInst,
  &_swigt__p_FIX__DoNotSend,
  &_swigt__p_FIX__DoubleField,
  &_swigt__p_FIX__DuplicateFieldNumber,
  &_swigt__p_FIX__Exception,
  &_swigt__p_FIX__ExecBroker,
  &_swigt__p_FIX__ExecTransType,
  &_swigt__p_FIX__FieldBase,
  &_swigt__p_FIX__FieldConvertError,
  &_swigt__p_FIX__FieldMap,
  &_swigt__p_FIX__FieldMap__Fields__const_iterator,
  &_swigt__p_FIX__FieldMap__Groups__const_iterator,
  &_swigt__p_FIX__FieldNotFound,
  &_swigt__p_FIX__FileLog,
  &_swigt__p_FIX__FileLogFactory,
  &_swigt__p_FIX__FileStore,
  &_swigt__p_FIX__FileStoreFactory,
  &_swigt__p_FIX__FutSettDate,
  &_swigt__p_FIX__FutSettDate2,
  &_swigt__p_FIX__Group,
  &_swigt__p_FIX__IDSource,
  &_swigt__p_FIX__IOException,
  &_swigt__p_FIX__IOIOthSvc,
  &_swigt__p_FIX__IOIShares,
  &_swigt__p_FIX__IncorrectDataFormat,
  &_swigt__p_FIX__IncorrectMessageStructure,
  &_swigt__p_FIX__IncorrectTagValue,
  &_swigt__p_FIX__Initiator,
  &_swigt__p_FIX__IntField,
  &_swigt__p_FIX__InvalidMessage,
  &_swigt__p_FIX__InvalidMessageType,
  &_swigt__p_FIX__InvalidTagNumber,
  &_swigt__p_FIX__LastShares,
  &_swigt__p_FIX__LegFutSettDate,
  &_swigt__p_FIX__LegSettlmntTyp,
  &_swigt__p_FIX__Log,
  &_swigt__p_FIX__LogFactory,
  &_swigt__p_FIX__MaturityDay,
  &_swigt__p_FIX__MemoryStore,
  &_swigt__p_FIX__MemoryStoreFactory,
  &_swigt__p_FIX__Message,
  &_swigt__p_FIX__MessageParseError,
  &_swigt__p_FIX__MessageStore,
  &_swigt__p_FIX__MessageStoreExceptionWrapper,
  &_swigt__p_FIX__MessageStoreFactory,
  &_swigt__p_FIX__MessageStoreFactoryExceptionWrapper,
  &_swigt__p_FIX__NoTagValue,
  &_swigt__p_FIX__NullApplication,
  &_swigt__p_FIX__OnBehalfOfSendingTime,
  &_swigt__p_FIX__OpenClose,
  &_swigt__p_FIX__OpenCloseSettleFlag,
  &_swigt__p_FIX__PegDifference,
  &_swigt__p_FIX__PutOrCall,
  &_swigt__p_FIX__QuoteAckStatus,
  &_swigt__p_FIX__RatioQty,
  &_swigt__p_FIX__RegistDetls,
  &_swigt__p_FIX__RejectLogon,
  &_swigt__p_FIX__RelatdSym,
  &_swigt__p_FIX__RepeatedTag,
  &_swigt__p_FIX__RepeatingGroupCountMismatch,
  &_swigt__p_FIX__RequiredTagMissing,
  &_swigt__p_FIX__Rule80A,
  &_swigt__p_FIX__RuntimeError,
  &_swigt__p_FIX__ScreenLog,
  &_swigt__p_FIX__ScreenLogFactory,
  &_swigt__p_FIX__SecuritySettlAgentAcctName,
  &_swigt__p_FIX__SecuritySettlAgentAcctNum,
  &_swigt__p_FIX__SecuritySettlAgentCode,
  &_swigt__p_FIX__SecuritySettlAgentContactName,
  &_swigt__p_FIX__SecuritySettlAgentContactPhone,
  &_swigt__p_FIX__SecuritySettlAgentName,
  &_swigt__p_FIX__Session,
  &_swigt__p_FIX__SessionID,
  &_swigt__p_FIX__SessionNotFound,
  &_swigt__p_FIX__SessionSettings,
  &_swigt__p_FIX__SettlBrkrCode,
  &_swigt__p_FIX__SettlDepositoryCode,
  &_swigt__p_FIX__SettlInstCode,
  &_swigt__p_FIX__SettlLocation,
  &_swigt__p_FIX__SettlmntTyp,
  &_swigt__p_FIX__Shares,
  &_swigt__p_FIX__SocketAcceptor,
  &_swigt__p_FIX__SocketCloseFailed,
  &_swigt__p_FIX__SocketException,
  &_swigt__p_FIX__SocketInitiator,
  &_swigt__p_FIX__SocketRecvFailed,
  &_swigt__p_FIX__SocketSendFailed,
  &_swigt__p_FIX__SpreadToBenchmark,
  &_swigt__p_FIX__StringField,
  &_swigt__p_FIX__SynchronizedApplication,
  &_swigt__p_FIX__TagNotDefinedForMessage,
  &_swigt__p_FIX__TagOutOfOrder,
  &_swigt__p_FIX__TotQuoteEntries,
  &_swigt__p_FIX__TotalNumSecurities,
  &_swigt__p_FIX__TotalNumSecurityTypes,
  &_swigt__p_FIX__TotalVolumeTradedDate,
  &_swigt__p_FIX__TotalVolumeTradedTime,
  &_swigt__p_FIX__TradeType,
  &_swigt__p_FIX__UnderlyingIDSource,
  &_swigt__p_FIX__UnderlyingMaturityDay,
  &_swigt__p_FIX__UnderlyingPutOrCall,
  &_swigt__p_FIX__UnsupportedMessageType,
  &_swigt__p_FIX__UnsupportedVersion,
  &_swigt__p_FIX__UtcDateField,
  &_swigt__p_FIX__UtcTimeOnlyField,
  &_swigt__p_FIX__UtcTimeStampField,
  &_swigt__p_Fields,
  &_swigt__p_Group,
  &_swigt__p_Groups,
  &_swigt__p_IntArray,
  &_swigt__p_IntField,
  &_swigt__p_Log,
  &_swigt__p_LogFactory,
  &_swigt__p_MessageStore,
  &_swigt__p_MessageStoreFactory,
  &_swigt__p_MsgType,
  &_swigt__p_Mutex,
  &_swigt__p_Responder,
  &_swigt__p_SenderCompID,
  &_swigt__p_SessionID,
  &_swigt__p_SessionTime,
  &_swigt__p_StringField,
  &_swigt__p_TYPE__Type,
  &_swigt__p_TargetCompID,
  &_swigt__p_UtcDate,
  &_swigt__p_UtcDateField,
  &_swigt__p_UtcDateOnly,
  &_swigt__p_UtcTimeOnly,
  &_swigt__p_UtcTimeStamp,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_double,
  &_swigt__p_g_const_iterator,
  &_swigt__p_g_iterator,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_message_order,
  &_swigt__p_p_FIX__DataDictionary,
  &_swigt__p_std__istream,
  &_swigt__p_std__ostream,
  &_swigt__p_std__setTFIX__SessionID_t,
  &_swigt__p_std__string,
  &_swigt__p_std__string__size_type,
  &_swigt__p_std__vectorTstd__string_t,
};

static swig_cast_info _swigc__p_Application[] = {  {&_swigt__p_Application, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BeginString[] = {  {&_swigt__p_BeginString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DOMDocumentPtr[] = {  {&_swigt__p_DOMDocumentPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Data[] = {  {&_swigt__p_Data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataDictionary[] = {  {&_swigt__p_DataDictionary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dictionaries[] = {  {&_swigt__p_Dictionaries, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DoubleField[] = {  {&_swigt__p_DoubleField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIELD__Field[] = {  {&_swigt__p_FIELD__Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX_CHAR[] = {  {&_swigt__p_FIX_CHAR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX_DAYOFMONTH[] = {  {&_swigt__p_FIX_DAYOFMONTH, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX_INT[] = {  {&_swigt__p_FIX_INT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX_LOCALMKTDATE[] = {  {&_swigt__p_FIX_LOCALMKTDATE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX_PRICEOFFSET[] = {  {&_swigt__p_FIX_PRICEOFFSET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX_QTY[] = {  {&_swigt__p_FIX_QTY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX_STRING[] = {  {&_swigt__p_FIX_STRING, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX_UTCDATE[] = {  {&_swigt__p_FIX_UTCDATE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX_UTCTIMEONLY[] = {  {&_swigt__p_FIX_UTCTIMEONLY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX_UTCTIMESTAMP[] = {  {&_swigt__p_FIX_UTCTIMESTAMP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Acceptor[] = {  {&_swigt__p_FIX__Acceptor, 0, 0, 0},  {&_swigt__p_FIX__SocketAcceptor, _p_FIX__SocketAcceptorTo_p_FIX__Acceptor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__AllocShares[] = {  {&_swigt__p_FIX__AllocShares, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Application[] = {  {&_swigt__p_FIX__Application, 0, 0, 0},  {&_swigt__p_FIX__SynchronizedApplication, _p_FIX__SynchronizedApplicationTo_p_FIX__Application, 0, 0},  {&_swigt__p_FIX__NullApplication, _p_FIX__NullApplicationTo_p_FIX__Application, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__AvgPrxPrecision[] = {  {&_swigt__p_FIX__AvgPrxPrecision, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Benchmark[] = {  {&_swigt__p_FIX__Benchmark, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__BoolField[] = {  {&_swigt__p_FIX__BoolField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__BrokerOfCredit[] = {  {&_swigt__p_FIX__BrokerOfCredit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__CardIssNo[] = {  {&_swigt__p_FIX__CardIssNo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__CashSettlAgentAcctName[] = {  {&_swigt__p_FIX__CashSettlAgentAcctName, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__CashSettlAgentAcctNum[] = {  {&_swigt__p_FIX__CashSettlAgentAcctNum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__CashSettlAgentCode[] = {  {&_swigt__p_FIX__CashSettlAgentCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__CashSettlAgentContactName[] = {  {&_swigt__p_FIX__CashSettlAgentContactName, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__CashSettlAgentContactPhone[] = {  {&_swigt__p_FIX__CashSettlAgentContactPhone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__CashSettlAgentName[] = {  {&_swigt__p_FIX__CashSettlAgentName, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__CharField[] = {  {&_swigt__p_FIX__CharField, 0, 0, 0},  {&_swigt__p_FIX__Rule80A, _p_FIX__Rule80ATo_p_FIX__CharField, 0, 0},  {&_swigt__p_FIX__Benchmark, _p_FIX__BenchmarkTo_p_FIX__CharField, 0, 0},  {&_swigt__p_FIX__SettlmntTyp, _p_FIX__SettlmntTypTo_p_FIX__CharField, 0, 0},  {&_swigt__p_FIX__LegSettlmntTyp, _p_FIX__LegSettlmntTypTo_p_FIX__CharField, 0, 0},  {&_swigt__p_FIX__OpenClose, _p_FIX__OpenCloseTo_p_FIX__CharField, 0, 0},  {&_swigt__p_FIX__CxlType, _p_FIX__CxlTypeTo_p_FIX__CharField, 0, 0},  {&_swigt__p_FIX__ExecTransType, _p_FIX__ExecTransTypeTo_p_FIX__CharField, 0, 0},  {&_swigt__p_FIX__DlvyInst, _p_FIX__DlvyInstTo_p_FIX__CharField, 0, 0},  {&_swigt__p_FIX__IOIOthSvc, _p_FIX__IOIOthSvcTo_p_FIX__CharField, 0, 0},  {&_swigt__p_FIX__TradeType, _p_FIX__TradeTypeTo_p_FIX__CharField, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__CheckSumField[] = {  {&_swigt__p_FIX__CheckSumField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__ClearingAccount[] = {  {&_swigt__p_FIX__ClearingAccount, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__ClearingFirm[] = {  {&_swigt__p_FIX__ClearingFirm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__ClientID[] = {  {&_swigt__p_FIX__ClientID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__ConfigError[] = {  {&_swigt__p_FIX__ConfigError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__CustomerOrFirm[] = {  {&_swigt__p_FIX__CustomerOrFirm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__CxlType[] = {  {&_swigt__p_FIX__CxlType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__DataDictionary[] = {  {&_swigt__p_FIX__DataDictionary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Dictionary[] = {  {&_swigt__p_FIX__Dictionary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Dictionary__Data__const_iterator[] = {  {&_swigt__p_FIX__Dictionary__Data__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__DiscretionOffset[] = {  {&_swigt__p_FIX__DiscretionOffset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__DlvyInst[] = {  {&_swigt__p_FIX__DlvyInst, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__DoNotSend[] = {  {&_swigt__p_FIX__DoNotSend, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__DoubleField[] = {  {&_swigt__p_FIX__SpreadToBenchmark, _p_FIX__SpreadToBenchmarkTo_p_FIX__DoubleField, 0, 0},  {&_swigt__p_FIX__RatioQty, _p_FIX__RatioQtyTo_p_FIX__DoubleField, 0, 0},  {&_swigt__p_FIX__DiscretionOffset, _p_FIX__DiscretionOffsetTo_p_FIX__DoubleField, 0, 0},  {&_swigt__p_FIX__DoubleField, 0, 0, 0},  {&_swigt__p_FIX__LastShares, _p_FIX__LastSharesTo_p_FIX__DoubleField, 0, 0},  {&_swigt__p_FIX__Shares, _p_FIX__SharesTo_p_FIX__DoubleField, 0, 0},  {&_swigt__p_FIX__PegDifference, _p_FIX__PegDifferenceTo_p_FIX__DoubleField, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__DuplicateFieldNumber[] = {  {&_swigt__p_FIX__DuplicateFieldNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Exception[] = {  {&_swigt__p_FIX__RequiredTagMissing, _p_FIX__RequiredTagMissingTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__SocketSendFailed, _p_FIX__SocketSendFailedTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__SocketRecvFailed, _p_FIX__SocketRecvFailedTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__InvalidTagNumber, _p_FIX__InvalidTagNumberTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__RejectLogon, _p_FIX__RejectLogonTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__IncorrectDataFormat, _p_FIX__IncorrectDataFormatTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__TagNotDefinedForMessage, _p_FIX__TagNotDefinedForMessageTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__InvalidMessage, _p_FIX__InvalidMessageTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__DoNotSend, _p_FIX__DoNotSendTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__DuplicateFieldNumber, _p_FIX__DuplicateFieldNumberTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__RuntimeError, _p_FIX__RuntimeErrorTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__MessageParseError, _p_FIX__MessageParseErrorTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__FieldNotFound, _p_FIX__FieldNotFoundTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__SessionNotFound, _p_FIX__SessionNotFoundTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__Exception, 0, 0, 0},  {&_swigt__p_FIX__IOException, _p_FIX__IOExceptionTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__SocketException, _p_FIX__SocketExceptionTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__ConfigError, _p_FIX__ConfigErrorTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__InvalidMessageType, _p_FIX__InvalidMessageTypeTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__UnsupportedMessageType, _p_FIX__UnsupportedMessageTypeTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__UnsupportedVersion, _p_FIX__UnsupportedVersionTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__IncorrectTagValue, _p_FIX__IncorrectTagValueTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__NoTagValue, _p_FIX__NoTagValueTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__SocketCloseFailed, _p_FIX__SocketCloseFailedTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__TagOutOfOrder, _p_FIX__TagOutOfOrderTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__RepeatedTag, _p_FIX__RepeatedTagTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__FieldConvertError, _p_FIX__FieldConvertErrorTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__IncorrectMessageStructure, _p_FIX__IncorrectMessageStructureTo_p_FIX__Exception, 0, 0},  {&_swigt__p_FIX__RepeatingGroupCountMismatch, _p_FIX__RepeatingGroupCountMismatchTo_p_FIX__Exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__ExecBroker[] = {  {&_swigt__p_FIX__ExecBroker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__ExecTransType[] = {  {&_swigt__p_FIX__ExecTransType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FieldBase[] = {  {&_swigt__p_FIX__QuoteAckStatus, _p_FIX__QuoteAckStatusTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__OpenCloseSettleFlag, _p_FIX__OpenCloseSettleFlagTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__DoubleField, _p_FIX__DoubleFieldTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__UtcDateField, _p_FIX__UtcDateFieldTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__TotalVolumeTradedDate, _p_FIX__TotalVolumeTradedDateTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentName, _p_FIX__SecuritySettlAgentNameTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__CashSettlAgentName, _p_FIX__CashSettlAgentNameTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__CheckSumField, _p_FIX__CheckSumFieldTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__TotalNumSecurityTypes, _p_FIX__TotalNumSecurityTypesTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__IOIShares, _p_FIX__IOISharesTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__AllocShares, _p_FIX__AllocSharesTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__Shares, _p_FIX__SharesTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentContactName, _p_FIX__SecuritySettlAgentContactNameTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentAcctName, _p_FIX__SecuritySettlAgentAcctNameTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__CashSettlAgentAcctName, _p_FIX__CashSettlAgentAcctNameTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__CashSettlAgentContactName, _p_FIX__CashSettlAgentContactNameTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__FutSettDate2, _p_FIX__FutSettDate2To_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__RelatdSym, _p_FIX__RelatdSymTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__FutSettDate, _p_FIX__FutSettDateTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__LegFutSettDate, _p_FIX__LegFutSettDateTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__PegDifference, _p_FIX__PegDifferenceTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__RegistDetls, _p_FIX__RegistDetlsTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__StringField, _p_FIX__StringFieldTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SettlLocation, _p_FIX__SettlLocationTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__IntField, _p_FIX__IntFieldTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__CardIssNo, _p_FIX__CardIssNoTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__ClearingAccount, _p_FIX__ClearingAccountTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__TotQuoteEntries, _p_FIX__TotQuoteEntriesTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__PutOrCall, _p_FIX__PutOrCallTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__UnderlyingPutOrCall, _p_FIX__UnderlyingPutOrCallTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__IOIOthSvc, _p_FIX__IOIOthSvcTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__TotalVolumeTradedTime, _p_FIX__TotalVolumeTradedTimeTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__IDSource, _p_FIX__IDSourceTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__UnderlyingIDSource, _p_FIX__UnderlyingIDSourceTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__DlvyInst, _p_FIX__DlvyInstTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__FieldBase, 0, 0, 0},  {&_swigt__p_FIX__ClearingFirm, _p_FIX__ClearingFirmTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SpreadToBenchmark, _p_FIX__SpreadToBenchmarkTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__Benchmark, _p_FIX__BenchmarkTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SettlDepositoryCode, _p_FIX__SettlDepositoryCodeTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__BoolField, _p_FIX__BoolFieldTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__BrokerOfCredit, _p_FIX__BrokerOfCreditTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__OnBehalfOfSendingTime, _p_FIX__OnBehalfOfSendingTimeTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__OpenClose, _p_FIX__OpenCloseTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__DiscretionOffset, _p_FIX__DiscretionOffsetTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__CashSettlAgentContactPhone, _p_FIX__CashSettlAgentContactPhoneTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentContactPhone, _p_FIX__SecuritySettlAgentContactPhoneTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__AvgPrxPrecision, _p_FIX__AvgPrxPrecisionTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__ExecTransType, _p_FIX__ExecTransTypeTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__UtcTimeStampField, _p_FIX__UtcTimeStampFieldTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__RatioQty, _p_FIX__RatioQtyTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SettlBrkrCode, _p_FIX__SettlBrkrCodeTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__ExecBroker, _p_FIX__ExecBrokerTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__CustomerOrFirm, _p_FIX__CustomerOrFirmTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__CharField, _p_FIX__CharFieldTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__LastShares, _p_FIX__LastSharesTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__TradeType, _p_FIX__TradeTypeTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__CashSettlAgentAcctNum, _p_FIX__CashSettlAgentAcctNumTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentAcctNum, _p_FIX__SecuritySettlAgentAcctNumTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__Rule80A, _p_FIX__Rule80ATo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__CxlType, _p_FIX__CxlTypeTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__UtcTimeOnlyField, _p_FIX__UtcTimeOnlyFieldTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SettlInstCode, _p_FIX__SettlInstCodeTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentCode, _p_FIX__SecuritySettlAgentCodeTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__CashSettlAgentCode, _p_FIX__CashSettlAgentCodeTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__TotalNumSecurities, _p_FIX__TotalNumSecuritiesTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__UnderlyingMaturityDay, _p_FIX__UnderlyingMaturityDayTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__MaturityDay, _p_FIX__MaturityDayTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__ClientID, _p_FIX__ClientIDTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__SettlmntTyp, _p_FIX__SettlmntTypTo_p_FIX__FieldBase, 0, 0},  {&_swigt__p_FIX__LegSettlmntTyp, _p_FIX__LegSettlmntTypTo_p_FIX__FieldBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FieldConvertError[] = {  {&_swigt__p_FIX__FieldConvertError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FieldMap[] = {  {&_swigt__p_FIX__Group, _p_FIX__GroupTo_p_FIX__FieldMap, 0, 0},  {&_swigt__p_FIX__Message, _p_FIX__MessageTo_p_FIX__FieldMap, 0, 0},  {&_swigt__p_FIX__FieldMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FieldMap__Fields__const_iterator[] = {  {&_swigt__p_FIX__FieldMap__Fields__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FieldMap__Groups__const_iterator[] = {  {&_swigt__p_FIX__FieldMap__Groups__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FieldNotFound[] = {  {&_swigt__p_FIX__FieldNotFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FileLog[] = {  {&_swigt__p_FIX__FileLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FileLogFactory[] = {  {&_swigt__p_FIX__FileLogFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FileStore[] = {  {&_swigt__p_FIX__FileStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FileStoreFactory[] = {  {&_swigt__p_FIX__FileStoreFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FutSettDate[] = {  {&_swigt__p_FIX__FutSettDate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__FutSettDate2[] = {  {&_swigt__p_FIX__FutSettDate2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Group[] = {  {&_swigt__p_FIX__Group, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__IDSource[] = {  {&_swigt__p_FIX__IDSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__IOException[] = {  {&_swigt__p_FIX__IOException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__IOIOthSvc[] = {  {&_swigt__p_FIX__IOIOthSvc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__IOIShares[] = {  {&_swigt__p_FIX__IOIShares, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__IncorrectDataFormat[] = {  {&_swigt__p_FIX__IncorrectDataFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__IncorrectMessageStructure[] = {  {&_swigt__p_FIX__IncorrectMessageStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__IncorrectTagValue[] = {  {&_swigt__p_FIX__IncorrectTagValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Initiator[] = {  {&_swigt__p_FIX__Initiator, 0, 0, 0},  {&_swigt__p_FIX__SocketInitiator, _p_FIX__SocketInitiatorTo_p_FIX__Initiator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__IntField[] = {  {&_swigt__p_FIX__CustomerOrFirm, _p_FIX__CustomerOrFirmTo_p_FIX__IntField, 0, 0},  {&_swigt__p_FIX__QuoteAckStatus, _p_FIX__QuoteAckStatusTo_p_FIX__IntField, 0, 0},  {&_swigt__p_FIX__AvgPrxPrecision, _p_FIX__AvgPrxPrecisionTo_p_FIX__IntField, 0, 0},  {&_swigt__p_FIX__AllocShares, _p_FIX__AllocSharesTo_p_FIX__IntField, 0, 0},  {&_swigt__p_FIX__IntField, 0, 0, 0},  {&_swigt__p_FIX__TotQuoteEntries, _p_FIX__TotQuoteEntriesTo_p_FIX__IntField, 0, 0},  {&_swigt__p_FIX__TotalNumSecurityTypes, _p_FIX__TotalNumSecurityTypesTo_p_FIX__IntField, 0, 0},  {&_swigt__p_FIX__PutOrCall, _p_FIX__PutOrCallTo_p_FIX__IntField, 0, 0},  {&_swigt__p_FIX__UnderlyingPutOrCall, _p_FIX__UnderlyingPutOrCallTo_p_FIX__IntField, 0, 0},  {&_swigt__p_FIX__TotalNumSecurities, _p_FIX__TotalNumSecuritiesTo_p_FIX__IntField, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__InvalidMessage[] = {  {&_swigt__p_FIX__InvalidMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__InvalidMessageType[] = {  {&_swigt__p_FIX__InvalidMessageType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__InvalidTagNumber[] = {  {&_swigt__p_FIX__InvalidTagNumber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__LastShares[] = {  {&_swigt__p_FIX__LastShares, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__LegFutSettDate[] = {  {&_swigt__p_FIX__LegFutSettDate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__LegSettlmntTyp[] = {  {&_swigt__p_FIX__LegSettlmntTyp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Log[] = {  {&_swigt__p_FIX__Initiator, _p_FIX__InitiatorTo_p_FIX__Log, 0, 0},  {&_swigt__p_FIX__SocketInitiator, _p_FIX__SocketInitiatorTo_p_FIX__Log, 0, 0},  {&_swigt__p_FIX__Acceptor, _p_FIX__AcceptorTo_p_FIX__Log, 0, 0},  {&_swigt__p_FIX__SocketAcceptor, _p_FIX__SocketAcceptorTo_p_FIX__Log, 0, 0},  {&_swigt__p_FIX__Log, 0, 0, 0},  {&_swigt__p_FIX__FileLog, _p_FIX__FileLogTo_p_FIX__Log, 0, 0},  {&_swigt__p_FIX__ScreenLog, _p_FIX__ScreenLogTo_p_FIX__Log, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__LogFactory[] = {  {&_swigt__p_FIX__LogFactory, 0, 0, 0},  {&_swigt__p_FIX__ScreenLogFactory, _p_FIX__ScreenLogFactoryTo_p_FIX__LogFactory, 0, 0},  {&_swigt__p_FIX__FileLogFactory, _p_FIX__FileLogFactoryTo_p_FIX__LogFactory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__MaturityDay[] = {  {&_swigt__p_FIX__MaturityDay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__MemoryStore[] = {  {&_swigt__p_FIX__MemoryStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__MemoryStoreFactory[] = {  {&_swigt__p_FIX__MemoryStoreFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Message[] = {  {&_swigt__p_FIX__Message, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__MessageParseError[] = {  {&_swigt__p_FIX__MessageParseError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__MessageStore[] = {  {&_swigt__p_FIX__MemoryStore, _p_FIX__MemoryStoreTo_p_FIX__MessageStore, 0, 0},  {&_swigt__p_FIX__MessageStore, 0, 0, 0},  {&_swigt__p_FIX__FileStore, _p_FIX__FileStoreTo_p_FIX__MessageStore, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__MessageStoreExceptionWrapper[] = {  {&_swigt__p_FIX__MessageStoreExceptionWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__MessageStoreFactory[] = {  {&_swigt__p_FIX__MessageStoreFactory, 0, 0, 0},  {&_swigt__p_FIX__MemoryStoreFactory, _p_FIX__MemoryStoreFactoryTo_p_FIX__MessageStoreFactory, 0, 0},  {&_swigt__p_FIX__FileStoreFactory, _p_FIX__FileStoreFactoryTo_p_FIX__MessageStoreFactory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__MessageStoreFactoryExceptionWrapper[] = {  {&_swigt__p_FIX__MessageStoreFactoryExceptionWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__NoTagValue[] = {  {&_swigt__p_FIX__NoTagValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__NullApplication[] = {  {&_swigt__p_FIX__NullApplication, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__OnBehalfOfSendingTime[] = {  {&_swigt__p_FIX__OnBehalfOfSendingTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__OpenClose[] = {  {&_swigt__p_FIX__OpenClose, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__OpenCloseSettleFlag[] = {  {&_swigt__p_FIX__OpenCloseSettleFlag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__PegDifference[] = {  {&_swigt__p_FIX__PegDifference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__PutOrCall[] = {  {&_swigt__p_FIX__PutOrCall, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__QuoteAckStatus[] = {  {&_swigt__p_FIX__QuoteAckStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__RatioQty[] = {  {&_swigt__p_FIX__RatioQty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__RegistDetls[] = {  {&_swigt__p_FIX__RegistDetls, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__RejectLogon[] = {  {&_swigt__p_FIX__RejectLogon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__RelatdSym[] = {  {&_swigt__p_FIX__RelatdSym, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__RepeatedTag[] = {  {&_swigt__p_FIX__RepeatedTag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__RepeatingGroupCountMismatch[] = {  {&_swigt__p_FIX__RepeatingGroupCountMismatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__RequiredTagMissing[] = {  {&_swigt__p_FIX__RequiredTagMissing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Rule80A[] = {  {&_swigt__p_FIX__Rule80A, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__RuntimeError[] = {  {&_swigt__p_FIX__RuntimeError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__ScreenLog[] = {  {&_swigt__p_FIX__ScreenLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__ScreenLogFactory[] = {  {&_swigt__p_FIX__ScreenLogFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SecuritySettlAgentAcctName[] = {  {&_swigt__p_FIX__SecuritySettlAgentAcctName, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SecuritySettlAgentAcctNum[] = {  {&_swigt__p_FIX__SecuritySettlAgentAcctNum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SecuritySettlAgentCode[] = {  {&_swigt__p_FIX__SecuritySettlAgentCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SecuritySettlAgentContactName[] = {  {&_swigt__p_FIX__SecuritySettlAgentContactName, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SecuritySettlAgentContactPhone[] = {  {&_swigt__p_FIX__SecuritySettlAgentContactPhone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SecuritySettlAgentName[] = {  {&_swigt__p_FIX__SecuritySettlAgentName, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Session[] = {  {&_swigt__p_FIX__Session, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SessionID[] = {  {&_swigt__p_FIX__SessionID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SessionNotFound[] = {  {&_swigt__p_FIX__SessionNotFound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SessionSettings[] = {  {&_swigt__p_FIX__SessionSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SettlBrkrCode[] = {  {&_swigt__p_FIX__SettlBrkrCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SettlDepositoryCode[] = {  {&_swigt__p_FIX__SettlDepositoryCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SettlInstCode[] = {  {&_swigt__p_FIX__SettlInstCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SettlLocation[] = {  {&_swigt__p_FIX__SettlLocation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SettlmntTyp[] = {  {&_swigt__p_FIX__SettlmntTyp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__Shares[] = {  {&_swigt__p_FIX__Shares, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SocketAcceptor[] = {  {&_swigt__p_FIX__SocketAcceptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SocketCloseFailed[] = {  {&_swigt__p_FIX__SocketCloseFailed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SocketException[] = {  {&_swigt__p_FIX__SocketSendFailed, _p_FIX__SocketSendFailedTo_p_FIX__SocketException, 0, 0},  {&_swigt__p_FIX__SocketRecvFailed, _p_FIX__SocketRecvFailedTo_p_FIX__SocketException, 0, 0},  {&_swigt__p_FIX__SocketException, 0, 0, 0},  {&_swigt__p_FIX__SocketCloseFailed, _p_FIX__SocketCloseFailedTo_p_FIX__SocketException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SocketInitiator[] = {  {&_swigt__p_FIX__SocketInitiator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SocketRecvFailed[] = {  {&_swigt__p_FIX__SocketRecvFailed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SocketSendFailed[] = {  {&_swigt__p_FIX__SocketSendFailed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SpreadToBenchmark[] = {  {&_swigt__p_FIX__SpreadToBenchmark, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__StringField[] = {  {&_swigt__p_FIX__OpenCloseSettleFlag, _p_FIX__OpenCloseSettleFlagTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentName, _p_FIX__SecuritySettlAgentNameTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__CashSettlAgentName, _p_FIX__CashSettlAgentNameTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__IOIShares, _p_FIX__IOISharesTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__CashSettlAgentContactName, _p_FIX__CashSettlAgentContactNameTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__CashSettlAgentAcctName, _p_FIX__CashSettlAgentAcctNameTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentContactName, _p_FIX__SecuritySettlAgentContactNameTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentAcctName, _p_FIX__SecuritySettlAgentAcctNameTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__FutSettDate2, _p_FIX__FutSettDate2To_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__RelatdSym, _p_FIX__RelatdSymTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__LegFutSettDate, _p_FIX__LegFutSettDateTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__FutSettDate, _p_FIX__FutSettDateTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__RegistDetls, _p_FIX__RegistDetlsTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__StringField, 0, 0, 0},  {&_swigt__p_FIX__SettlLocation, _p_FIX__SettlLocationTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__CardIssNo, _p_FIX__CardIssNoTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__ClearingAccount, _p_FIX__ClearingAccountTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__IDSource, _p_FIX__IDSourceTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__UnderlyingIDSource, _p_FIX__UnderlyingIDSourceTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__ClearingFirm, _p_FIX__ClearingFirmTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__SettlDepositoryCode, _p_FIX__SettlDepositoryCodeTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__BrokerOfCredit, _p_FIX__BrokerOfCreditTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentContactPhone, _p_FIX__SecuritySettlAgentContactPhoneTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__CashSettlAgentContactPhone, _p_FIX__CashSettlAgentContactPhoneTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__SettlBrkrCode, _p_FIX__SettlBrkrCodeTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__ExecBroker, _p_FIX__ExecBrokerTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentAcctNum, _p_FIX__SecuritySettlAgentAcctNumTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__CashSettlAgentAcctNum, _p_FIX__CashSettlAgentAcctNumTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__SettlInstCode, _p_FIX__SettlInstCodeTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__CashSettlAgentCode, _p_FIX__CashSettlAgentCodeTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__SecuritySettlAgentCode, _p_FIX__SecuritySettlAgentCodeTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__MaturityDay, _p_FIX__MaturityDayTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__UnderlyingMaturityDay, _p_FIX__UnderlyingMaturityDayTo_p_FIX__StringField, 0, 0},  {&_swigt__p_FIX__ClientID, _p_FIX__ClientIDTo_p_FIX__StringField, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__SynchronizedApplication[] = {  {&_swigt__p_FIX__SynchronizedApplication, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__TagNotDefinedForMessage[] = {  {&_swigt__p_FIX__TagNotDefinedForMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__TagOutOfOrder[] = {  {&_swigt__p_FIX__TagOutOfOrder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__TotQuoteEntries[] = {  {&_swigt__p_FIX__TotQuoteEntries, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__TotalNumSecurities[] = {  {&_swigt__p_FIX__TotalNumSecurities, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__TotalNumSecurityTypes[] = {  {&_swigt__p_FIX__TotalNumSecurityTypes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__TotalVolumeTradedDate[] = {  {&_swigt__p_FIX__TotalVolumeTradedDate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__TotalVolumeTradedTime[] = {  {&_swigt__p_FIX__TotalVolumeTradedTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__TradeType[] = {  {&_swigt__p_FIX__TradeType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__UnderlyingIDSource[] = {  {&_swigt__p_FIX__UnderlyingIDSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__UnderlyingMaturityDay[] = {  {&_swigt__p_FIX__UnderlyingMaturityDay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__UnderlyingPutOrCall[] = {  {&_swigt__p_FIX__UnderlyingPutOrCall, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__UnsupportedMessageType[] = {  {&_swigt__p_FIX__UnsupportedMessageType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__UnsupportedVersion[] = {  {&_swigt__p_FIX__UnsupportedVersion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__UtcDateField[] = {  {&_swigt__p_FIX__UtcDateField, 0, 0, 0},  {&_swigt__p_FIX__TotalVolumeTradedDate, _p_FIX__TotalVolumeTradedDateTo_p_FIX__UtcDateField, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__UtcTimeOnlyField[] = {  {&_swigt__p_FIX__UtcTimeOnlyField, 0, 0, 0},  {&_swigt__p_FIX__TotalVolumeTradedTime, _p_FIX__TotalVolumeTradedTimeTo_p_FIX__UtcTimeOnlyField, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIX__UtcTimeStampField[] = {  {&_swigt__p_FIX__UtcTimeStampField, 0, 0, 0},  {&_swigt__p_FIX__OnBehalfOfSendingTime, _p_FIX__OnBehalfOfSendingTimeTo_p_FIX__UtcTimeStampField, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Fields[] = {  {&_swigt__p_Fields, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Group[] = {  {&_swigt__p_Group, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Groups[] = {  {&_swigt__p_Groups, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntArray[] = {  {&_swigt__p_IntArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntField[] = {  {&_swigt__p_IntField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Log[] = {  {&_swigt__p_Log, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LogFactory[] = {  {&_swigt__p_LogFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MessageStore[] = {  {&_swigt__p_MessageStore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MessageStoreFactory[] = {  {&_swigt__p_MessageStoreFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MsgType[] = {  {&_swigt__p_MsgType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mutex[] = {  {&_swigt__p_Mutex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Responder[] = {  {&_swigt__p_Responder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SenderCompID[] = {  {&_swigt__p_SenderCompID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SessionID[] = {  {&_swigt__p_SessionID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SessionTime[] = {  {&_swigt__p_SessionTime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StringField[] = {  {&_swigt__p_StringField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TYPE__Type[] = {  {&_swigt__p_TYPE__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TargetCompID[] = {  {&_swigt__p_TargetCompID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UtcDate[] = {  {&_swigt__p_UtcDate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UtcDateField[] = {  {&_swigt__p_UtcDateField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UtcDateOnly[] = {  {&_swigt__p_UtcDateOnly, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UtcTimeOnly[] = {  {&_swigt__p_UtcTimeOnly, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UtcTimeStamp[] = {  {&_swigt__p_UtcTimeStamp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_g_const_iterator[] = {  {&_swigt__p_g_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_g_iterator[] = {  {&_swigt__p_g_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_IntArray, _p_IntArrayTo_p_int, 0, 0},  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_message_order[] = {  {&_swigt__p_message_order, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_FIX__DataDictionary[] = {  {&_swigt__p_p_FIX__DataDictionary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setTFIX__SessionID_t[] = {  {&_swigt__p_std__setTFIX__SessionID_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string__size_type[] = {  {&_swigt__p_std__string__size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__string_t[] = {  {&_swigt__p_std__vectorTstd__string_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Application,
  _swigc__p_BeginString,
  _swigc__p_DOMDocumentPtr,
  _swigc__p_Data,
  _swigc__p_DataDictionary,
  _swigc__p_Dictionaries,
  _swigc__p_DoubleField,
  _swigc__p_FIELD__Field,
  _swigc__p_FIX_CHAR,
  _swigc__p_FIX_DAYOFMONTH,
  _swigc__p_FIX_INT,
  _swigc__p_FIX_LOCALMKTDATE,
  _swigc__p_FIX_PRICEOFFSET,
  _swigc__p_FIX_QTY,
  _swigc__p_FIX_STRING,
  _swigc__p_FIX_UTCDATE,
  _swigc__p_FIX_UTCTIMEONLY,
  _swigc__p_FIX_UTCTIMESTAMP,
  _swigc__p_FIX__Acceptor,
  _swigc__p_FIX__AllocShares,
  _swigc__p_FIX__Application,
  _swigc__p_FIX__AvgPrxPrecision,
  _swigc__p_FIX__Benchmark,
  _swigc__p_FIX__BoolField,
  _swigc__p_FIX__BrokerOfCredit,
  _swigc__p_FIX__CardIssNo,
  _swigc__p_FIX__CashSettlAgentAcctName,
  _swigc__p_FIX__CashSettlAgentAcctNum,
  _swigc__p_FIX__CashSettlAgentCode,
  _swigc__p_FIX__CashSettlAgentContactName,
  _swigc__p_FIX__CashSettlAgentContactPhone,
  _swigc__p_FIX__CashSettlAgentName,
  _swigc__p_FIX__CharField,
  _swigc__p_FIX__CheckSumField,
  _swigc__p_FIX__ClearingAccount,
  _swigc__p_FIX__ClearingFirm,
  _swigc__p_FIX__ClientID,
  _swigc__p_FIX__ConfigError,
  _swigc__p_FIX__CustomerOrFirm,
  _swigc__p_FIX__CxlType,
  _swigc__p_FIX__DataDictionary,
  _swigc__p_FIX__Dictionary,
  _swigc__p_FIX__Dictionary__Data__const_iterator,
  _swigc__p_FIX__DiscretionOffset,
  _swigc__p_FIX__DlvyInst,
  _swigc__p_FIX__DoNotSend,
  _swigc__p_FIX__DoubleField,
  _swigc__p_FIX__DuplicateFieldNumber,
  _swigc__p_FIX__Exception,
  _swigc__p_FIX__ExecBroker,
  _swigc__p_FIX__ExecTransType,
  _swigc__p_FIX__FieldBase,
  _swigc__p_FIX__FieldConvertError,
  _swigc__p_FIX__FieldMap,
  _swigc__p_FIX__FieldMap__Fields__const_iterator,
  _swigc__p_FIX__FieldMap__Groups__const_iterator,
  _swigc__p_FIX__FieldNotFound,
  _swigc__p_FIX__FileLog,
  _swigc__p_FIX__FileLogFactory,
  _swigc__p_FIX__FileStore,
  _swigc__p_FIX__FileStoreFactory,
  _swigc__p_FIX__FutSettDate,
  _swigc__p_FIX__FutSettDate2,
  _swigc__p_FIX__Group,
  _swigc__p_FIX__IDSource,
  _swigc__p_FIX__IOException,
  _swigc__p_FIX__IOIOthSvc,
  _swigc__p_FIX__IOIShares,
  _swigc__p_FIX__IncorrectDataFormat,
  _swigc__p_FIX__IncorrectMessageStructure,
  _swigc__p_FIX__IncorrectTagValue,
  _swigc__p_FIX__Initiator,
  _swigc__p_FIX__IntField,
  _swigc__p_FIX__InvalidMessage,
  _swigc__p_FIX__InvalidMessageType,
  _swigc__p_FIX__InvalidTagNumber,
  _swigc__p_FIX__LastShares,
  _swigc__p_FIX__LegFutSettDate,
  _swigc__p_FIX__LegSettlmntTyp,
  _swigc__p_FIX__Log,
  _swigc__p_FIX__LogFactory,
  _swigc__p_FIX__MaturityDay,
  _swigc__p_FIX__MemoryStore,
  _swigc__p_FIX__MemoryStoreFactory,
  _swigc__p_FIX__Message,
  _swigc__p_FIX__MessageParseError,
  _swigc__p_FIX__MessageStore,
  _swigc__p_FIX__MessageStoreExceptionWrapper,
  _swigc__p_FIX__MessageStoreFactory,
  _swigc__p_FIX__MessageStoreFactoryExceptionWrapper,
  _swigc__p_FIX__NoTagValue,
  _swigc__p_FIX__NullApplication,
  _swigc__p_FIX__OnBehalfOfSendingTime,
  _swigc__p_FIX__OpenClose,
  _swigc__p_FIX__OpenCloseSettleFlag,
  _swigc__p_FIX__PegDifference,
  _swigc__p_FIX__PutOrCall,
  _swigc__p_FIX__QuoteAckStatus,
  _swigc__p_FIX__RatioQty,
  _swigc__p_FIX__RegistDetls,
  _swigc__p_FIX__RejectLogon,
  _swigc__p_FIX__RelatdSym,
  _swigc__p_FIX__RepeatedTag,
  _swigc__p_FIX__RepeatingGroupCountMismatch,
  _swigc__p_FIX__RequiredTagMissing,
  _swigc__p_FIX__Rule80A,
  _swigc__p_FIX__RuntimeError,
  _swigc__p_FIX__ScreenLog,
  _swigc__p_FIX__ScreenLogFactory,
  _swigc__p_FIX__SecuritySettlAgentAcctName,
  _swigc__p_FIX__SecuritySettlAgentAcctNum,
  _swigc__p_FIX__SecuritySettlAgentCode,
  _swigc__p_FIX__SecuritySettlAgentContactName,
  _swigc__p_FIX__SecuritySettlAgentContactPhone,
  _swigc__p_FIX__SecuritySettlAgentName,
  _swigc__p_FIX__Session,
  _swigc__p_FIX__SessionID,
  _swigc__p_FIX__SessionNotFound,
  _swigc__p_FIX__SessionSettings,
  _swigc__p_FIX__SettlBrkrCode,
  _swigc__p_FIX__SettlDepositoryCode,
  _swigc__p_FIX__SettlInstCode,
  _swigc__p_FIX__SettlLocation,
  _swigc__p_FIX__SettlmntTyp,
  _swigc__p_FIX__Shares,
  _swigc__p_FIX__SocketAcceptor,
  _swigc__p_FIX__SocketCloseFailed,
  _swigc__p_FIX__SocketException,
  _swigc__p_FIX__SocketInitiator,
  _swigc__p_FIX__SocketRecvFailed,
  _swigc__p_FIX__SocketSendFailed,
  _swigc__p_FIX__SpreadToBenchmark,
  _swigc__p_FIX__StringField,
  _swigc__p_FIX__SynchronizedApplication,
  _swigc__p_FIX__TagNotDefinedForMessage,
  _swigc__p_FIX__TagOutOfOrder,
  _swigc__p_FIX__TotQuoteEntries,
  _swigc__p_FIX__TotalNumSecurities,
  _swigc__p_FIX__TotalNumSecurityTypes,
  _swigc__p_FIX__TotalVolumeTradedDate,
  _swigc__p_FIX__TotalVolumeTradedTime,
  _swigc__p_FIX__TradeType,
  _swigc__p_FIX__UnderlyingIDSource,
  _swigc__p_FIX__UnderlyingMaturityDay,
  _swigc__p_FIX__UnderlyingPutOrCall,
  _swigc__p_FIX__UnsupportedMessageType,
  _swigc__p_FIX__UnsupportedVersion,
  _swigc__p_FIX__UtcDateField,
  _swigc__p_FIX__UtcTimeOnlyField,
  _swigc__p_FIX__UtcTimeStampField,
  _swigc__p_Fields,
  _swigc__p_Group,
  _swigc__p_Groups,
  _swigc__p_IntArray,
  _swigc__p_IntField,
  _swigc__p_Log,
  _swigc__p_LogFactory,
  _swigc__p_MessageStore,
  _swigc__p_MessageStoreFactory,
  _swigc__p_MsgType,
  _swigc__p_Mutex,
  _swigc__p_Responder,
  _swigc__p_SenderCompID,
  _swigc__p_SessionID,
  _swigc__p_SessionTime,
  _swigc__p_StringField,
  _swigc__p_TYPE__Type,
  _swigc__p_TargetCompID,
  _swigc__p_UtcDate,
  _swigc__p_UtcDateField,
  _swigc__p_UtcDateOnly,
  _swigc__p_UtcTimeOnly,
  _swigc__p_UtcTimeStamp,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_double,
  _swigc__p_g_const_iterator,
  _swigc__p_g_iterator,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_message_order,
  _swigc__p_p_FIX__DataDictionary,
  _swigc__p_std__istream,
  _swigc__p_std__ostream,
  _swigc__p_std__setTFIX__SessionID_t,
  _swigc__p_std__string,
  _swigc__p_std__string__size_type,
  _swigc__p_std__vectorTstd__string_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;
  
  clientdata = clientdata;
  
  if (init_run) return;
  init_run = 1;
  
  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
    return PyString_FromString("<Swig global variables>");
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
    PyObject *str = PyString_FromString("(");
    swig_globalvar  *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", PyString_AsString(str));
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,   /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc)swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      varlink_type.ob_type = &PyType_Type;
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals() {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
  PyObject *m, *d;
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  
#ifndef _MSC_VER
  struct sigaction new_action, old_action;
  new_action.sa_handler = SIG_DFL;
  sigemptyset( &new_action.sa_mask );
  new_action.sa_flags = 0;
  sigaction( SIGINT, &new_action, &old_action );
#endif
  
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"headerOrder",headerOrder_get, headerOrder_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BeginString_FIX44",BeginString_FIX44_get, BeginString_FIX44_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BeginString_FIX43",BeginString_FIX43_get, BeginString_FIX43_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BeginString_FIX42",BeginString_FIX42_get, BeginString_FIX42_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BeginString_FIX41",BeginString_FIX41_get, BeginString_FIX41_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BeginString_FIX40",BeginString_FIX40_get, BeginString_FIX40_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_Heartbeat",MsgType_Heartbeat_get, MsgType_Heartbeat_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_Logon",MsgType_Logon_get, MsgType_Logon_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TestRequest",MsgType_TestRequest_get, MsgType_TestRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ResendRequest",MsgType_ResendRequest_get, MsgType_ResendRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_Reject",MsgType_Reject_get, MsgType_Reject_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SequenceReset",MsgType_SequenceReset_get, MsgType_SequenceReset_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_Logout",MsgType_Logout_get, MsgType_Logout_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_BusinessMessageReject",MsgType_BusinessMessageReject_get, MsgType_BusinessMessageReject_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_UserRequest",MsgType_UserRequest_get, MsgType_UserRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_UserResponse",MsgType_UserResponse_get, MsgType_UserResponse_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_Advertisement",MsgType_Advertisement_get, MsgType_Advertisement_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_IndicationOfInterest",MsgType_IndicationOfInterest_get, MsgType_IndicationOfInterest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_News",MsgType_News_get, MsgType_News_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_Email",MsgType_Email_get, MsgType_Email_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QuoteRequest",MsgType_QuoteRequest_get, MsgType_QuoteRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QuoteResponse",MsgType_QuoteResponse_get, MsgType_QuoteResponse_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QuoteRequestReject",MsgType_QuoteRequestReject_get, MsgType_QuoteRequestReject_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_RFQRequest",MsgType_RFQRequest_get, MsgType_RFQRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_Quote",MsgType_Quote_get, MsgType_Quote_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QuoteCancel",MsgType_QuoteCancel_get, MsgType_QuoteCancel_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QuoteStatusRequest",MsgType_QuoteStatusRequest_get, MsgType_QuoteStatusRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QuoteStatusReport",MsgType_QuoteStatusReport_get, MsgType_QuoteStatusReport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MassQuote",MsgType_MassQuote_get, MsgType_MassQuote_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MassQuoteAcknowledgement",MsgType_MassQuoteAcknowledgement_get, MsgType_MassQuoteAcknowledgement_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MarketDataRequest",MsgType_MarketDataRequest_get, MsgType_MarketDataRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MarketDataSnapshotFullRefresh",MsgType_MarketDataSnapshotFullRefresh_get, MsgType_MarketDataSnapshotFullRefresh_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MarketDataIncrementalRefresh",MsgType_MarketDataIncrementalRefresh_get, MsgType_MarketDataIncrementalRefresh_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MarketDataRequestReject",MsgType_MarketDataRequestReject_get, MsgType_MarketDataRequestReject_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SecurityDefinitionRequest",MsgType_SecurityDefinitionRequest_get, MsgType_SecurityDefinitionRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SecurityDefinition",MsgType_SecurityDefinition_get, MsgType_SecurityDefinition_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SecurityTypeRequest",MsgType_SecurityTypeRequest_get, MsgType_SecurityTypeRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SecurityTypes",MsgType_SecurityTypes_get, MsgType_SecurityTypes_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SecurityListRequest",MsgType_SecurityListRequest_get, MsgType_SecurityListRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SecurityList",MsgType_SecurityList_get, MsgType_SecurityList_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_DerivativeSecurityListRequest",MsgType_DerivativeSecurityListRequest_get, MsgType_DerivativeSecurityListRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_DerivativeSecurityList",MsgType_DerivativeSecurityList_get, MsgType_DerivativeSecurityList_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SecurityStatusRequest",MsgType_SecurityStatusRequest_get, MsgType_SecurityStatusRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SecurityStatus",MsgType_SecurityStatus_get, MsgType_SecurityStatus_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TradingSessionStatusRequest",MsgType_TradingSessionStatusRequest_get, MsgType_TradingSessionStatusRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TradingSessionStatus",MsgType_TradingSessionStatus_get, MsgType_TradingSessionStatus_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_NewOrderSingle",MsgType_NewOrderSingle_get, MsgType_NewOrderSingle_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ExecutionReport",MsgType_ExecutionReport_get, MsgType_ExecutionReport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_DontKnowTrade",MsgType_DontKnowTrade_get, MsgType_DontKnowTrade_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_OrderCancelReplaceRequest",MsgType_OrderCancelReplaceRequest_get, MsgType_OrderCancelReplaceRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_OrderCancelRequest",MsgType_OrderCancelRequest_get, MsgType_OrderCancelRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_OrderCancelReject",MsgType_OrderCancelReject_get, MsgType_OrderCancelReject_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_OrderStatusRequest",MsgType_OrderStatusRequest_get, MsgType_OrderStatusRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_OrderMassCancelRequest",MsgType_OrderMassCancelRequest_get, MsgType_OrderMassCancelRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_OrderMassCancelReport",MsgType_OrderMassCancelReport_get, MsgType_OrderMassCancelReport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_OrderMassStatusRequest",MsgType_OrderMassStatusRequest_get, MsgType_OrderMassStatusRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_NewOrderCross",MsgType_NewOrderCross_get, MsgType_NewOrderCross_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CrossOrderCancelReplaceRequest",MsgType_CrossOrderCancelReplaceRequest_get, MsgType_CrossOrderCancelReplaceRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CrossOrderCancelRequest",MsgType_CrossOrderCancelRequest_get, MsgType_CrossOrderCancelRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_NewOrderMultileg",MsgType_NewOrderMultileg_get, MsgType_NewOrderMultileg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MultilegOrderCancelReplaceRequest",MsgType_MultilegOrderCancelReplaceRequest_get, MsgType_MultilegOrderCancelReplaceRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_BidRequest",MsgType_BidRequest_get, MsgType_BidRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_BidResponse",MsgType_BidResponse_get, MsgType_BidResponse_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_NewOrderList",MsgType_NewOrderList_get, MsgType_NewOrderList_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ListStrikePrice",MsgType_ListStrikePrice_get, MsgType_ListStrikePrice_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ListStatus",MsgType_ListStatus_get, MsgType_ListStatus_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ListExecute",MsgType_ListExecute_get, MsgType_ListExecute_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ListCancelRequest",MsgType_ListCancelRequest_get, MsgType_ListCancelRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ListStatusRequest",MsgType_ListStatusRequest_get, MsgType_ListStatusRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_AllocationInstruction",MsgType_AllocationInstruction_get, MsgType_AllocationInstruction_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_AllocationInstructionAck",MsgType_AllocationInstructionAck_get, MsgType_AllocationInstructionAck_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_AllocationReport",MsgType_AllocationReport_get, MsgType_AllocationReport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_AllocationReportAck",MsgType_AllocationReportAck_get, MsgType_AllocationReportAck_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_Confirmation",MsgType_Confirmation_get, MsgType_Confirmation_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ConfirmationAck",MsgType_ConfirmationAck_get, MsgType_ConfirmationAck_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ConfirmationRequest",MsgType_ConfirmationRequest_get, MsgType_ConfirmationRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SettlementInstructions",MsgType_SettlementInstructions_get, MsgType_SettlementInstructions_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SettlementInstructionRequest",MsgType_SettlementInstructionRequest_get, MsgType_SettlementInstructionRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TradeCaptureReportRequest",MsgType_TradeCaptureReportRequest_get, MsgType_TradeCaptureReportRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TradeCaptureReportRequestAck",MsgType_TradeCaptureReportRequestAck_get, MsgType_TradeCaptureReportRequestAck_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TradeCaptureReport",MsgType_TradeCaptureReport_get, MsgType_TradeCaptureReport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TradeCaptureReportAck",MsgType_TradeCaptureReportAck_get, MsgType_TradeCaptureReportAck_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_RegistrationInstructions",MsgType_RegistrationInstructions_get, MsgType_RegistrationInstructions_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_RegistrationInstructionsResponse",MsgType_RegistrationInstructionsResponse_get, MsgType_RegistrationInstructionsResponse_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_PositionMaintenanceRequest",MsgType_PositionMaintenanceRequest_get, MsgType_PositionMaintenanceRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_PositionMaintenanceReport",MsgType_PositionMaintenanceReport_get, MsgType_PositionMaintenanceReport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_RequestForPositions",MsgType_RequestForPositions_get, MsgType_RequestForPositions_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_RequestForPositionsAck",MsgType_RequestForPositionsAck_get, MsgType_RequestForPositionsAck_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_PositionReport",MsgType_PositionReport_get, MsgType_PositionReport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_AssignmentReport",MsgType_AssignmentReport_get, MsgType_AssignmentReport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CollateralRequest",MsgType_CollateralRequest_get, MsgType_CollateralRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CollateralAssignment",MsgType_CollateralAssignment_get, MsgType_CollateralAssignment_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CollateralResponse",MsgType_CollateralResponse_get, MsgType_CollateralResponse_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CollateralReport",MsgType_CollateralReport_get, MsgType_CollateralReport_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CollateralInquiry",MsgType_CollateralInquiry_get, MsgType_CollateralInquiry_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_NetworkStatusRequest",MsgType_NetworkStatusRequest_get, MsgType_NetworkStatusRequest_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_NetworkStatusResponse",MsgType_NetworkStatusResponse_get, MsgType_NetworkStatusResponse_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CollateralInquiryAck",MsgType_CollateralInquiryAck_get, MsgType_CollateralInquiryAck_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AdvSide_BUY",AdvSide_BUY_get, AdvSide_BUY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AdvSide_SELL",AdvSide_SELL_get, AdvSide_SELL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AdvSide_CROSS",AdvSide_CROSS_get, AdvSide_CROSS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AdvSide_TRADE",AdvSide_TRADE_get, AdvSide_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AdvTransType_NEW",AdvTransType_NEW_get, AdvTransType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AdvTransType_CANCEL",AdvTransType_CANCEL_get, AdvTransType_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AdvTransType_REPLACE",AdvTransType_REPLACE_get, AdvTransType_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CommType_PER_UNIT",CommType_PER_UNIT_get, CommType_PER_UNIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CommType_PERCENTAGE",CommType_PERCENTAGE_get, CommType_PERCENTAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CommType_ABSOLUTE",CommType_ABSOLUTE_get, CommType_ABSOLUTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT",CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT_get, CommType_PERCENTAGE_WAIVED_CASH_DISCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS",CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS_get, CommType_PERCENTAGE_WAIVED_ENHANCED_UNITS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CommType_POINTS_PER_BOND_OR_OR_CONTRACT",CommType_POINTS_PER_BOND_OR_OR_CONTRACT_get, CommType_POINTS_PER_BOND_OR_OR_CONTRACT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_NOT_HELD",ExecInst_NOT_HELD_get, ExecInst_NOT_HELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_WORK",ExecInst_WORK_get, ExecInst_WORK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_GO_ALONG",ExecInst_GO_ALONG_get, ExecInst_GO_ALONG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_OVER_THE_DAY",ExecInst_OVER_THE_DAY_get, ExecInst_OVER_THE_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_HELD",ExecInst_HELD_get, ExecInst_HELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_PARTICIPATE_DONT_INITIATE",ExecInst_PARTICIPATE_DONT_INITIATE_get, ExecInst_PARTICIPATE_DONT_INITIATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_STRICT_SCALE",ExecInst_STRICT_SCALE_get, ExecInst_STRICT_SCALE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_TRY_TO_SCALE",ExecInst_TRY_TO_SCALE_get, ExecInst_TRY_TO_SCALE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_STAY_ON_BIDSIDE",ExecInst_STAY_ON_BIDSIDE_get, ExecInst_STAY_ON_BIDSIDE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_STAY_ON_OFFERSIDE",ExecInst_STAY_ON_OFFERSIDE_get, ExecInst_STAY_ON_OFFERSIDE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_NO_CROSS",ExecInst_NO_CROSS_get, ExecInst_NO_CROSS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_OK_TO_CROSS",ExecInst_OK_TO_CROSS_get, ExecInst_OK_TO_CROSS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_CALL_FIRST",ExecInst_CALL_FIRST_get, ExecInst_CALL_FIRST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_PERCENT_OF_VOLUME",ExecInst_PERCENT_OF_VOLUME_get, ExecInst_PERCENT_OF_VOLUME_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_DO_NOT_INCREASE",ExecInst_DO_NOT_INCREASE_get, ExecInst_DO_NOT_INCREASE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_DO_NOT_REDUCE",ExecInst_DO_NOT_REDUCE_get, ExecInst_DO_NOT_REDUCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_ALL_OR_NONE",ExecInst_ALL_OR_NONE_get, ExecInst_ALL_OR_NONE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_REINSTATE_ON_SYSTEM_FAILURE",ExecInst_REINSTATE_ON_SYSTEM_FAILURE_get, ExecInst_REINSTATE_ON_SYSTEM_FAILURE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_INSTITUTIONS_ONLY",ExecInst_INSTITUTIONS_ONLY_get, ExecInst_INSTITUTIONS_ONLY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_REINSTATE_ON_TRADING_HALT",ExecInst_REINSTATE_ON_TRADING_HALT_get, ExecInst_REINSTATE_ON_TRADING_HALT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_CANCEL_ON_TRADING_HALT",ExecInst_CANCEL_ON_TRADING_HALT_get, ExecInst_CANCEL_ON_TRADING_HALT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_LAST_PEG",ExecInst_LAST_PEG_get, ExecInst_LAST_PEG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_MID_PRICE",ExecInst_MID_PRICE_get, ExecInst_MID_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_NON_NEGOTIABLE",ExecInst_NON_NEGOTIABLE_get, ExecInst_NON_NEGOTIABLE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_OPENING_PEG",ExecInst_OPENING_PEG_get, ExecInst_OPENING_PEG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_MARKET_PEG",ExecInst_MARKET_PEG_get, ExecInst_MARKET_PEG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_CANCEL_ON_SYSTEM_FAILURE",ExecInst_CANCEL_ON_SYSTEM_FAILURE_get, ExecInst_CANCEL_ON_SYSTEM_FAILURE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_PRIMARY_PEG",ExecInst_PRIMARY_PEG_get, ExecInst_PRIMARY_PEG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_SUSPEND",ExecInst_SUSPEND_get, ExecInst_SUSPEND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER",ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER_get, ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_CUSTOMER_DISPLAY_INSTRUCTION",ExecInst_CUSTOMER_DISPLAY_INSTRUCTION_get, ExecInst_CUSTOMER_DISPLAY_INSTRUCTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_NETTING",ExecInst_NETTING_get, ExecInst_NETTING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_PEG_TO_VWAP",ExecInst_PEG_TO_VWAP_get, ExecInst_PEG_TO_VWAP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_TRADE_ALONG",ExecInst_TRADE_ALONG_get, ExecInst_TRADE_ALONG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_TRY_TO_STOP",ExecInst_TRY_TO_STOP_get, ExecInst_TRY_TO_STOP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_CANCEL_IF_NOT_BEST",ExecInst_CANCEL_IF_NOT_BEST_get, ExecInst_CANCEL_IF_NOT_BEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_TRAILING_STOP_PEG",ExecInst_TRAILING_STOP_PEG_get, ExecInst_TRAILING_STOP_PEG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_STRICT_LIMIT",ExecInst_STRICT_LIMIT_get, ExecInst_STRICT_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_IGNORE_PRICE_VALIDITY_CHECKS",ExecInst_IGNORE_PRICE_VALIDITY_CHECKS_get, ExecInst_IGNORE_PRICE_VALIDITY_CHECKS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_PEG_TO_LIMIT_PRICE",ExecInst_PEG_TO_LIMIT_PRICE_get, ExecInst_PEG_TO_LIMIT_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecInst_WORK_TO_TARGET_STRATEGY",ExecInst_WORK_TO_TARGET_STRATEGY_get, ExecInst_WORK_TO_TARGET_STRATEGY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE",HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_get, HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC",HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC_get, HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HandlInst_MANUAL_ORDER",HandlInst_MANUAL_ORDER_get, HandlInst_MANUAL_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_CUSIP",SecurityIDSource_CUSIP_get, SecurityIDSource_CUSIP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_SEDOL",SecurityIDSource_SEDOL_get, SecurityIDSource_SEDOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_QUIK",SecurityIDSource_QUIK_get, SecurityIDSource_QUIK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_ISIN_NUMBER",SecurityIDSource_ISIN_NUMBER_get, SecurityIDSource_ISIN_NUMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_RIC_CODE",SecurityIDSource_RIC_CODE_get, SecurityIDSource_RIC_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_ISO_CURRENCY_CODE",SecurityIDSource_ISO_CURRENCY_CODE_get, SecurityIDSource_ISO_CURRENCY_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_ISO_COUNTRY_CODE",SecurityIDSource_ISO_COUNTRY_CODE_get, SecurityIDSource_ISO_COUNTRY_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_EXCHANGE_SYMBOL",SecurityIDSource_EXCHANGE_SYMBOL_get, SecurityIDSource_EXCHANGE_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION",SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION_get, SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_BLOOMBERG_SYMBOL",SecurityIDSource_BLOOMBERG_SYMBOL_get, SecurityIDSource_BLOOMBERG_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_WERTPAPIER",SecurityIDSource_WERTPAPIER_get, SecurityIDSource_WERTPAPIER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_DUTCH",SecurityIDSource_DUTCH_get, SecurityIDSource_DUTCH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_VALOREN",SecurityIDSource_VALOREN_get, SecurityIDSource_VALOREN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_SICOVAM",SecurityIDSource_SICOVAM_get, SecurityIDSource_SICOVAM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_BELGIAN",SecurityIDSource_BELGIAN_get, SecurityIDSource_BELGIAN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_COMMON",SecurityIDSource_COMMON_get, SecurityIDSource_COMMON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_CLEARING_HOUSE_CLEARING_ORGANIZATION",SecurityIDSource_CLEARING_HOUSE_CLEARING_ORGANIZATION_get, SecurityIDSource_CLEARING_HOUSE_CLEARING_ORGANIZATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION",SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION_get, SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY",SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY_get, SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQltyInd_LOW",IOIQltyInd_LOW_get, IOIQltyInd_LOW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQltyInd_MEDIUM",IOIQltyInd_MEDIUM_get, IOIQltyInd_MEDIUM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQltyInd_HIGH",IOIQltyInd_HIGH_get, IOIQltyInd_HIGH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOITransType_NEW",IOITransType_NEW_get, IOITransType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOITransType_CANCEL",IOITransType_CANCEL_get, IOITransType_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOITransType_REPLACE",IOITransType_REPLACE_get, IOITransType_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LastCapacity_AGENT",LastCapacity_AGENT_get, LastCapacity_AGENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LastCapacity_CROSS_AS_AGENT",LastCapacity_CROSS_AS_AGENT_get, LastCapacity_CROSS_AS_AGENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LastCapacity_CROSS_AS_PRINCIPAL",LastCapacity_CROSS_AS_PRINCIPAL_get, LastCapacity_CROSS_AS_PRINCIPAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LastCapacity_PRINCIPAL",LastCapacity_PRINCIPAL_get, LastCapacity_PRINCIPAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_HEARTBEAT",MsgType_HEARTBEAT_get, MsgType_HEARTBEAT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TEST_REQUEST",MsgType_TEST_REQUEST_get, MsgType_TEST_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_RESEND_REQUEST",MsgType_RESEND_REQUEST_get, MsgType_RESEND_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_REJECT",MsgType_REJECT_get, MsgType_REJECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SEQUENCE_RESET",MsgType_SEQUENCE_RESET_get, MsgType_SEQUENCE_RESET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_LOGOUT",MsgType_LOGOUT_get, MsgType_LOGOUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_INDICATION_OF_INTEREST",MsgType_INDICATION_OF_INTEREST_get, MsgType_INDICATION_OF_INTEREST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ADVERTISEMENT",MsgType_ADVERTISEMENT_get, MsgType_ADVERTISEMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_EXECUTION_REPORT",MsgType_EXECUTION_REPORT_get, MsgType_EXECUTION_REPORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ORDER_CANCEL_REJECT",MsgType_ORDER_CANCEL_REJECT_get, MsgType_ORDER_CANCEL_REJECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_LOGON",MsgType_LOGON_get, MsgType_LOGON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_NEWS",MsgType_NEWS_get, MsgType_NEWS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_EMAIL",MsgType_EMAIL_get, MsgType_EMAIL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ORDER_SINGLE",MsgType_ORDER_SINGLE_get, MsgType_ORDER_SINGLE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ORDER_LIST",MsgType_ORDER_LIST_get, MsgType_ORDER_LIST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ORDER_CANCEL_REQUEST",MsgType_ORDER_CANCEL_REQUEST_get, MsgType_ORDER_CANCEL_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ORDER_CANCEL_REPLACE_REQUEST",MsgType_ORDER_CANCEL_REPLACE_REQUEST_get, MsgType_ORDER_CANCEL_REPLACE_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ORDER_STATUS_REQUEST",MsgType_ORDER_STATUS_REQUEST_get, MsgType_ORDER_STATUS_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ALLOCATION_INSTRUCTION",MsgType_ALLOCATION_INSTRUCTION_get, MsgType_ALLOCATION_INSTRUCTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_LIST_CANCEL_REQUEST",MsgType_LIST_CANCEL_REQUEST_get, MsgType_LIST_CANCEL_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_LIST_EXECUTE",MsgType_LIST_EXECUTE_get, MsgType_LIST_EXECUTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_LIST_STATUS_REQUEST",MsgType_LIST_STATUS_REQUEST_get, MsgType_LIST_STATUS_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_LIST_STATUS",MsgType_LIST_STATUS_get, MsgType_LIST_STATUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ALLOCATION_INSTRUCTION_ACK",MsgType_ALLOCATION_INSTRUCTION_ACK_get, MsgType_ALLOCATION_INSTRUCTION_ACK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_DONT_KNOW_TRADE",MsgType_DONT_KNOW_TRADE_get, MsgType_DONT_KNOW_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QUOTE_REQUEST",MsgType_QUOTE_REQUEST_get, MsgType_QUOTE_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QUOTE",MsgType_QUOTE_get, MsgType_QUOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SETTLEMENT_INSTRUCTIONS",MsgType_SETTLEMENT_INSTRUCTIONS_get, MsgType_SETTLEMENT_INSTRUCTIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MARKET_DATA_REQUEST",MsgType_MARKET_DATA_REQUEST_get, MsgType_MARKET_DATA_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH",MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH_get, MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MARKET_DATA_INCREMENTAL_REFRESH",MsgType_MARKET_DATA_INCREMENTAL_REFRESH_get, MsgType_MARKET_DATA_INCREMENTAL_REFRESH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MARKET_DATA_REQUEST_REJECT",MsgType_MARKET_DATA_REQUEST_REJECT_get, MsgType_MARKET_DATA_REQUEST_REJECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QUOTE_CANCEL",MsgType_QUOTE_CANCEL_get, MsgType_QUOTE_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QUOTE_STATUS_REQUEST",MsgType_QUOTE_STATUS_REQUEST_get, MsgType_QUOTE_STATUS_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MASS_QUOTE_ACKNOWLEDGEMENT",MsgType_MASS_QUOTE_ACKNOWLEDGEMENT_get, MsgType_MASS_QUOTE_ACKNOWLEDGEMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SECURITY_DEFINITION_REQUEST",MsgType_SECURITY_DEFINITION_REQUEST_get, MsgType_SECURITY_DEFINITION_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SECURITY_DEFINITION",MsgType_SECURITY_DEFINITION_get, MsgType_SECURITY_DEFINITION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SECURITY_STATUS_REQUEST",MsgType_SECURITY_STATUS_REQUEST_get, MsgType_SECURITY_STATUS_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SECURITY_STATUS",MsgType_SECURITY_STATUS_get, MsgType_SECURITY_STATUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TRADING_SESSION_STATUS_REQUEST",MsgType_TRADING_SESSION_STATUS_REQUEST_get, MsgType_TRADING_SESSION_STATUS_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TRADING_SESSION_STATUS",MsgType_TRADING_SESSION_STATUS_get, MsgType_TRADING_SESSION_STATUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MASS_QUOTE",MsgType_MASS_QUOTE_get, MsgType_MASS_QUOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_BUSINESS_MESSAGE_REJECT",MsgType_BUSINESS_MESSAGE_REJECT_get, MsgType_BUSINESS_MESSAGE_REJECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_BID_REQUEST",MsgType_BID_REQUEST_get, MsgType_BID_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_BID_RESPONSE",MsgType_BID_RESPONSE_get, MsgType_BID_RESPONSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_LIST_STRIKE_PRICE",MsgType_LIST_STRIKE_PRICE_get, MsgType_LIST_STRIKE_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_XML_MESSAGE",MsgType_XML_MESSAGE_get, MsgType_XML_MESSAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_REGISTRATION_INSTRUCTIONS",MsgType_REGISTRATION_INSTRUCTIONS_get, MsgType_REGISTRATION_INSTRUCTIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE",MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE_get, MsgType_REGISTRATION_INSTRUCTIONS_RESPONSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ORDER_MASS_CANCEL_REQUEST",MsgType_ORDER_MASS_CANCEL_REQUEST_get, MsgType_ORDER_MASS_CANCEL_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ORDER_MASS_CANCEL_REPORT",MsgType_ORDER_MASS_CANCEL_REPORT_get, MsgType_ORDER_MASS_CANCEL_REPORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_NEW_ORDER_CROSS",MsgType_NEW_ORDER_CROSS_get, MsgType_NEW_ORDER_CROSS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST",MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST_get, MsgType_CROSS_ORDER_CANCEL_REPLACE_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CROSS_ORDER_CANCEL_REQUEST",MsgType_CROSS_ORDER_CANCEL_REQUEST_get, MsgType_CROSS_ORDER_CANCEL_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SECURITY_TYPE_REQUEST",MsgType_SECURITY_TYPE_REQUEST_get, MsgType_SECURITY_TYPE_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SECURITY_TYPES",MsgType_SECURITY_TYPES_get, MsgType_SECURITY_TYPES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SECURITY_LIST_REQUEST",MsgType_SECURITY_LIST_REQUEST_get, MsgType_SECURITY_LIST_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SECURITY_LIST",MsgType_SECURITY_LIST_get, MsgType_SECURITY_LIST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_DERIVATIVE_SECURITY_LIST_REQUEST",MsgType_DERIVATIVE_SECURITY_LIST_REQUEST_get, MsgType_DERIVATIVE_SECURITY_LIST_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_DERIVATIVE_SECURITY_LIST",MsgType_DERIVATIVE_SECURITY_LIST_get, MsgType_DERIVATIVE_SECURITY_LIST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_NEW_ORDER_MULTILEG",MsgType_NEW_ORDER_MULTILEG_get, MsgType_NEW_ORDER_MULTILEG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_MULTILEG_ORDER_CANCEL_REPLACE",MsgType_MULTILEG_ORDER_CANCEL_REPLACE_get, MsgType_MULTILEG_ORDER_CANCEL_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TRADE_CAPTURE_REPORT_REQUEST",MsgType_TRADE_CAPTURE_REPORT_REQUEST_get, MsgType_TRADE_CAPTURE_REPORT_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TRADE_CAPTURE_REPORT",MsgType_TRADE_CAPTURE_REPORT_get, MsgType_TRADE_CAPTURE_REPORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ORDER_MASS_STATUS_REQUEST",MsgType_ORDER_MASS_STATUS_REQUEST_get, MsgType_ORDER_MASS_STATUS_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QUOTE_REQUEST_REJECT",MsgType_QUOTE_REQUEST_REJECT_get, MsgType_QUOTE_REQUEST_REJECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_RFQ_REQUEST",MsgType_RFQ_REQUEST_get, MsgType_RFQ_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QUOTE_STATUS_REPORT",MsgType_QUOTE_STATUS_REPORT_get, MsgType_QUOTE_STATUS_REPORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_QUOTE_RESPONSE",MsgType_QUOTE_RESPONSE_get, MsgType_QUOTE_RESPONSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CONFIRMATION",MsgType_CONFIRMATION_get, MsgType_CONFIRMATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_POSITION_MAINTENANCE_REQUEST",MsgType_POSITION_MAINTENANCE_REQUEST_get, MsgType_POSITION_MAINTENANCE_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_POSITION_MAINTENANCE_REPORT",MsgType_POSITION_MAINTENANCE_REPORT_get, MsgType_POSITION_MAINTENANCE_REPORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_REQUEST_FOR_POSITIONS",MsgType_REQUEST_FOR_POSITIONS_get, MsgType_REQUEST_FOR_POSITIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_REQUEST_FOR_POSITIONS_ACK",MsgType_REQUEST_FOR_POSITIONS_ACK_get, MsgType_REQUEST_FOR_POSITIONS_ACK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_POSITION_REPORT",MsgType_POSITION_REPORT_get, MsgType_POSITION_REPORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK",MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK_get, MsgType_TRADE_CAPTURE_REPORT_REQUEST_ACK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_TRADE_CAPTURE_REPORT_ACK",MsgType_TRADE_CAPTURE_REPORT_ACK_get, MsgType_TRADE_CAPTURE_REPORT_ACK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ALLOCATION_REPORT",MsgType_ALLOCATION_REPORT_get, MsgType_ALLOCATION_REPORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ALLOCATION_REPORT_ACK",MsgType_ALLOCATION_REPORT_ACK_get, MsgType_ALLOCATION_REPORT_ACK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CONFIRMATION_ACK",MsgType_CONFIRMATION_ACK_get, MsgType_CONFIRMATION_ACK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_SETTLEMENT_INSTRUCTION_REQUEST",MsgType_SETTLEMENT_INSTRUCTION_REQUEST_get, MsgType_SETTLEMENT_INSTRUCTION_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_ASSIGNMENT_REPORT",MsgType_ASSIGNMENT_REPORT_get, MsgType_ASSIGNMENT_REPORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_COLLATERAL_REQUEST",MsgType_COLLATERAL_REQUEST_get, MsgType_COLLATERAL_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_COLLATERAL_ASSIGNMENT",MsgType_COLLATERAL_ASSIGNMENT_get, MsgType_COLLATERAL_ASSIGNMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_COLLATERAL_RESPONSE",MsgType_COLLATERAL_RESPONSE_get, MsgType_COLLATERAL_RESPONSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_COLLATERAL_REPORT",MsgType_COLLATERAL_REPORT_get, MsgType_COLLATERAL_REPORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_COLLATERAL_INQUIRY",MsgType_COLLATERAL_INQUIRY_get, MsgType_COLLATERAL_INQUIRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_NETWORK_STATUS_REQUEST",MsgType_NETWORK_STATUS_REQUEST_get, MsgType_NETWORK_STATUS_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_NETWORK_STATUS_RESPONSE",MsgType_NETWORK_STATUS_RESPONSE_get, MsgType_NETWORK_STATUS_RESPONSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_USER_REQUEST",MsgType_USER_REQUEST_get, MsgType_USER_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_USER_RESPONSE",MsgType_USER_RESPONSE_get, MsgType_USER_RESPONSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_COLLATERAL_INQUIRY_ACK",MsgType_COLLATERAL_INQUIRY_ACK_get, MsgType_COLLATERAL_INQUIRY_ACK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgType_CONFIRMATION_REQUEST",MsgType_CONFIRMATION_REQUEST_get, MsgType_CONFIRMATION_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_NEW",OrdStatus_NEW_get, OrdStatus_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_PARTIALLY_FILLED",OrdStatus_PARTIALLY_FILLED_get, OrdStatus_PARTIALLY_FILLED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_FILLED",OrdStatus_FILLED_get, OrdStatus_FILLED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_DONE_FOR_DAY",OrdStatus_DONE_FOR_DAY_get, OrdStatus_DONE_FOR_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_CANCELED",OrdStatus_CANCELED_get, OrdStatus_CANCELED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_REPLACED",OrdStatus_REPLACED_get, OrdStatus_REPLACED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_PENDING_CANCEL",OrdStatus_PENDING_CANCEL_get, OrdStatus_PENDING_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_STOPPED",OrdStatus_STOPPED_get, OrdStatus_STOPPED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_REJECTED",OrdStatus_REJECTED_get, OrdStatus_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_SUSPENDED",OrdStatus_SUSPENDED_get, OrdStatus_SUSPENDED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_PENDING_NEW",OrdStatus_PENDING_NEW_get, OrdStatus_PENDING_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_CALCULATED",OrdStatus_CALCULATED_get, OrdStatus_CALCULATED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_EXPIRED",OrdStatus_EXPIRED_get, OrdStatus_EXPIRED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_ACCEPTED_FOR_BIDDING",OrdStatus_ACCEPTED_FOR_BIDDING_get, OrdStatus_ACCEPTED_FOR_BIDDING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdStatus_PENDING_REPLACE",OrdStatus_PENDING_REPLACE_get, OrdStatus_PENDING_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_MARKET",OrdType_MARKET_get, OrdType_MARKET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_LIMIT",OrdType_LIMIT_get, OrdType_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_STOP",OrdType_STOP_get, OrdType_STOP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_STOP_LIMIT",OrdType_STOP_LIMIT_get, OrdType_STOP_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_MARKET_ON_CLOSE",OrdType_MARKET_ON_CLOSE_get, OrdType_MARKET_ON_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_WITH_OR_WITHOUT",OrdType_WITH_OR_WITHOUT_get, OrdType_WITH_OR_WITHOUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_LIMIT_OR_BETTER",OrdType_LIMIT_OR_BETTER_get, OrdType_LIMIT_OR_BETTER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_LIMIT_WITH_OR_WITHOUT",OrdType_LIMIT_WITH_OR_WITHOUT_get, OrdType_LIMIT_WITH_OR_WITHOUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_ON_BASIS",OrdType_ON_BASIS_get, OrdType_ON_BASIS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_ON_CLOSE",OrdType_ON_CLOSE_get, OrdType_ON_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_LIMIT_ON_CLOSE",OrdType_LIMIT_ON_CLOSE_get, OrdType_LIMIT_ON_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_FOREX_MARKET",OrdType_FOREX_MARKET_get, OrdType_FOREX_MARKET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_PREVIOUSLY_QUOTED",OrdType_PREVIOUSLY_QUOTED_get, OrdType_PREVIOUSLY_QUOTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_PREVIOUSLY_INDICATED",OrdType_PREVIOUSLY_INDICATED_get, OrdType_PREVIOUSLY_INDICATED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_FOREX_LIMIT",OrdType_FOREX_LIMIT_get, OrdType_FOREX_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_FOREX_SWAP",OrdType_FOREX_SWAP_get, OrdType_FOREX_SWAP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_FOREX_PREVIOUSLY_QUOTED",OrdType_FOREX_PREVIOUSLY_QUOTED_get, OrdType_FOREX_PREVIOUSLY_QUOTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_FUNARI",OrdType_FUNARI_get, OrdType_FUNARI_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_MARKET_IF_TOUCHED",OrdType_MARKET_IF_TOUCHED_get, OrdType_MARKET_IF_TOUCHED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT",OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT_get, OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_PREVIOUS_FUND_VALUATION_POINT",OrdType_PREVIOUS_FUND_VALUATION_POINT_get, OrdType_PREVIOUS_FUND_VALUATION_POINT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_NEXT_FUND_VALUATION_POINT",OrdType_NEXT_FUND_VALUATION_POINT_get, OrdType_NEXT_FUND_VALUATION_POINT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdType_PEGGED",OrdType_PEGGED_get, OrdType_PEGGED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_BUY",Side_BUY_get, Side_BUY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_SELL",Side_SELL_get, Side_SELL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_BUY_MINUS",Side_BUY_MINUS_get, Side_BUY_MINUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_SELL_PLUS",Side_SELL_PLUS_get, Side_SELL_PLUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_SELL_SHORT",Side_SELL_SHORT_get, Side_SELL_SHORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_SELL_SHORT_EXEMPT",Side_SELL_SHORT_EXEMPT_get, Side_SELL_SHORT_EXEMPT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_UNDISCLOSED",Side_UNDISCLOSED_get, Side_UNDISCLOSED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_CROSS",Side_CROSS_get, Side_CROSS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_CROSS_SHORT",Side_CROSS_SHORT_get, Side_CROSS_SHORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_CROSS_SHORT_EXEMPT",Side_CROSS_SHORT_EXEMPT_get, Side_CROSS_SHORT_EXEMPT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_AS_DEFINED",Side_AS_DEFINED_get, Side_AS_DEFINED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_OPPOSITE",Side_OPPOSITE_get, Side_OPPOSITE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_SUBSCRIBE",Side_SUBSCRIBE_get, Side_SUBSCRIBE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_REDEEM",Side_REDEEM_get, Side_REDEEM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_LEND",Side_LEND_get, Side_LEND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Side_BORROW",Side_BORROW_get, Side_BORROW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TimeInForce_DAY",TimeInForce_DAY_get, TimeInForce_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TimeInForce_GOOD_TILL_CANCEL",TimeInForce_GOOD_TILL_CANCEL_get, TimeInForce_GOOD_TILL_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TimeInForce_AT_THE_OPENING",TimeInForce_AT_THE_OPENING_get, TimeInForce_AT_THE_OPENING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TimeInForce_IMMEDIATE_OR_CANCEL",TimeInForce_IMMEDIATE_OR_CANCEL_get, TimeInForce_IMMEDIATE_OR_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TimeInForce_FILL_OR_KILL",TimeInForce_FILL_OR_KILL_get, TimeInForce_FILL_OR_KILL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TimeInForce_GOOD_TILL_CROSSING",TimeInForce_GOOD_TILL_CROSSING_get, TimeInForce_GOOD_TILL_CROSSING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TimeInForce_GOOD_TILL_DATE",TimeInForce_GOOD_TILL_DATE_get, TimeInForce_GOOD_TILL_DATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TimeInForce_AT_THE_CLOSE",TimeInForce_AT_THE_CLOSE_get, TimeInForce_AT_THE_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Urgency_NORMAL",Urgency_NORMAL_get, Urgency_NORMAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Urgency_FLASH",Urgency_FLASH_get, Urgency_FLASH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Urgency_BACKGROUND",Urgency_BACKGROUND_get, Urgency_BACKGROUND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlType_REGULAR",SettlType_REGULAR_get, SettlType_REGULAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlType_CASH",SettlType_CASH_get, SettlType_CASH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlType_NEXT_DAY",SettlType_NEXT_DAY_get, SettlType_NEXT_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlType_T_PLUS_2",SettlType_T_PLUS_2_get, SettlType_T_PLUS_2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlType_T_PLUS_3",SettlType_T_PLUS_3_get, SettlType_T_PLUS_3_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlType_T_PLUS_4",SettlType_T_PLUS_4_get, SettlType_T_PLUS_4_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlType_FUTURE",SettlType_FUTURE_get, SettlType_FUTURE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlType_WHEN_AND_IF_ISSUED",SettlType_WHEN_AND_IF_ISSUED_get, SettlType_WHEN_AND_IF_ISSUED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlType_SELLERS_OPTION",SettlType_SELLERS_OPTION_get, SettlType_SELLERS_OPTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlType_T_PLUS_5",SettlType_T_PLUS_5_get, SettlType_T_PLUS_5_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SymbolSfx_WHEN_ISSUED",SymbolSfx_WHEN_ISSUED_get, SymbolSfx_WHEN_ISSUED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SymbolSfx_A_EUCP_WITH_LUMP_SUM_INTEREST",SymbolSfx_A_EUCP_WITH_LUMP_SUM_INTEREST_get, SymbolSfx_A_EUCP_WITH_LUMP_SUM_INTEREST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocTransType_NEW",AllocTransType_NEW_get, AllocTransType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocTransType_REPLACE",AllocTransType_REPLACE_get, AllocTransType_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocTransType_CANCEL",AllocTransType_CANCEL_get, AllocTransType_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PositionEffect_OPEN",PositionEffect_OPEN_get, PositionEffect_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PositionEffect_CLOSE",PositionEffect_CLOSE_get, PositionEffect_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PositionEffect_ROLLED",PositionEffect_ROLLED_get, PositionEffect_ROLLED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PositionEffect_FIFO",PositionEffect_FIFO_get, PositionEffect_FIFO_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ProcessCode_REGULAR",ProcessCode_REGULAR_get, ProcessCode_REGULAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ProcessCode_SOFT_DOLLAR",ProcessCode_SOFT_DOLLAR_get, ProcessCode_SOFT_DOLLAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ProcessCode_STEP_IN",ProcessCode_STEP_IN_get, ProcessCode_STEP_IN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ProcessCode_STEP_OUT",ProcessCode_STEP_OUT_get, ProcessCode_STEP_OUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ProcessCode_SOFT_DOLLAR_STEP_IN",ProcessCode_SOFT_DOLLAR_STEP_IN_get, ProcessCode_SOFT_DOLLAR_STEP_IN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ProcessCode_SOFT_DOLLAR_STEP_OUT",ProcessCode_SOFT_DOLLAR_STEP_OUT_get, ProcessCode_SOFT_DOLLAR_STEP_OUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ProcessCode_PLAN_SPONSOR",ProcessCode_PLAN_SPONSOR_get, ProcessCode_PLAN_SPONSOR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocStatus_ACCEPTED",AllocStatus_ACCEPTED_get, AllocStatus_ACCEPTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocStatus_BLOCK_LEVEL_REJECT",AllocStatus_BLOCK_LEVEL_REJECT_get, AllocStatus_BLOCK_LEVEL_REJECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocStatus_ACCOUNT_LEVEL_REJECT",AllocStatus_ACCOUNT_LEVEL_REJECT_get, AllocStatus_ACCOUNT_LEVEL_REJECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocStatus_RECEIVED",AllocStatus_RECEIVED_get, AllocStatus_RECEIVED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocStatus_INCOMPLETE",AllocStatus_INCOMPLETE_get, AllocStatus_INCOMPLETE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocStatus_REJECTED_BY_INTERMEDIARY",AllocStatus_REJECTED_BY_INTERMEDIARY_get, AllocStatus_REJECTED_BY_INTERMEDIARY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocRejCode_UNKNOWN_ACCOUNT",AllocRejCode_UNKNOWN_ACCOUNT_get, AllocRejCode_UNKNOWN_ACCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocRejCode_INCORRECT_QUANTITY",AllocRejCode_INCORRECT_QUANTITY_get, AllocRejCode_INCORRECT_QUANTITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocRejCode_INCORRECT_AVERAGE_PRICE",AllocRejCode_INCORRECT_AVERAGE_PRICE_get, AllocRejCode_INCORRECT_AVERAGE_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC",AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC_get, AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocRejCode_COMMISSION_DIFFERENCE",AllocRejCode_COMMISSION_DIFFERENCE_get, AllocRejCode_COMMISSION_DIFFERENCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocRejCode_UNKNOWN_ORDERID",AllocRejCode_UNKNOWN_ORDERID_get, AllocRejCode_UNKNOWN_ORDERID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocRejCode_UNKNOWN_LISTID",AllocRejCode_UNKNOWN_LISTID_get, AllocRejCode_UNKNOWN_LISTID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocRejCode_OTHER",AllocRejCode_OTHER_get, AllocRejCode_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocRejCode_INCORRECT_ALLOCATED_QUANTITY",AllocRejCode_INCORRECT_ALLOCATED_QUANTITY_get, AllocRejCode_INCORRECT_ALLOCATED_QUANTITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocRejCode_CALCULATION_DIFFERENCE",AllocRejCode_CALCULATION_DIFFERENCE_get, AllocRejCode_CALCULATION_DIFFERENCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EmailType_NEW",EmailType_NEW_get, EmailType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EmailType_REPLY",EmailType_REPLY_get, EmailType_REPLY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EmailType_ADMIN_REPLY",EmailType_ADMIN_REPLY_get, EmailType_ADMIN_REPLY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EncryptMethod_NONE_OTHER",EncryptMethod_NONE_OTHER_get, EncryptMethod_NONE_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EncryptMethod_PKCS",EncryptMethod_PKCS_get, EncryptMethod_PKCS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EncryptMethod_DES",EncryptMethod_DES_get, EncryptMethod_DES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EncryptMethod_PKCS_DES",EncryptMethod_PKCS_DES_get, EncryptMethod_PKCS_DES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EncryptMethod_PGP_DES",EncryptMethod_PGP_DES_get, EncryptMethod_PGP_DES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EncryptMethod_PGP_DES_MD5",EncryptMethod_PGP_DES_MD5_get, EncryptMethod_PGP_DES_MD5_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EncryptMethod_PEM_DES_MD5",EncryptMethod_PEM_DES_MD5_get, EncryptMethod_PEM_DES_MD5_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlRejReason_TOO_LATE_TO_CANCEL",CxlRejReason_TOO_LATE_TO_CANCEL_get, CxlRejReason_TOO_LATE_TO_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlRejReason_UNKNOWN_ORDER",CxlRejReason_UNKNOWN_ORDER_get, CxlRejReason_UNKNOWN_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlRejReason_BROKER_EXCHANGE_OPTION",CxlRejReason_BROKER_EXCHANGE_OPTION_get, CxlRejReason_BROKER_EXCHANGE_OPTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS",CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS_get, CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST",CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST_get, CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER",CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER_get, CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlRejReason_DUPLICATE_CLORDID_RECEIVED",CxlRejReason_DUPLICATE_CLORDID_RECEIVED_get, CxlRejReason_DUPLICATE_CLORDID_RECEIVED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlRejReason_OTHER",CxlRejReason_OTHER_get, CxlRejReason_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_BROKER_EXCHANGE_OPTION",OrdRejReason_BROKER_EXCHANGE_OPTION_get, OrdRejReason_BROKER_EXCHANGE_OPTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_UNKNOWN_SYMBOL",OrdRejReason_UNKNOWN_SYMBOL_get, OrdRejReason_UNKNOWN_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_EXCHANGE_CLOSED",OrdRejReason_EXCHANGE_CLOSED_get, OrdRejReason_EXCHANGE_CLOSED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_ORDER_EXCEEDS_LIMIT",OrdRejReason_ORDER_EXCEEDS_LIMIT_get, OrdRejReason_ORDER_EXCEEDS_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_TOO_LATE_TO_ENTER",OrdRejReason_TOO_LATE_TO_ENTER_get, OrdRejReason_TOO_LATE_TO_ENTER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_UNKNOWN_ORDER",OrdRejReason_UNKNOWN_ORDER_get, OrdRejReason_UNKNOWN_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_DUPLICATE_ORDER",OrdRejReason_DUPLICATE_ORDER_get, OrdRejReason_DUPLICATE_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER",OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER_get, OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_STALE_ORDER",OrdRejReason_STALE_ORDER_get, OrdRejReason_STALE_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_TRADE_ALONG_REQUIRED",OrdRejReason_TRADE_ALONG_REQUIRED_get, OrdRejReason_TRADE_ALONG_REQUIRED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_INVALID_INVESTOR_ID",OrdRejReason_INVALID_INVESTOR_ID_get, OrdRejReason_INVALID_INVESTOR_ID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC",OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC_get, OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_SURVEILLENCE_OPTION",OrdRejReason_SURVEILLENCE_OPTION_get, OrdRejReason_SURVEILLENCE_OPTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_INCORRECT_QUANTITY",OrdRejReason_INCORRECT_QUANTITY_get, OrdRejReason_INCORRECT_QUANTITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_INCORRECT_ALLOCATED_QUANTITY",OrdRejReason_INCORRECT_ALLOCATED_QUANTITY_get, OrdRejReason_INCORRECT_ALLOCATED_QUANTITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_UNKNOWN_ACCOUNT",OrdRejReason_UNKNOWN_ACCOUNT_get, OrdRejReason_UNKNOWN_ACCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrdRejReason_OTHER",OrdRejReason_OTHER_get, OrdRejReason_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_ALL_OR_NONE",IOIQualifier_ALL_OR_NONE_get, IOIQualifier_ALL_OR_NONE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_MARKET_ON_CLOSE",IOIQualifier_MARKET_ON_CLOSE_get, IOIQualifier_MARKET_ON_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_AT_THE_CLOSE",IOIQualifier_AT_THE_CLOSE_get, IOIQualifier_AT_THE_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_VWAP",IOIQualifier_VWAP_get, IOIQualifier_VWAP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_IN_TOUCH_WITH",IOIQualifier_IN_TOUCH_WITH_get, IOIQualifier_IN_TOUCH_WITH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_LIMIT",IOIQualifier_LIMIT_get, IOIQualifier_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_MORE_BEHIND",IOIQualifier_MORE_BEHIND_get, IOIQualifier_MORE_BEHIND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_AT_THE_OPEN",IOIQualifier_AT_THE_OPEN_get, IOIQualifier_AT_THE_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_TAKING_A_POSITION",IOIQualifier_TAKING_A_POSITION_get, IOIQualifier_TAKING_A_POSITION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_AT_THE_MARKET",IOIQualifier_AT_THE_MARKET_get, IOIQualifier_AT_THE_MARKET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_READY_TO_TRADE",IOIQualifier_READY_TO_TRADE_get, IOIQualifier_READY_TO_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_PORTFOLIO_SHOWN",IOIQualifier_PORTFOLIO_SHOWN_get, IOIQualifier_PORTFOLIO_SHOWN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_THROUGH_THE_DAY",IOIQualifier_THROUGH_THE_DAY_get, IOIQualifier_THROUGH_THE_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_VERSUS",IOIQualifier_VERSUS_get, IOIQualifier_VERSUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_INDICATION_WORKING_AWAY",IOIQualifier_INDICATION_WORKING_AWAY_get, IOIQualifier_INDICATION_WORKING_AWAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_CROSSING_OPPORTUNITY",IOIQualifier_CROSSING_OPPORTUNITY_get, IOIQualifier_CROSSING_OPPORTUNITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_AT_THE_MIDPOINT",IOIQualifier_AT_THE_MIDPOINT_get, IOIQualifier_AT_THE_MIDPOINT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIQualifier_PRE_OPEN",IOIQualifier_PRE_OPEN_get, IOIQualifier_PRE_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DKReason_UNKNOWN_SYMBOL",DKReason_UNKNOWN_SYMBOL_get, DKReason_UNKNOWN_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DKReason_WRONG_SIDE",DKReason_WRONG_SIDE_get, DKReason_WRONG_SIDE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DKReason_QUANTITY_EXCEEDS_ORDER",DKReason_QUANTITY_EXCEEDS_ORDER_get, DKReason_QUANTITY_EXCEEDS_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DKReason_NO_MATCHING_ORDER",DKReason_NO_MATCHING_ORDER_get, DKReason_NO_MATCHING_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DKReason_PRICE_EXCEEDS_LIMIT",DKReason_PRICE_EXCEEDS_LIMIT_get, DKReason_PRICE_EXCEEDS_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DKReason_CALCULATION_DIFFERENCE",DKReason_CALCULATION_DIFFERENCE_get, DKReason_CALCULATION_DIFFERENCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DKReason_OTHER",DKReason_OTHER_get, DKReason_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeType_REGULATORY",MiscFeeType_REGULATORY_get, MiscFeeType_REGULATORY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeType_TAX",MiscFeeType_TAX_get, MiscFeeType_TAX_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeType_LOCAL_COMMISSION",MiscFeeType_LOCAL_COMMISSION_get, MiscFeeType_LOCAL_COMMISSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeType_EXCHANGE_FEES",MiscFeeType_EXCHANGE_FEES_get, MiscFeeType_EXCHANGE_FEES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeType_STAMP",MiscFeeType_STAMP_get, MiscFeeType_STAMP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeType_LEVY",MiscFeeType_LEVY_get, MiscFeeType_LEVY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeType_OTHER",MiscFeeType_OTHER_get, MiscFeeType_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeType_MARKUP",MiscFeeType_MARKUP_get, MiscFeeType_MARKUP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeType_CONSUMPTION_TAX",MiscFeeType_CONSUMPTION_TAX_get, MiscFeeType_CONSUMPTION_TAX_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_NEW",ExecType_NEW_get, ExecType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_PARTIAL_FILL",ExecType_PARTIAL_FILL_get, ExecType_PARTIAL_FILL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_FILL",ExecType_FILL_get, ExecType_FILL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_DONE_FOR_DAY",ExecType_DONE_FOR_DAY_get, ExecType_DONE_FOR_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_CANCELED",ExecType_CANCELED_get, ExecType_CANCELED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_REPLACE",ExecType_REPLACE_get, ExecType_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_PENDING_CANCEL",ExecType_PENDING_CANCEL_get, ExecType_PENDING_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_STOPPED",ExecType_STOPPED_get, ExecType_STOPPED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_REJECTED",ExecType_REJECTED_get, ExecType_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_SUSPENDED",ExecType_SUSPENDED_get, ExecType_SUSPENDED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_PENDING_NEW",ExecType_PENDING_NEW_get, ExecType_PENDING_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_CALCULATED",ExecType_CALCULATED_get, ExecType_CALCULATED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_EXPIRED",ExecType_EXPIRED_get, ExecType_EXPIRED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_RESTATED",ExecType_RESTATED_get, ExecType_RESTATED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_PENDING_REPLACE",ExecType_PENDING_REPLACE_get, ExecType_PENDING_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_TRADE",ExecType_TRADE_get, ExecType_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_TRADE_CORRECT",ExecType_TRADE_CORRECT_get, ExecType_TRADE_CORRECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_TRADE_CANCEL",ExecType_TRADE_CANCEL_get, ExecType_TRADE_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecType_ORDER_STATUS",ExecType_ORDER_STATUS_get, ExecType_ORDER_STATUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlCurrFxRateCalc_MULTIPLY",SettlCurrFxRateCalc_MULTIPLY_get, SettlCurrFxRateCalc_MULTIPLY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlCurrFxRateCalc_DIVIDE",SettlCurrFxRateCalc_DIVIDE_get, SettlCurrFxRateCalc_DIVIDE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstMode_DEFAULT",SettlInstMode_DEFAULT_get, SettlInstMode_DEFAULT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED",SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED_get, SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT",SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT_get, SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstMode_REQUEST_REJECT",SettlInstMode_REQUEST_REJECT_get, SettlInstMode_REQUEST_REJECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstTransType_NEW",SettlInstTransType_NEW_get, SettlInstTransType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstTransType_CANCEL",SettlInstTransType_CANCEL_get, SettlInstTransType_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstTransType_REPLACE",SettlInstTransType_REPLACE_get, SettlInstTransType_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstTransType_RESTATE",SettlInstTransType_RESTATE_get, SettlInstTransType_RESTATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstSource_BROKERS_INSTRUCTIONS",SettlInstSource_BROKERS_INSTRUCTIONS_get, SettlInstSource_BROKERS_INSTRUCTIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstSource_INSTITUTIONS_INSTRUCTIONS",SettlInstSource_INSTITUTIONS_INSTRUCTIONS_get, SettlInstSource_INSTITUTIONS_INSTRUCTIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstSource_INVESTOR",SettlInstSource_INVESTOR_get, SettlInstSource_INVESTOR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_EURO_SUPRANATIONAL_COUPONS",SecurityType_EURO_SUPRANATIONAL_COUPONS_get, SecurityType_EURO_SUPRANATIONAL_COUPONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_FEDERAL_AGENCY_COUPON",SecurityType_FEDERAL_AGENCY_COUPON_get, SecurityType_FEDERAL_AGENCY_COUPON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE",SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE_get, SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_PRIVATE_EXPORT_FUNDING",SecurityType_PRIVATE_EXPORT_FUNDING_get, SecurityType_PRIVATE_EXPORT_FUNDING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_USD_SUPRANATIONAL_COUPONS",SecurityType_USD_SUPRANATIONAL_COUPONS_get, SecurityType_USD_SUPRANATIONAL_COUPONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_FUTURE",SecurityType_FUTURE_get, SecurityType_FUTURE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_OPTION",SecurityType_OPTION_get, SecurityType_OPTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_CORPORATE_BOND",SecurityType_CORPORATE_BOND_get, SecurityType_CORPORATE_BOND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_CORPORATE_PRIVATE_PLACEMENT",SecurityType_CORPORATE_PRIVATE_PLACEMENT_get, SecurityType_CORPORATE_PRIVATE_PLACEMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_CONVERTIBLE_BOND",SecurityType_CONVERTIBLE_BOND_get, SecurityType_CONVERTIBLE_BOND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_DUAL_CURRENCY",SecurityType_DUAL_CURRENCY_get, SecurityType_DUAL_CURRENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_EURO_CORPORATE_BOND",SecurityType_EURO_CORPORATE_BOND_get, SecurityType_EURO_CORPORATE_BOND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_INDEXED_LINKED",SecurityType_INDEXED_LINKED_get, SecurityType_INDEXED_LINKED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_STRUCTURED_NOTES",SecurityType_STRUCTURED_NOTES_get, SecurityType_STRUCTURED_NOTES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_YANKEE_CORPORATE_BOND",SecurityType_YANKEE_CORPORATE_BOND_get, SecurityType_YANKEE_CORPORATE_BOND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_FOREIGN_EXCHANGE_CONTRACT",SecurityType_FOREIGN_EXCHANGE_CONTRACT_get, SecurityType_FOREIGN_EXCHANGE_CONTRACT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_COMMON_STOCK",SecurityType_COMMON_STOCK_get, SecurityType_COMMON_STOCK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_PREFERRED_STOCK",SecurityType_PREFERRED_STOCK_get, SecurityType_PREFERRED_STOCK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_BRADY_BOND",SecurityType_BRADY_BOND_get, SecurityType_BRADY_BOND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_EURO_SOVEREIGNS",SecurityType_EURO_SOVEREIGNS_get, SecurityType_EURO_SOVEREIGNS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_US_TREASURY_BOND",SecurityType_US_TREASURY_BOND_get, SecurityType_US_TREASURY_BOND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE",SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE_get, SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES",SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES_get, SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE",SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE_get, SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE",SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE_get, SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_US_TREASURY_NOTE",SecurityType_US_TREASURY_NOTE_get, SecurityType_US_TREASURY_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_US_TREASURY_BILL",SecurityType_US_TREASURY_BILL_get, SecurityType_US_TREASURY_BILL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_REPURCHASE",SecurityType_REPURCHASE_get, SecurityType_REPURCHASE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_FORWARD",SecurityType_FORWARD_get, SecurityType_FORWARD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_BUY_SELLBACK",SecurityType_BUY_SELLBACK_get, SecurityType_BUY_SELLBACK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_SECURITIES_LOAN",SecurityType_SECURITIES_LOAN_get, SecurityType_SECURITIES_LOAN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_SECURITIES_PLEDGE",SecurityType_SECURITIES_PLEDGE_get, SecurityType_SECURITIES_PLEDGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_TERM_LOAN",SecurityType_TERM_LOAN_get, SecurityType_TERM_LOAN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_REVOLVER_LOAN",SecurityType_REVOLVER_LOAN_get, SecurityType_REVOLVER_LOAN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_REVOLVER_TERM_LOAN",SecurityType_REVOLVER_TERM_LOAN_get, SecurityType_REVOLVER_TERM_LOAN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_BRIDGE_LOAN",SecurityType_BRIDGE_LOAN_get, SecurityType_BRIDGE_LOAN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_LETTER_OF_CREDIT",SecurityType_LETTER_OF_CREDIT_get, SecurityType_LETTER_OF_CREDIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_SWING_LINE_FACILITY",SecurityType_SWING_LINE_FACILITY_get, SecurityType_SWING_LINE_FACILITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_DEBTOR_IN_POSSESSION",SecurityType_DEBTOR_IN_POSSESSION_get, SecurityType_DEBTOR_IN_POSSESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_DEFAULTED",SecurityType_DEFAULTED_get, SecurityType_DEFAULTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_WITHDRAWN",SecurityType_WITHDRAWN_get, SecurityType_WITHDRAWN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_REPLACED",SecurityType_REPLACED_get, SecurityType_REPLACED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_MATURED",SecurityType_MATURED_get, SecurityType_MATURED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_AMENDED_AND_RESTATED",SecurityType_AMENDED_AND_RESTATED_get, SecurityType_AMENDED_AND_RESTATED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_RETIRED",SecurityType_RETIRED_get, SecurityType_RETIRED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_BANKERS_ACCEPTANCE",SecurityType_BANKERS_ACCEPTANCE_get, SecurityType_BANKERS_ACCEPTANCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_BANK_NOTES",SecurityType_BANK_NOTES_get, SecurityType_BANK_NOTES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_BILL_OF_EXCHANGES",SecurityType_BILL_OF_EXCHANGES_get, SecurityType_BILL_OF_EXCHANGES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_CERTIFICATE_OF_DEPOSIT",SecurityType_CERTIFICATE_OF_DEPOSIT_get, SecurityType_CERTIFICATE_OF_DEPOSIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_CALL_LOANS",SecurityType_CALL_LOANS_get, SecurityType_CALL_LOANS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_COMMERCIAL_PAPER",SecurityType_COMMERCIAL_PAPER_get, SecurityType_COMMERCIAL_PAPER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_DEPOSIT_NOTES",SecurityType_DEPOSIT_NOTES_get, SecurityType_DEPOSIT_NOTES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_EURO_CERTIFICATE_OF_DEPOSIT",SecurityType_EURO_CERTIFICATE_OF_DEPOSIT_get, SecurityType_EURO_CERTIFICATE_OF_DEPOSIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_EURO_COMMERCIAL_PAPER",SecurityType_EURO_COMMERCIAL_PAPER_get, SecurityType_EURO_COMMERCIAL_PAPER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_LIQUIDITY_NOTE",SecurityType_LIQUIDITY_NOTE_get, SecurityType_LIQUIDITY_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_MEDIUM_TERM_NOTES",SecurityType_MEDIUM_TERM_NOTES_get, SecurityType_MEDIUM_TERM_NOTES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_OVERNIGHT",SecurityType_OVERNIGHT_get, SecurityType_OVERNIGHT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_PROMISSORY_NOTE",SecurityType_PROMISSORY_NOTE_get, SecurityType_PROMISSORY_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_PLAZOS_FIJOS",SecurityType_PLAZOS_FIJOS_get, SecurityType_PLAZOS_FIJOS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_SHORT_TERM_LOAN_NOTE",SecurityType_SHORT_TERM_LOAN_NOTE_get, SecurityType_SHORT_TERM_LOAN_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_TIME_DEPOSIT",SecurityType_TIME_DEPOSIT_get, SecurityType_TIME_DEPOSIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_EXTENDED_COMM_NOTE",SecurityType_EXTENDED_COMM_NOTE_get, SecurityType_EXTENDED_COMM_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT",SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT_get, SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_ASSET_BACKED_SECURITIES",SecurityType_ASSET_BACKED_SECURITIES_get, SecurityType_ASSET_BACKED_SECURITIES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_CORP_MORTGAGE_BACKED_SECURITIES",SecurityType_CORP_MORTGAGE_BACKED_SECURITIES_get, SecurityType_CORP_MORTGAGE_BACKED_SECURITIES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION",SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION_get, SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_IOETTE_MORTGAGE",SecurityType_IOETTE_MORTGAGE_get, SecurityType_IOETTE_MORTGAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_MORTGAGE_BACKED_SECURITIES",SecurityType_MORTGAGE_BACKED_SECURITIES_get, SecurityType_MORTGAGE_BACKED_SECURITIES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_MORTGAGE_INTEREST_ONLY",SecurityType_MORTGAGE_INTEREST_ONLY_get, SecurityType_MORTGAGE_INTEREST_ONLY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_MORTGAGE_PRINCIPAL_ONLY",SecurityType_MORTGAGE_PRINCIPAL_ONLY_get, SecurityType_MORTGAGE_PRINCIPAL_ONLY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_MORTGAGE_PRIVATE_PLACEMENT",SecurityType_MORTGAGE_PRIVATE_PLACEMENT_get, SecurityType_MORTGAGE_PRIVATE_PLACEMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_MISCELLANEOUS_PASS_THROUGH",SecurityType_MISCELLANEOUS_PASS_THROUGH_get, SecurityType_MISCELLANEOUS_PASS_THROUGH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_PFANDBRIEFE",SecurityType_PFANDBRIEFE_get, SecurityType_PFANDBRIEFE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_TO_BE_ANNOUNCED",SecurityType_TO_BE_ANNOUNCED_get, SecurityType_TO_BE_ANNOUNCED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_OTHER_ANTICIPATION_NOTES",SecurityType_OTHER_ANTICIPATION_NOTES_get, SecurityType_OTHER_ANTICIPATION_NOTES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_CERTIFICATE_OF_OBLIGATION",SecurityType_CERTIFICATE_OF_OBLIGATION_get, SecurityType_CERTIFICATE_OF_OBLIGATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_CERTIFICATE_OF_PARTICIPATION",SecurityType_CERTIFICATE_OF_PARTICIPATION_get, SecurityType_CERTIFICATE_OF_PARTICIPATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_GENERAL_OBLIGATION_BONDS",SecurityType_GENERAL_OBLIGATION_BONDS_get, SecurityType_GENERAL_OBLIGATION_BONDS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_MANDATORY_TENDER",SecurityType_MANDATORY_TENDER_get, SecurityType_MANDATORY_TENDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_REVENUE_ANTICIPATION_NOTE",SecurityType_REVENUE_ANTICIPATION_NOTE_get, SecurityType_REVENUE_ANTICIPATION_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_REVENUE_BONDS",SecurityType_REVENUE_BONDS_get, SecurityType_REVENUE_BONDS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_SPECIAL_ASSESSMENT",SecurityType_SPECIAL_ASSESSMENT_get, SecurityType_SPECIAL_ASSESSMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_SPECIAL_OBLIGATION",SecurityType_SPECIAL_OBLIGATION_get, SecurityType_SPECIAL_OBLIGATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_SPECIAL_TAX",SecurityType_SPECIAL_TAX_get, SecurityType_SPECIAL_TAX_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_TAX_ANTICIPATION_NOTE",SecurityType_TAX_ANTICIPATION_NOTE_get, SecurityType_TAX_ANTICIPATION_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_TAX_ALLOCATION",SecurityType_TAX_ALLOCATION_get, SecurityType_TAX_ALLOCATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER",SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER_get, SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_TAX_AND_REVENUE_ANTICIPATION_NOTE",SecurityType_TAX_AND_REVENUE_ANTICIPATION_NOTE_get, SecurityType_TAX_AND_REVENUE_ANTICIPATION_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_VARIABLE_RATE_DEMAND_NOTE",SecurityType_VARIABLE_RATE_DEMAND_NOTE_get, SecurityType_VARIABLE_RATE_DEMAND_NOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_WARRANT",SecurityType_WARRANT_get, SecurityType_WARRANT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_MUTUAL_FUND",SecurityType_MUTUAL_FUND_get, SecurityType_MUTUAL_FUND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_MULTI_LEG_INSTRUMENT",SecurityType_MULTI_LEG_INSTRUMENT_get, SecurityType_MULTI_LEG_INSTRUMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_NO_SECURITY_TYPE",SecurityType_NO_SECURITY_TYPE_get, SecurityType_NO_SECURITY_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityType_WILDCARD",SecurityType_WILDCARD_get, SecurityType_WILDCARD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StandInstDbType_OTHER",StandInstDbType_OTHER_get, StandInstDbType_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StandInstDbType_DTC_SID",StandInstDbType_DTC_SID_get, StandInstDbType_DTC_SID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StandInstDbType_THOMSON_ALERT",StandInstDbType_THOMSON_ALERT_get, StandInstDbType_THOMSON_ALERT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StandInstDbType_A_GLOBAL_CUSTODIAN",StandInstDbType_A_GLOBAL_CUSTODIAN_get, StandInstDbType_A_GLOBAL_CUSTODIAN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StandInstDbType_ACCOUNTNET",StandInstDbType_ACCOUNTNET_get, StandInstDbType_ACCOUNTNET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlDeliveryType_VERSUS_PAYMENT",SettlDeliveryType_VERSUS_PAYMENT_get, SettlDeliveryType_VERSUS_PAYMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlDeliveryType_FREE",SettlDeliveryType_FREE_get, SettlDeliveryType_FREE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlDeliveryType_TRI_PARTY",SettlDeliveryType_TRI_PARTY_get, SettlDeliveryType_TRI_PARTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlDeliveryType_HOLD_IN_CUSTODY",SettlDeliveryType_HOLD_IN_CUSTODY_get, SettlDeliveryType_HOLD_IN_CUSTODY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocLinkType_F_X_NETTING",AllocLinkType_F_X_NETTING_get, AllocLinkType_F_X_NETTING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocLinkType_F_X_SWAP",AllocLinkType_F_X_SWAP_get, AllocLinkType_F_X_SWAP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CoveredOrUncovered_COVERED",CoveredOrUncovered_COVERED_get, CoveredOrUncovered_COVERED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CoveredOrUncovered_UNCOVERED",CoveredOrUncovered_UNCOVERED_get, CoveredOrUncovered_UNCOVERED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocHandlInst_MATCH",AllocHandlInst_MATCH_get, AllocHandlInst_MATCH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocHandlInst_FORWARD",AllocHandlInst_FORWARD_get, AllocHandlInst_FORWARD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocHandlInst_FORWARD_AND_MATCH",AllocHandlInst_FORWARD_AND_MATCH_get, AllocHandlInst_FORWARD_AND_MATCH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RoutingType_TARGET_FIRM",RoutingType_TARGET_FIRM_get, RoutingType_TARGET_FIRM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RoutingType_TARGET_LIST",RoutingType_TARGET_LIST_get, RoutingType_TARGET_LIST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RoutingType_BLOCK_FIRM",RoutingType_BLOCK_FIRM_get, RoutingType_BLOCK_FIRM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RoutingType_BLOCK_LIST",RoutingType_BLOCK_LIST_get, RoutingType_BLOCK_LIST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_MUNIAAA",BenchmarkCurveName_MUNIAAA_get, BenchmarkCurveName_MUNIAAA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_FUTURESWAP",BenchmarkCurveName_FUTURESWAP_get, BenchmarkCurveName_FUTURESWAP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_LIBID",BenchmarkCurveName_LIBID_get, BenchmarkCurveName_LIBID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_LIBOR",BenchmarkCurveName_LIBOR_get, BenchmarkCurveName_LIBOR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_OTHER",BenchmarkCurveName_OTHER_get, BenchmarkCurveName_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_SWAP",BenchmarkCurveName_SWAP_get, BenchmarkCurveName_SWAP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_TREASURY",BenchmarkCurveName_TREASURY_get, BenchmarkCurveName_TREASURY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_EURIBOR",BenchmarkCurveName_EURIBOR_get, BenchmarkCurveName_EURIBOR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_PFANDBRIEFE",BenchmarkCurveName_PFANDBRIEFE_get, BenchmarkCurveName_PFANDBRIEFE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_EONIA",BenchmarkCurveName_EONIA_get, BenchmarkCurveName_EONIA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_SONIA",BenchmarkCurveName_SONIA_get, BenchmarkCurveName_SONIA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BenchmarkCurveName_EUREPO",BenchmarkCurveName_EUREPO_get, BenchmarkCurveName_EUREPO_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_AMT",StipulationType_AMT_get, StipulationType_AMT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_AUTO_REINVESTMENT_AT_OR_BETTER",StipulationType_AUTO_REINVESTMENT_AT_OR_BETTER_get, StipulationType_AUTO_REINVESTMENT_AT_OR_BETTER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_BANK_QUALIFIED",StipulationType_BANK_QUALIFIED_get, StipulationType_BANK_QUALIFIED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_BARGAIN_CONDITIONS",StipulationType_BARGAIN_CONDITIONS_get, StipulationType_BARGAIN_CONDITIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_COUPON_RANGE",StipulationType_COUPON_RANGE_get, StipulationType_COUPON_RANGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_ISO_CURRENCY_CODE",StipulationType_ISO_CURRENCY_CODE_get, StipulationType_ISO_CURRENCY_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_CUSTOM_START_END_DATE",StipulationType_CUSTOM_START_END_DATE_get, StipulationType_CUSTOM_START_END_DATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_GEOGRAPHICS_AND_PERCENT_RANGE",StipulationType_GEOGRAPHICS_AND_PERCENT_RANGE_get, StipulationType_GEOGRAPHICS_AND_PERCENT_RANGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_VALUATION_DISCOUNT",StipulationType_VALUATION_DISCOUNT_get, StipulationType_VALUATION_DISCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_INSURED",StipulationType_INSURED_get, StipulationType_INSURED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE",StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE_get, StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_ISSUERS_TICKER",StipulationType_ISSUERS_TICKER_get, StipulationType_ISSUERS_TICKER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_ISSUE_SIZE_RANGE",StipulationType_ISSUE_SIZE_RANGE_get, StipulationType_ISSUE_SIZE_RANGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_LOOKBACK_DAYS",StipulationType_LOOKBACK_DAYS_get, StipulationType_LOOKBACK_DAYS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_EXPLICIT_LOT_IDENTIFIER",StipulationType_EXPLICIT_LOT_IDENTIFIER_get, StipulationType_EXPLICIT_LOT_IDENTIFIER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_LOT_VARIANCE",StipulationType_LOT_VARIANCE_get, StipulationType_LOT_VARIANCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_MATURITY_YEAR_AND_MONTH",StipulationType_MATURITY_YEAR_AND_MONTH_get, StipulationType_MATURITY_YEAR_AND_MONTH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_MATURITY_RANGE",StipulationType_MATURITY_RANGE_get, StipulationType_MATURITY_RANGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_MAXIMUM_SUBSTITUTIONS",StipulationType_MAXIMUM_SUBSTITUTIONS_get, StipulationType_MAXIMUM_SUBSTITUTIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_MINIMUM_QUANTITY",StipulationType_MINIMUM_QUANTITY_get, StipulationType_MINIMUM_QUANTITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_MINIMUM_INCREMENT",StipulationType_MINIMUM_INCREMENT_get, StipulationType_MINIMUM_INCREMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_MINIMUM_DENOMINATION",StipulationType_MINIMUM_DENOMINATION_get, StipulationType_MINIMUM_DENOMINATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_PAYMENT_FREQUENCY_CALENDAR",StipulationType_PAYMENT_FREQUENCY_CALENDAR_get, StipulationType_PAYMENT_FREQUENCY_CALENDAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_NUMBER_OF_PIECES",StipulationType_NUMBER_OF_PIECES_get, StipulationType_NUMBER_OF_PIECES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_POOLS_MAXIMUM",StipulationType_POOLS_MAXIMUM_get, StipulationType_POOLS_MAXIMUM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_POOLS_PER_MILLION",StipulationType_POOLS_PER_MILLION_get, StipulationType_POOLS_PER_MILLION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_POOLS_PER_LOT",StipulationType_POOLS_PER_LOT_get, StipulationType_POOLS_PER_LOT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_POOLS_PER_TRADE",StipulationType_POOLS_PER_TRADE_get, StipulationType_POOLS_PER_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_PRICE_RANGE",StipulationType_PRICE_RANGE_get, StipulationType_PRICE_RANGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_PRICING_FREQUENCY",StipulationType_PRICING_FREQUENCY_get, StipulationType_PRICING_FREQUENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_PRODUCTION_YEAR",StipulationType_PRODUCTION_YEAR_get, StipulationType_PRODUCTION_YEAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_CALL_PROTECTION",StipulationType_CALL_PROTECTION_get, StipulationType_CALL_PROTECTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_PURPOSE",StipulationType_PURPOSE_get, StipulationType_PURPOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_BENCHMARK_PRICE_SOURCE",StipulationType_BENCHMARK_PRICE_SOURCE_get, StipulationType_BENCHMARK_PRICE_SOURCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_RATING_SOURCE_AND_RANGE",StipulationType_RATING_SOURCE_AND_RANGE_get, StipulationType_RATING_SOURCE_AND_RANGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_RESTRICTED",StipulationType_RESTRICTED_get, StipulationType_RESTRICTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_MARKET_SECTOR",StipulationType_MARKET_SECTOR_get, StipulationType_MARKET_SECTOR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED",StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED_get, StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_STRUCTURE",StipulationType_STRUCTURE_get, StipulationType_STRUCTURE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_SUBSTITUTIONS_FREQUENCY",StipulationType_SUBSTITUTIONS_FREQUENCY_get, StipulationType_SUBSTITUTIONS_FREQUENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_SUBSTITUTIONS_LEFT",StipulationType_SUBSTITUTIONS_LEFT_get, StipulationType_SUBSTITUTIONS_LEFT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_FREEFORM_TEXT",StipulationType_FREEFORM_TEXT_get, StipulationType_FREEFORM_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_TRADE_VARIANCE",StipulationType_TRADE_VARIANCE_get, StipulationType_TRADE_VARIANCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_WEIGHTED_AVERAGE_COUPON",StipulationType_WEIGHTED_AVERAGE_COUPON_get, StipulationType_WEIGHTED_AVERAGE_COUPON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON",StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON_get, StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_WEIGHTED_AVERAGE_LOAN_AGE",StipulationType_WEIGHTED_AVERAGE_LOAN_AGE_get, StipulationType_WEIGHTED_AVERAGE_LOAN_AGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_WEIGHTED_AVERAGE_MATURITY",StipulationType_WEIGHTED_AVERAGE_MATURITY_get, StipulationType_WEIGHTED_AVERAGE_MATURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_WHOLE_POOL",StipulationType_WHOLE_POOL_get, StipulationType_WHOLE_POOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_YIELD_RANGE",StipulationType_YIELD_RANGE_get, StipulationType_YIELD_RANGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_SINGLE_MONTHLY_MORTALITY",StipulationType_SINGLE_MONTHLY_MORTALITY_get, StipulationType_SINGLE_MONTHLY_MORTALITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_CONSTANT_PREPAYMENT_RATE",StipulationType_CONSTANT_PREPAYMENT_RATE_get, StipulationType_CONSTANT_PREPAYMENT_RATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_CONSTANT_PREPAYMENT_YIELD",StipulationType_CONSTANT_PREPAYMENT_YIELD_get, StipulationType_CONSTANT_PREPAYMENT_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_CONSTANT_PREPAYMENT_PENALTY",StipulationType_CONSTANT_PREPAYMENT_PENALTY_get, StipulationType_CONSTANT_PREPAYMENT_PENALTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_ABSOLUTE_PREPAYMENT_SPEED",StipulationType_ABSOLUTE_PREPAYMENT_SPEED_get, StipulationType_ABSOLUTE_PREPAYMENT_SPEED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_MONTHLY_PREPAYMENT_RATE",StipulationType_MONTHLY_PREPAYMENT_RATE_get, StipulationType_MONTHLY_PREPAYMENT_RATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE",StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE_get, StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE",StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE_get, StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE",StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE_get, StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE",StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE_get, StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_SPECIAL_CUM_DIVIDEND",StipulationValue_SPECIAL_CUM_DIVIDEND_get, StipulationValue_SPECIAL_CUM_DIVIDEND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_SPECIAL_EX_DIVIDEND",StipulationValue_SPECIAL_EX_DIVIDEND_get, StipulationValue_SPECIAL_EX_DIVIDEND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_SPECIAL_CUM_COUPON",StipulationValue_SPECIAL_CUM_COUPON_get, StipulationValue_SPECIAL_CUM_COUPON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_SPECIAL_EX_COUPON",StipulationValue_SPECIAL_EX_COUPON_get, StipulationValue_SPECIAL_EX_COUPON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_SPECIAL_CUM_BONUS",StipulationValue_SPECIAL_CUM_BONUS_get, StipulationValue_SPECIAL_CUM_BONUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_SPECIAL_EX_BONUS",StipulationValue_SPECIAL_EX_BONUS_get, StipulationValue_SPECIAL_EX_BONUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_SPECIAL_CUM_RIGHTS",StipulationValue_SPECIAL_CUM_RIGHTS_get, StipulationValue_SPECIAL_CUM_RIGHTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_SPECIAL_EX_RIGHTS",StipulationValue_SPECIAL_EX_RIGHTS_get, StipulationValue_SPECIAL_EX_RIGHTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_SPECIAL_CUM_CAPITAL_REPAYMENTS",StipulationValue_SPECIAL_CUM_CAPITAL_REPAYMENTS_get, StipulationValue_SPECIAL_CUM_CAPITAL_REPAYMENTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_SPECIAL_EX_CAPITAL_REPAYMENTS",StipulationValue_SPECIAL_EX_CAPITAL_REPAYMENTS_get, StipulationValue_SPECIAL_EX_CAPITAL_REPAYMENTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_CASH_SETTLEMENT",StipulationValue_CASH_SETTLEMENT_get, StipulationValue_CASH_SETTLEMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_SPECIAL_PRICE",StipulationValue_SPECIAL_PRICE_get, StipulationValue_SPECIAL_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES",StipulationValue_REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES_get, StipulationValue_REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StipulationValue_GUARANTEED_DELIVERY",StipulationValue_GUARANTEED_DELIVERY_get, StipulationValue_GUARANTEED_DELIVERY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_AFTER_TAX_YIELD",YieldType_AFTER_TAX_YIELD_get, YieldType_AFTER_TAX_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_ANNUAL_YIELD",YieldType_ANNUAL_YIELD_get, YieldType_ANNUAL_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_AT_ISSUE",YieldType_YIELD_AT_ISSUE_get, YieldType_YIELD_AT_ISSUE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_TO_AVERAGE_MATURITY",YieldType_YIELD_TO_AVERAGE_MATURITY_get, YieldType_YIELD_TO_AVERAGE_MATURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_BOOK_YIELD",YieldType_BOOK_YIELD_get, YieldType_BOOK_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_TO_NEXT_CALL",YieldType_YIELD_TO_NEXT_CALL_get, YieldType_YIELD_TO_NEXT_CALL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_CHANGE_SINCE_CLOSE",YieldType_YIELD_CHANGE_SINCE_CLOSE_get, YieldType_YIELD_CHANGE_SINCE_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_CLOSING_YIELD",YieldType_CLOSING_YIELD_get, YieldType_CLOSING_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_COMPOUND_YIELD",YieldType_COMPOUND_YIELD_get, YieldType_COMPOUND_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_CURRENT_YIELD",YieldType_CURRENT_YIELD_get, YieldType_CURRENT_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_TRUE_GROSS_YIELD",YieldType_TRUE_GROSS_YIELD_get, YieldType_TRUE_GROSS_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_GOVERNMENT_EQUIVALENT_YIELD",YieldType_GOVERNMENT_EQUIVALENT_YIELD_get, YieldType_GOVERNMENT_EQUIVALENT_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_WITH_INFLATION_ASSUMPTION",YieldType_YIELD_WITH_INFLATION_ASSUMPTION_get, YieldType_YIELD_WITH_INFLATION_ASSUMPTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_INVERSE_FLOATER_BOND_YIELD",YieldType_INVERSE_FLOATER_BOND_YIELD_get, YieldType_INVERSE_FLOATER_BOND_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_MOST_RECENT_CLOSING_YIELD",YieldType_MOST_RECENT_CLOSING_YIELD_get, YieldType_MOST_RECENT_CLOSING_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_CLOSING_YIELD_MOST_RECENT_MONTH",YieldType_CLOSING_YIELD_MOST_RECENT_MONTH_get, YieldType_CLOSING_YIELD_MOST_RECENT_MONTH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER",YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER_get, YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_CLOSING_YIELD_MOST_RECENT_YEAR",YieldType_CLOSING_YIELD_MOST_RECENT_YEAR_get, YieldType_CLOSING_YIELD_MOST_RECENT_YEAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE",YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE_get, YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_MARK_TO_MARKET_YIELD",YieldType_MARK_TO_MARKET_YIELD_get, YieldType_MARK_TO_MARKET_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_TO_MATURITY",YieldType_YIELD_TO_MATURITY_get, YieldType_YIELD_TO_MATURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_TO_NEXT_REFUND",YieldType_YIELD_TO_NEXT_REFUND_get, YieldType_YIELD_TO_NEXT_REFUND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_OPEN_AVERAGE_YIELD",YieldType_OPEN_AVERAGE_YIELD_get, YieldType_OPEN_AVERAGE_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_TO_NEXT_PUT",YieldType_YIELD_TO_NEXT_PUT_get, YieldType_YIELD_TO_NEXT_PUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_PREVIOUS_CLOSE_YIELD",YieldType_PREVIOUS_CLOSE_YIELD_get, YieldType_PREVIOUS_CLOSE_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_PROCEEDS_YIELD",YieldType_PROCEEDS_YIELD_get, YieldType_PROCEEDS_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_SEMI_ANNUAL_YIELD",YieldType_SEMI_ANNUAL_YIELD_get, YieldType_SEMI_ANNUAL_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE",YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE_get, YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_SIMPLE_YIELD",YieldType_SIMPLE_YIELD_get, YieldType_SIMPLE_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_TAX_EQUIVALENT_YIELD",YieldType_TAX_EQUIVALENT_YIELD_get, YieldType_TAX_EQUIVALENT_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_TO_TENDER_DATE",YieldType_YIELD_TO_TENDER_DATE_get, YieldType_YIELD_TO_TENDER_DATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_TRUE_YIELD",YieldType_TRUE_YIELD_get, YieldType_TRUE_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_VALUE_OF_1_32",YieldType_YIELD_VALUE_OF_1_32_get, YieldType_YIELD_VALUE_OF_1_32_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"YieldType_YIELD_TO_WORST",YieldType_YIELD_TO_WORST_get, YieldType_YIELD_TO_WORST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SubscriptionRequestType_SNAPSHOT",SubscriptionRequestType_SNAPSHOT_get, SubscriptionRequestType_SNAPSHOT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES",SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES_get, SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST",SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST_get, SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDUpdateType_FULL_REFRESH",MDUpdateType_FULL_REFRESH_get, MDUpdateType_FULL_REFRESH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDUpdateType_INCREMENTAL_REFRESH",MDUpdateType_INCREMENTAL_REFRESH_get, MDUpdateType_INCREMENTAL_REFRESH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_BID",MDEntryType_BID_get, MDEntryType_BID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_OFFER",MDEntryType_OFFER_get, MDEntryType_OFFER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_TRADE",MDEntryType_TRADE_get, MDEntryType_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_INDEX_VALUE",MDEntryType_INDEX_VALUE_get, MDEntryType_INDEX_VALUE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_OPENING_PRICE",MDEntryType_OPENING_PRICE_get, MDEntryType_OPENING_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_CLOSING_PRICE",MDEntryType_CLOSING_PRICE_get, MDEntryType_CLOSING_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_SETTLEMENT_PRICE",MDEntryType_SETTLEMENT_PRICE_get, MDEntryType_SETTLEMENT_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_TRADING_SESSION_HIGH_PRICE",MDEntryType_TRADING_SESSION_HIGH_PRICE_get, MDEntryType_TRADING_SESSION_HIGH_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_TRADING_SESSION_LOW_PRICE",MDEntryType_TRADING_SESSION_LOW_PRICE_get, MDEntryType_TRADING_SESSION_LOW_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_TRADING_SESSION_VWAP_PRICE",MDEntryType_TRADING_SESSION_VWAP_PRICE_get, MDEntryType_TRADING_SESSION_VWAP_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_IMBALANCE",MDEntryType_IMBALANCE_get, MDEntryType_IMBALANCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_TRADE_VOLUME",MDEntryType_TRADE_VOLUME_get, MDEntryType_TRADE_VOLUME_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDEntryType_OPEN_INTEREST",MDEntryType_OPEN_INTEREST_get, MDEntryType_OPEN_INTEREST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TickDirection_PLUS_TICK",TickDirection_PLUS_TICK_get, TickDirection_PLUS_TICK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TickDirection_ZERO_PLUS_TICK",TickDirection_ZERO_PLUS_TICK_get, TickDirection_ZERO_PLUS_TICK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TickDirection_MINUS_TICK",TickDirection_MINUS_TICK_get, TickDirection_MINUS_TICK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TickDirection_ZERO_MINUS_TICK",TickDirection_ZERO_MINUS_TICK_get, TickDirection_ZERO_MINUS_TICK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCondition_OPEN_ACTIVE",QuoteCondition_OPEN_ACTIVE_get, QuoteCondition_OPEN_ACTIVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCondition_CLOSED_INACTIVE",QuoteCondition_CLOSED_INACTIVE_get, QuoteCondition_CLOSED_INACTIVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCondition_EXCHANGE_BEST",QuoteCondition_EXCHANGE_BEST_get, QuoteCondition_EXCHANGE_BEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCondition_CONSOLIDATED_BEST",QuoteCondition_CONSOLIDATED_BEST_get, QuoteCondition_CONSOLIDATED_BEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCondition_LOCKED",QuoteCondition_LOCKED_get, QuoteCondition_LOCKED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCondition_CROSSED",QuoteCondition_CROSSED_get, QuoteCondition_CROSSED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCondition_DEPTH",QuoteCondition_DEPTH_get, QuoteCondition_DEPTH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCondition_FAST_TRADING",QuoteCondition_FAST_TRADING_get, QuoteCondition_FAST_TRADING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCondition_NON_FIRM",QuoteCondition_NON_FIRM_get, QuoteCondition_NON_FIRM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_CASH_MARKET",TradeCondition_CASH_MARKET_get, TradeCondition_CASH_MARKET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_AVERAGE_PRICE_TRADE",TradeCondition_AVERAGE_PRICE_TRADE_get, TradeCondition_AVERAGE_PRICE_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_CASH_TRADE",TradeCondition_CASH_TRADE_get, TradeCondition_CASH_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_NEXT_DAY_MARKET",TradeCondition_NEXT_DAY_MARKET_get, TradeCondition_NEXT_DAY_MARKET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_OPENING_REOPENING_TRADE_DETAIL",TradeCondition_OPENING_REOPENING_TRADE_DETAIL_get, TradeCondition_OPENING_REOPENING_TRADE_DETAIL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_INTRADAY_TRADE_DETAIL",TradeCondition_INTRADAY_TRADE_DETAIL_get, TradeCondition_INTRADAY_TRADE_DETAIL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_RULE127",TradeCondition_RULE127_get, TradeCondition_RULE127_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_RULE155",TradeCondition_RULE155_get, TradeCondition_RULE155_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_SOLD_LAST",TradeCondition_SOLD_LAST_get, TradeCondition_SOLD_LAST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_NEXT_DAY_TRADE",TradeCondition_NEXT_DAY_TRADE_get, TradeCondition_NEXT_DAY_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_OPENED",TradeCondition_OPENED_get, TradeCondition_OPENED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_SELLER",TradeCondition_SELLER_get, TradeCondition_SELLER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_SOLD",TradeCondition_SOLD_get, TradeCondition_SOLD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_STOPPED_STOCK",TradeCondition_STOPPED_STOCK_get, TradeCondition_STOPPED_STOCK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_IMBALANCE_MORE_BUYERS",TradeCondition_IMBALANCE_MORE_BUYERS_get, TradeCondition_IMBALANCE_MORE_BUYERS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_IMBALANCE_MORE_SELLERS",TradeCondition_IMBALANCE_MORE_SELLERS_get, TradeCondition_IMBALANCE_MORE_SELLERS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeCondition_OPENING_PRICE",TradeCondition_OPENING_PRICE_get, TradeCondition_OPENING_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDUpdateAction_NEW",MDUpdateAction_NEW_get, MDUpdateAction_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDUpdateAction_CHANGE",MDUpdateAction_CHANGE_get, MDUpdateAction_CHANGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDUpdateAction_DELETE",MDUpdateAction_DELETE_get, MDUpdateAction_DELETE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_UNKNOWN_SYMBOL",MDReqRejReason_UNKNOWN_SYMBOL_get, MDReqRejReason_UNKNOWN_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_DUPLICATE_MDREQID",MDReqRejReason_DUPLICATE_MDREQID_get, MDReqRejReason_DUPLICATE_MDREQID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_INSUFFICIENT_BANDWIDTH",MDReqRejReason_INSUFFICIENT_BANDWIDTH_get, MDReqRejReason_INSUFFICIENT_BANDWIDTH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_INSUFFICIENT_PERMISSIONS",MDReqRejReason_INSUFFICIENT_PERMISSIONS_get, MDReqRejReason_INSUFFICIENT_PERMISSIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE",MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE_get, MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_UNSUPPORTED_MARKETDEPTH",MDReqRejReason_UNSUPPORTED_MARKETDEPTH_get, MDReqRejReason_UNSUPPORTED_MARKETDEPTH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_UNSUPPORTED_MDUPDATETYPE",MDReqRejReason_UNSUPPORTED_MDUPDATETYPE_get, MDReqRejReason_UNSUPPORTED_MDUPDATETYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK",MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK_get, MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_UNSUPPORTED_MDENTRYTYPE",MDReqRejReason_UNSUPPORTED_MDENTRYTYPE_get, MDReqRejReason_UNSUPPORTED_MDENTRYTYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID",MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID_get, MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_UNSUPPORTED_SCOPE",MDReqRejReason_UNSUPPORTED_SCOPE_get, MDReqRejReason_UNSUPPORTED_SCOPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG",MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG_get, MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE",MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE_get, MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DeleteReason_CANCELATION_TRADE_BUST",DeleteReason_CANCELATION_TRADE_BUST_get, DeleteReason_CANCELATION_TRADE_BUST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DeleteReason_ERROR",DeleteReason_ERROR_get, DeleteReason_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenCloseSettlFlag_DAILY_OPEN_CLOSE_SETTLEMENT_ENTRY",OpenCloseSettlFlag_DAILY_OPEN_CLOSE_SETTLEMENT_ENTRY_get, OpenCloseSettlFlag_DAILY_OPEN_CLOSE_SETTLEMENT_ENTRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenCloseSettlFlag_SESSION_OPEN_CLOSE_SETTLEMENT_ENTRY",OpenCloseSettlFlag_SESSION_OPEN_CLOSE_SETTLEMENT_ENTRY_get, OpenCloseSettlFlag_SESSION_OPEN_CLOSE_SETTLEMENT_ENTRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY",OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY_get, OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenCloseSettlFlag_EXPECTED_ENTRY",OpenCloseSettlFlag_EXPECTED_ENTRY_get, OpenCloseSettlFlag_EXPECTED_ENTRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY",OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY_get, OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE",OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE_get, OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FinancialStatus_BANKRUPT",FinancialStatus_BANKRUPT_get, FinancialStatus_BANKRUPT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FinancialStatus_PENDING_DELISTING",FinancialStatus_PENDING_DELISTING_get, FinancialStatus_PENDING_DELISTING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CorporateAction_EX_DIVIDEND",CorporateAction_EX_DIVIDEND_get, CorporateAction_EX_DIVIDEND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CorporateAction_EX_DISTRIBUTION",CorporateAction_EX_DISTRIBUTION_get, CorporateAction_EX_DISTRIBUTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CorporateAction_EX_RIGHTS",CorporateAction_EX_RIGHTS_get, CorporateAction_EX_RIGHTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CorporateAction_NEW",CorporateAction_NEW_get, CorporateAction_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CorporateAction_EX_INTEREST",CorporateAction_EX_INTEREST_get, CorporateAction_EX_INTEREST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_ACCEPTED",QuoteStatus_ACCEPTED_get, QuoteStatus_ACCEPTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_CANCELED_FOR_SYMBOL",QuoteStatus_CANCELED_FOR_SYMBOL_get, QuoteStatus_CANCELED_FOR_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_CANCELED_FOR_SECURITY_TYPE",QuoteStatus_CANCELED_FOR_SECURITY_TYPE_get, QuoteStatus_CANCELED_FOR_SECURITY_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_CANCELED_FOR_UNDERLYING",QuoteStatus_CANCELED_FOR_UNDERLYING_get, QuoteStatus_CANCELED_FOR_UNDERLYING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_CANCELED_ALL",QuoteStatus_CANCELED_ALL_get, QuoteStatus_CANCELED_ALL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_REJECTED",QuoteStatus_REJECTED_get, QuoteStatus_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_REMOVED_FROM_MARKET",QuoteStatus_REMOVED_FROM_MARKET_get, QuoteStatus_REMOVED_FROM_MARKET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_EXPIRED",QuoteStatus_EXPIRED_get, QuoteStatus_EXPIRED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_QUERY",QuoteStatus_QUERY_get, QuoteStatus_QUERY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_QUOTE_NOT_FOUND",QuoteStatus_QUOTE_NOT_FOUND_get, QuoteStatus_QUOTE_NOT_FOUND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_PENDING",QuoteStatus_PENDING_get, QuoteStatus_PENDING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_PASS",QuoteStatus_PASS_get, QuoteStatus_PASS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_LOCKED_MARKET_WARNING",QuoteStatus_LOCKED_MARKET_WARNING_get, QuoteStatus_LOCKED_MARKET_WARNING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_CROSS_MARKET_WARNING",QuoteStatus_CROSS_MARKET_WARNING_get, QuoteStatus_CROSS_MARKET_WARNING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET",QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET_get, QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET",QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET_get, QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCancelType_CANCEL_FOR_SYMBOL",QuoteCancelType_CANCEL_FOR_SYMBOL_get, QuoteCancelType_CANCEL_FOR_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCancelType_CANCEL_FOR_SECURITY_TYPE",QuoteCancelType_CANCEL_FOR_SECURITY_TYPE_get, QuoteCancelType_CANCEL_FOR_SECURITY_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL",QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL_get, QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteCancelType_CANCEL_ALL_QUOTES",QuoteCancelType_CANCEL_ALL_QUOTES_get, QuoteCancelType_CANCEL_ALL_QUOTES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRejectReason_UNKNOWN_SYMBOL",QuoteRejectReason_UNKNOWN_SYMBOL_get, QuoteRejectReason_UNKNOWN_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRejectReason_EXCHANGE_CLOSED",QuoteRejectReason_EXCHANGE_CLOSED_get, QuoteRejectReason_EXCHANGE_CLOSED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT",QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT_get, QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRejectReason_TOO_LATE_TO_ENTER",QuoteRejectReason_TOO_LATE_TO_ENTER_get, QuoteRejectReason_TOO_LATE_TO_ENTER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRejectReason_UNKNOWN_QUOTE",QuoteRejectReason_UNKNOWN_QUOTE_get, QuoteRejectReason_UNKNOWN_QUOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRejectReason_DUPLICATE_QUOTE",QuoteRejectReason_DUPLICATE_QUOTE_get, QuoteRejectReason_DUPLICATE_QUOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRejectReason_INVALID_BID_ASK_SPREAD",QuoteRejectReason_INVALID_BID_ASK_SPREAD_get, QuoteRejectReason_INVALID_BID_ASK_SPREAD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRejectReason_INVALID_PRICE",QuoteRejectReason_INVALID_PRICE_get, QuoteRejectReason_INVALID_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY",QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY_get, QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteResponseLevel_NO_ACKNOWLEDGEMENT",QuoteResponseLevel_NO_ACKNOWLEDGEMENT_get, QuoteResponseLevel_NO_ACKNOWLEDGEMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES",QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES_get, QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES",QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES_get, QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRequestType_MANUAL",QuoteRequestType_MANUAL_get, QuoteRequestType_MANUAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRequestType_AUTOMATIC",QuoteRequestType_AUTOMATIC_get, QuoteRequestType_AUTOMATIC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS",SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS_get, SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED",SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED_get, SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityRequestType_REQUEST_LIST_SECURITY_TYPES",SecurityRequestType_REQUEST_LIST_SECURITY_TYPES_get, SecurityRequestType_REQUEST_LIST_SECURITY_TYPES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityRequestType_REQUEST_LIST_SECURITIES",SecurityRequestType_REQUEST_LIST_SECURITIES_get, SecurityRequestType_REQUEST_LIST_SECURITIES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS",SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS_get, SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE",SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE_get, SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST",SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST_get, SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST",SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST_get, SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityResponseType_REJECT_SECURITY_PROPOSAL",SecurityResponseType_REJECT_SECURITY_PROPOSAL_get, SecurityResponseType_REJECT_SECURITY_PROPOSAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA",SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA_get, SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_OPENING_DELAY",SecurityTradingStatus_OPENING_DELAY_get, SecurityTradingStatus_OPENING_DELAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_TRADING_HALT",SecurityTradingStatus_TRADING_HALT_get, SecurityTradingStatus_TRADING_HALT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_RESUME",SecurityTradingStatus_RESUME_get, SecurityTradingStatus_RESUME_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_NO_OPEN_NO_RESUME",SecurityTradingStatus_NO_OPEN_NO_RESUME_get, SecurityTradingStatus_NO_OPEN_NO_RESUME_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_PRICE_INDICATION",SecurityTradingStatus_PRICE_INDICATION_get, SecurityTradingStatus_PRICE_INDICATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_TRADING_RANGE_INDICATION",SecurityTradingStatus_TRADING_RANGE_INDICATION_get, SecurityTradingStatus_TRADING_RANGE_INDICATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_MARKET_IMBALANCE_BUY",SecurityTradingStatus_MARKET_IMBALANCE_BUY_get, SecurityTradingStatus_MARKET_IMBALANCE_BUY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_MARKET_IMBALANCE_SELL",SecurityTradingStatus_MARKET_IMBALANCE_SELL_get, SecurityTradingStatus_MARKET_IMBALANCE_SELL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY",SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY_get, SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL",SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL_get, SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_NOT_ASSIGNED",SecurityTradingStatus_NOT_ASSIGNED_get, SecurityTradingStatus_NOT_ASSIGNED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_NO_MARKET_IMBALANCE",SecurityTradingStatus_NO_MARKET_IMBALANCE_get, SecurityTradingStatus_NO_MARKET_IMBALANCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE",SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE_get, SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_ITS_PRE_OPENING",SecurityTradingStatus_ITS_PRE_OPENING_get, SecurityTradingStatus_ITS_PRE_OPENING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_NEW_PRICE_INDICATION",SecurityTradingStatus_NEW_PRICE_INDICATION_get, SecurityTradingStatus_NEW_PRICE_INDICATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_TRADE_DISSEMINATION_TIME",SecurityTradingStatus_TRADE_DISSEMINATION_TIME_get, SecurityTradingStatus_TRADE_DISSEMINATION_TIME_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_READY_TO_TRADE_START_OF_SESSION",SecurityTradingStatus_READY_TO_TRADE_START_OF_SESSION_get, SecurityTradingStatus_READY_TO_TRADE_START_OF_SESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION",SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION_get, SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET",SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET_get, SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_UNKNOWN_OR_INVALID",SecurityTradingStatus_UNKNOWN_OR_INVALID_get, SecurityTradingStatus_UNKNOWN_OR_INVALID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_PRE_OPEN",SecurityTradingStatus_PRE_OPEN_get, SecurityTradingStatus_PRE_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_OPENING_ROTATION",SecurityTradingStatus_OPENING_ROTATION_get, SecurityTradingStatus_OPENING_ROTATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityTradingStatus_FAST_MARKET",SecurityTradingStatus_FAST_MARKET_get, SecurityTradingStatus_FAST_MARKET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HaltReason_ORDER_IMBALANCE",HaltReason_ORDER_IMBALANCE_get, HaltReason_ORDER_IMBALANCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HaltReason_EQUIPMENT_CHANGEOVER",HaltReason_EQUIPMENT_CHANGEOVER_get, HaltReason_EQUIPMENT_CHANGEOVER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HaltReason_NEWS_PENDING",HaltReason_NEWS_PENDING_get, HaltReason_NEWS_PENDING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HaltReason_NEWS_DISSEMINATION",HaltReason_NEWS_DISSEMINATION_get, HaltReason_NEWS_DISSEMINATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HaltReason_ORDER_INFLUX",HaltReason_ORDER_INFLUX_get, HaltReason_ORDER_INFLUX_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HaltReason_ADDITIONAL_INFORMATION",HaltReason_ADDITIONAL_INFORMATION_get, HaltReason_ADDITIONAL_INFORMATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Adjustment_CANCEL",Adjustment_CANCEL_get, Adjustment_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Adjustment_ERROR",Adjustment_ERROR_get, Adjustment_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Adjustment_CORRECTION",Adjustment_CORRECTION_get, Adjustment_CORRECTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesMethod_ELECTRONIC",TradSesMethod_ELECTRONIC_get, TradSesMethod_ELECTRONIC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesMethod_OPEN_OUTCRY",TradSesMethod_OPEN_OUTCRY_get, TradSesMethod_OPEN_OUTCRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesMethod_TWO_PARTY",TradSesMethod_TWO_PARTY_get, TradSesMethod_TWO_PARTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesMode_TESTING",TradSesMode_TESTING_get, TradSesMode_TESTING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesMode_SIMULATED",TradSesMode_SIMULATED_get, TradSesMode_SIMULATED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesMode_PRODUCTION",TradSesMode_PRODUCTION_get, TradSesMode_PRODUCTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesStatus_UNKNOWN",TradSesStatus_UNKNOWN_get, TradSesStatus_UNKNOWN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesStatus_HALTED",TradSesStatus_HALTED_get, TradSesStatus_HALTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesStatus_OPEN",TradSesStatus_OPEN_get, TradSesStatus_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesStatus_CLOSED",TradSesStatus_CLOSED_get, TradSesStatus_CLOSED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesStatus_PRE_OPEN",TradSesStatus_PRE_OPEN_get, TradSesStatus_PRE_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesStatus_PRE_CLOSE",TradSesStatus_PRE_CLOSE_get, TradSesStatus_PRE_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesStatus_REQUEST_REJECTED",TradSesStatus_REQUEST_REJECTED_get, TradSesStatus_REQUEST_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MessageEncoding_ISO_2022_JP",MessageEncoding_ISO_2022_JP_get, MessageEncoding_ISO_2022_JP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MessageEncoding_EUC_JP",MessageEncoding_EUC_JP_get, MessageEncoding_EUC_JP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MessageEncoding_SHIFT_JIS",MessageEncoding_SHIFT_JIS_get, MessageEncoding_SHIFT_JIS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MessageEncoding_UTF_8",MessageEncoding_UTF_8_get, MessageEncoding_UTF_8_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteEntryRejectReason_UNKNOWN_SYMBOL",QuoteEntryRejectReason_UNKNOWN_SYMBOL_get, QuoteEntryRejectReason_UNKNOWN_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteEntryRejectReason_EXCHANGE_CLOSED",QuoteEntryRejectReason_EXCHANGE_CLOSED_get, QuoteEntryRejectReason_EXCHANGE_CLOSED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT",QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT_get, QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteEntryRejectReason_TOO_LATE_TO_ENTER",QuoteEntryRejectReason_TOO_LATE_TO_ENTER_get, QuoteEntryRejectReason_TOO_LATE_TO_ENTER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteEntryRejectReason_UNKNOWN_QUOTE",QuoteEntryRejectReason_UNKNOWN_QUOTE_get, QuoteEntryRejectReason_UNKNOWN_QUOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteEntryRejectReason_DUPLICATE_QUOTE",QuoteEntryRejectReason_DUPLICATE_QUOTE_get, QuoteEntryRejectReason_DUPLICATE_QUOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD",QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD_get, QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteEntryRejectReason_INVALID_PRICE",QuoteEntryRejectReason_INVALID_PRICE_get, QuoteEntryRejectReason_INVALID_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY",QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY_get, QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_INVALID_TAG_NUMBER",SessionRejectReason_INVALID_TAG_NUMBER_get, SessionRejectReason_INVALID_TAG_NUMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_REQUIRED_TAG_MISSING",SessionRejectReason_REQUIRED_TAG_MISSING_get, SessionRejectReason_REQUIRED_TAG_MISSING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE",SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_get, SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_UNDEFINED_TAG",SessionRejectReason_UNDEFINED_TAG_get, SessionRejectReason_UNDEFINED_TAG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE",SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_get, SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_VALUE_IS_INCORRECT",SessionRejectReason_VALUE_IS_INCORRECT_get, SessionRejectReason_VALUE_IS_INCORRECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE",SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_get, SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_DECRYPTION_PROBLEM",SessionRejectReason_DECRYPTION_PROBLEM_get, SessionRejectReason_DECRYPTION_PROBLEM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_SIGNATURE_PROBLEM",SessionRejectReason_SIGNATURE_PROBLEM_get, SessionRejectReason_SIGNATURE_PROBLEM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_COMPID_PROBLEM",SessionRejectReason_COMPID_PROBLEM_get, SessionRejectReason_COMPID_PROBLEM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM",SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_get, SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_INVALID_MSGTYPE",SessionRejectReason_INVALID_MSGTYPE_get, SessionRejectReason_INVALID_MSGTYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_XML_VALIDATION_ERROR",SessionRejectReason_XML_VALIDATION_ERROR_get, SessionRejectReason_XML_VALIDATION_ERROR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE",SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_get, SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER",SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_get, SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER",SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER_get, SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP",SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_get, SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER",SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER_get, SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_OTHER",SessionRejectReason_OTHER_get, SessionRejectReason_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidRequestTransType_NEW",BidRequestTransType_NEW_get, BidRequestTransType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidRequestTransType_CANCEL",BidRequestTransType_CANCEL_get, BidRequestTransType_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecRestatementReason_GT_CORPORATE_ACTION",ExecRestatementReason_GT_CORPORATE_ACTION_get, ExecRestatementReason_GT_CORPORATE_ACTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecRestatementReason_GT_RENEWAL_RESTATEMENT",ExecRestatementReason_GT_RENEWAL_RESTATEMENT_get, ExecRestatementReason_GT_RENEWAL_RESTATEMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecRestatementReason_VERBAL_CHANGE",ExecRestatementReason_VERBAL_CHANGE_get, ExecRestatementReason_VERBAL_CHANGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecRestatementReason_REPRICING_OF_ORDER",ExecRestatementReason_REPRICING_OF_ORDER_get, ExecRestatementReason_REPRICING_OF_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecRestatementReason_BROKER_OPTION",ExecRestatementReason_BROKER_OPTION_get, ExecRestatementReason_BROKER_OPTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY",ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY_get, ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecRestatementReason_CANCEL_ON_TRADING_HALT",ExecRestatementReason_CANCEL_ON_TRADING_HALT_get, ExecRestatementReason_CANCEL_ON_TRADING_HALT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE",ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE_get, ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecRestatementReason_MARKET_OPTION",ExecRestatementReason_MARKET_OPTION_get, ExecRestatementReason_MARKET_OPTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecRestatementReason_CANCELED_NOT_BEST",ExecRestatementReason_CANCELED_NOT_BEST_get, ExecRestatementReason_CANCELED_NOT_BEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_OTHER",BusinessRejectReason_OTHER_get, BusinessRejectReason_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_UNKOWN_ID",BusinessRejectReason_UNKOWN_ID_get, BusinessRejectReason_UNKOWN_ID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_UNKNOWN_SECURITY",BusinessRejectReason_UNKNOWN_SECURITY_get, BusinessRejectReason_UNKNOWN_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE",BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_get, BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_APPLICATION_NOT_AVAILABLE",BusinessRejectReason_APPLICATION_NOT_AVAILABLE_get, BusinessRejectReason_APPLICATION_NOT_AVAILABLE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING",BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_get, BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_NOT_AUTHORIZED",BusinessRejectReason_NOT_AUTHORIZED_get, BusinessRejectReason_NOT_AUTHORIZED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME",BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_get, BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgDirection_SEND",MsgDirection_SEND_get, MsgDirection_SEND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MsgDirection_RECEIVE",MsgDirection_RECEIVE_get, MsgDirection_RECEIVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionInst_RELATED_TO_DISPLAYED_PRICE",DiscretionInst_RELATED_TO_DISPLAYED_PRICE_get, DiscretionInst_RELATED_TO_DISPLAYED_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionInst_RELATED_TO_MARKET_PRICE",DiscretionInst_RELATED_TO_MARKET_PRICE_get, DiscretionInst_RELATED_TO_MARKET_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionInst_RELATED_TO_PRIMARY_PRICE",DiscretionInst_RELATED_TO_PRIMARY_PRICE_get, DiscretionInst_RELATED_TO_PRIMARY_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE",DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE_get, DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionInst_RELATED_TO_MIDPOINT_PRICE",DiscretionInst_RELATED_TO_MIDPOINT_PRICE_get, DiscretionInst_RELATED_TO_MIDPOINT_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionInst_RELATED_TO_LAST_TRADE_PRICE",DiscretionInst_RELATED_TO_LAST_TRADE_PRICE_get, DiscretionInst_RELATED_TO_LAST_TRADE_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionInst_RELATED_TO_VWAP",DiscretionInst_RELATED_TO_VWAP_get, DiscretionInst_RELATED_TO_VWAP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidType_NON_DISCLOSED",BidType_NON_DISCLOSED_get, BidType_NON_DISCLOSED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidType_DISCLOSED_STYLE",BidType_DISCLOSED_STYLE_get, BidType_DISCLOSED_STYLE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidType_NO_BIDDING_PROCESS",BidType_NO_BIDDING_PROCESS_get, BidType_NO_BIDDING_PROCESS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidDescriptorType_SECTOR",BidDescriptorType_SECTOR_get, BidDescriptorType_SECTOR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidDescriptorType_COUNTRY",BidDescriptorType_COUNTRY_get, BidDescriptorType_COUNTRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidDescriptorType_INDEX",BidDescriptorType_INDEX_get, BidDescriptorType_INDEX_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SideValueInd_SIDEVALUE1",SideValueInd_SIDEVALUE1_get, SideValueInd_SIDEVALUE1_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SideValueInd_SIDEVALUE2",SideValueInd_SIDEVALUE2_get, SideValueInd_SIDEVALUE2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LiquidityIndType_FIVEDAY_MOVING_AVERAGE",LiquidityIndType_FIVEDAY_MOVING_AVERAGE_get, LiquidityIndType_FIVEDAY_MOVING_AVERAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LiquidityIndType_TWENTYDAY_MOVING_AVERAGE",LiquidityIndType_TWENTYDAY_MOVING_AVERAGE_get, LiquidityIndType_TWENTYDAY_MOVING_AVERAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LiquidityIndType_NORMAL_MARKET_SIZE",LiquidityIndType_NORMAL_MARKET_SIZE_get, LiquidityIndType_NORMAL_MARKET_SIZE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LiquidityIndType_OTHER",LiquidityIndType_OTHER_get, LiquidityIndType_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST",ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST_get, ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS",ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_get, ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ProgRptReqs_REAL_TIME_EXECUTION_REPORTS",ProgRptReqs_REAL_TIME_EXECUTION_REPORTS_get, ProgRptReqs_REAL_TIME_EXECUTION_REPORTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IncTaxInd_NET",IncTaxInd_NET_get, IncTaxInd_NET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IncTaxInd_GROSS",IncTaxInd_GROSS_get, IncTaxInd_GROSS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidTradeType_RISK_TRADE",BidTradeType_RISK_TRADE_get, BidTradeType_RISK_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidTradeType_VWAP_GUARANTEE",BidTradeType_VWAP_GUARANTEE_get, BidTradeType_VWAP_GUARANTEE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidTradeType_AGENCY",BidTradeType_AGENCY_get, BidTradeType_AGENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BidTradeType_GUARANTEED_CLOSE",BidTradeType_GUARANTEED_CLOSE_get, BidTradeType_GUARANTEED_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION",BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION_get, BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_CLOSING_PRICE",BasisPxType_CLOSING_PRICE_get, BasisPxType_CLOSING_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_CURRENT_PRICE",BasisPxType_CURRENT_PRICE_get, BasisPxType_CURRENT_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_SQ",BasisPxType_SQ_get, BasisPxType_SQ_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_VWAP_THROUGH_A_DAY",BasisPxType_VWAP_THROUGH_A_DAY_get, BasisPxType_VWAP_THROUGH_A_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_VWAP_THROUGH_A_MORNING_SESSION",BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_get, BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION",BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_get, BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI",BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI_get, BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI",BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI_get, BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI",BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI_get, BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_STRIKE",BasisPxType_STRIKE_get, BasisPxType_STRIKE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_OPEN",BasisPxType_OPEN_get, BasisPxType_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BasisPxType_OTHERS",BasisPxType_OTHERS_get, BasisPxType_OTHERS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PriceType_PERCENTAGE",PriceType_PERCENTAGE_get, PriceType_PERCENTAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PriceType_PER_UNIT",PriceType_PER_UNIT_get, PriceType_PER_UNIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PriceType_FIXED_AMOUNT",PriceType_FIXED_AMOUNT_get, PriceType_FIXED_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PriceType_DISCOUNT",PriceType_DISCOUNT_get, PriceType_DISCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PriceType_PREMIUM",PriceType_PREMIUM_get, PriceType_PREMIUM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PriceType_SPREAD",PriceType_SPREAD_get, PriceType_SPREAD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PriceType_TED_PRICE",PriceType_TED_PRICE_get, PriceType_TED_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PriceType_TED_YIELD",PriceType_TED_YIELD_get, PriceType_TED_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PriceType_YIELD",PriceType_YIELD_get, PriceType_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION",GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION_get, GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES",GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES_get, GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE",GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE_get, GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListStatusType_ACK",ListStatusType_ACK_get, ListStatusType_ACK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListStatusType_RESPONSE",ListStatusType_RESPONSE_get, ListStatusType_RESPONSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListStatusType_TIMED",ListStatusType_TIMED_get, ListStatusType_TIMED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListStatusType_EXECSTARTED",ListStatusType_EXECSTARTED_get, ListStatusType_EXECSTARTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListStatusType_ALLDONE",ListStatusType_ALLDONE_get, ListStatusType_ALLDONE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListStatusType_ALERT",ListStatusType_ALERT_get, ListStatusType_ALERT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NetGrossInd_NET",NetGrossInd_NET_get, NetGrossInd_NET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NetGrossInd_GROSS",NetGrossInd_GROSS_get, NetGrossInd_GROSS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListOrderStatus_INBIDDINGPROCESS",ListOrderStatus_INBIDDINGPROCESS_get, ListOrderStatus_INBIDDINGPROCESS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListOrderStatus_RECEIVEDFOREXECUTION",ListOrderStatus_RECEIVEDFOREXECUTION_get, ListOrderStatus_RECEIVEDFOREXECUTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListOrderStatus_EXECUTING",ListOrderStatus_EXECUTING_get, ListOrderStatus_EXECUTING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListOrderStatus_CANCELING",ListOrderStatus_CANCELING_get, ListOrderStatus_CANCELING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListOrderStatus_ALERT",ListOrderStatus_ALERT_get, ListOrderStatus_ALERT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListOrderStatus_ALL_DONE",ListOrderStatus_ALL_DONE_get, ListOrderStatus_ALL_DONE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListOrderStatus_REJECT",ListOrderStatus_REJECT_get, ListOrderStatus_REJECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListExecInstType_IMMEDIATE",ListExecInstType_IMMEDIATE_get, ListExecInstType_IMMEDIATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION",ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION_get, ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN",ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN_get, ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP",ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP_get, ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW",ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW_get, ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlRejResponseTo_ORDER_CANCEL_REQUEST",CxlRejResponseTo_ORDER_CANCEL_REQUEST_get, CxlRejResponseTo_ORDER_CANCEL_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST",CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST_get, CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MultiLegReportingType_SINGLE_SECURITY",MultiLegReportingType_SINGLE_SECURITY_get, MultiLegReportingType_SINGLE_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY",MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY_get, MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MultiLegReportingType_MULTI_LEG_SECURITY",MultiLegReportingType_MULTI_LEG_SECURITY_get, MultiLegReportingType_MULTI_LEG_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_BIC",PartyIDSource_BIC_get, PartyIDSource_BIC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER",PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER_get, PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_PROPRIETARY_CUSTOM_CODE",PartyIDSource_PROPRIETARY_CUSTOM_CODE_get, PartyIDSource_PROPRIETARY_CUSTOM_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_ISO_COUNTRY_CODE",PartyIDSource_ISO_COUNTRY_CODE_get, PartyIDSource_ISO_COUNTRY_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_SETTLEMENT_ENTITY_LOCATION",PartyIDSource_SETTLEMENT_ENTITY_LOCATION_get, PartyIDSource_SETTLEMENT_ENTITY_LOCATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_MIC",PartyIDSource_MIC_get, PartyIDSource_MIC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE",PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE_get, PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_KOREAN_INVESTOR_ID",PartyIDSource_KOREAN_INVESTOR_ID_get, PartyIDSource_KOREAN_INVESTOR_ID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID",PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID_get, PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_TAIWANESE_TRADING_ACCOUNT",PartyIDSource_TAIWANESE_TRADING_ACCOUNT_get, PartyIDSource_TAIWANESE_TRADING_ACCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY_NUMBER",PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY_NUMBER_get, PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY_NUMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_CHINESE_B_SHARE",PartyIDSource_CHINESE_B_SHARE_get, PartyIDSource_CHINESE_B_SHARE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER",PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER_get, PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_US_SOCIAL_SECURITY_NUMBER",PartyIDSource_US_SOCIAL_SECURITY_NUMBER_get, PartyIDSource_US_SOCIAL_SECURITY_NUMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER",PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER_get, PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER",PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER_get, PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER",PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER_get, PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyIDSource_DIRECTED_BROKER",PartyIDSource_DIRECTED_BROKER_get, PartyIDSource_DIRECTED_BROKER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyRole_EXECUTING_FIRM",PartyRole_EXECUTING_FIRM_get, PartyRole_EXECUTING_FIRM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyRole_BROKER_OF_CREDIT",PartyRole_BROKER_OF_CREDIT_get, PartyRole_BROKER_OF_CREDIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyRole_CLIENT_ID",PartyRole_CLIENT_ID_get, PartyRole_CLIENT_ID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyRole_CLEARING_FIRM",PartyRole_CLEARING_FIRM_get, PartyRole_CLEARING_FIRM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyRole_INVESTOR_ID",PartyRole_INVESTOR_ID_get, PartyRole_INVESTOR_ID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyRole_INTRODUCING_FIRM",PartyRole_INTRODUCING_FIRM_get, PartyRole_INTRODUCING_FIRM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyRole_ENTERING_FIRM",PartyRole_ENTERING_FIRM_get, PartyRole_ENTERING_FIRM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyRole_LOCATE_LENDING_FIRM",PartyRole_LOCATE_LENDING_FIRM_get, PartyRole_LOCATE_LENDING_FIRM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PartyRole_FUND_MANAGER_CLIENT_ID",PartyRole_FUND_MANAGER_CLIENT_ID_get, PartyRole_FUND_MANAGER_CLIENT_ID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_AGENCY",Product_AGENCY_get, Product_AGENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_COMMODITY",Product_COMMODITY_get, Product_COMMODITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_CORPORATE",Product_CORPORATE_get, Product_CORPORATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_CURRENCY",Product_CURRENCY_get, Product_CURRENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_EQUITY",Product_EQUITY_get, Product_EQUITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_GOVERNMENT",Product_GOVERNMENT_get, Product_GOVERNMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_INDEX",Product_INDEX_get, Product_INDEX_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_LOAN",Product_LOAN_get, Product_LOAN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_MONEYMARKET",Product_MONEYMARKET_get, Product_MONEYMARKET_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_MORTGAGE",Product_MORTGAGE_get, Product_MORTGAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_MUNICIPAL",Product_MUNICIPAL_get, Product_MUNICIPAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_OTHER",Product_OTHER_get, Product_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Product_FINANCING",Product_FINANCING_get, Product_FINANCING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuantityType_SHARES",QuantityType_SHARES_get, QuantityType_SHARES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuantityType_BONDS",QuantityType_BONDS_get, QuantityType_BONDS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuantityType_CURRENTFACE",QuantityType_CURRENTFACE_get, QuantityType_CURRENTFACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuantityType_ORIGINALFACE",QuantityType_ORIGINALFACE_get, QuantityType_ORIGINALFACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuantityType_CURRENCY",QuantityType_CURRENCY_get, QuantityType_CURRENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuantityType_CONTRACTS",QuantityType_CONTRACTS_get, QuantityType_CONTRACTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuantityType_OTHER",QuantityType_OTHER_get, QuantityType_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuantityType_PAR",QuantityType_PAR_get, QuantityType_PAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RoundingDirection_ROUND_TO_NEAREST",RoundingDirection_ROUND_TO_NEAREST_get, RoundingDirection_ROUND_TO_NEAREST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RoundingDirection_ROUND_DOWN",RoundingDirection_ROUND_DOWN_get, RoundingDirection_ROUND_DOWN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RoundingDirection_ROUND_UP",RoundingDirection_ROUND_UP_get, RoundingDirection_ROUND_UP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DistribPaymentMethod_CREST",DistribPaymentMethod_CREST_get, DistribPaymentMethod_CREST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DistribPaymentMethod_NSCC",DistribPaymentMethod_NSCC_get, DistribPaymentMethod_NSCC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DistribPaymentMethod_EUROCLEAR",DistribPaymentMethod_EUROCLEAR_get, DistribPaymentMethod_EUROCLEAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DistribPaymentMethod_CLEARSTREAM",DistribPaymentMethod_CLEARSTREAM_get, DistribPaymentMethod_CLEARSTREAM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DistribPaymentMethod_CHEQUE",DistribPaymentMethod_CHEQUE_get, DistribPaymentMethod_CHEQUE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DistribPaymentMethod_TELEGRAPHIC_TRANSFER",DistribPaymentMethod_TELEGRAPHIC_TRANSFER_get, DistribPaymentMethod_TELEGRAPHIC_TRANSFER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DistribPaymentMethod_FEDWIRE",DistribPaymentMethod_FEDWIRE_get, DistribPaymentMethod_FEDWIRE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DistribPaymentMethod_DIRECT_CREDIT",DistribPaymentMethod_DIRECT_CREDIT_get, DistribPaymentMethod_DIRECT_CREDIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DistribPaymentMethod_ACH_CREDIT",DistribPaymentMethod_ACH_CREDIT_get, DistribPaymentMethod_ACH_CREDIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CancellationRights_NO_EXECUTION_ONLY",CancellationRights_NO_EXECUTION_ONLY_get, CancellationRights_NO_EXECUTION_ONLY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CancellationRights_NO_WAIVER_AGREEMENT",CancellationRights_NO_WAIVER_AGREEMENT_get, CancellationRights_NO_WAIVER_AGREEMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CancellationRights_NO_INSTITUTIONAL",CancellationRights_NO_INSTITUTIONAL_get, CancellationRights_NO_INSTITUTIONAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MoneyLaunderingStatus_PASSED",MoneyLaunderingStatus_PASSED_get, MoneyLaunderingStatus_PASSED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MoneyLaunderingStatus_NOT_CHECKED",MoneyLaunderingStatus_NOT_CHECKED_get, MoneyLaunderingStatus_NOT_CHECKED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT",MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT_get, MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION",MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION_get, MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION",MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION_get, MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecPriceType_BID_PRICE",ExecPriceType_BID_PRICE_get, ExecPriceType_BID_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecPriceType_CREATION_PRICE",ExecPriceType_CREATION_PRICE_get, ExecPriceType_CREATION_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT",ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT_get, ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT",ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT_get, ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecPriceType_OFFER_PRICE",ExecPriceType_OFFER_PRICE_get, ExecPriceType_OFFER_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT",ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT_get, ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT",ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT_get, ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecPriceType_SINGLE_PRICE",ExecPriceType_SINGLE_PRICE_get, ExecPriceType_SINGLE_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportTransType_NEW",TradeReportTransType_NEW_get, TradeReportTransType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportTransType_CANCEL",TradeReportTransType_CANCEL_get, TradeReportTransType_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportTransType_REPLACE",TradeReportTransType_REPLACE_get, TradeReportTransType_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportTransType_RELEASE",TradeReportTransType_RELEASE_get, TradeReportTransType_RELEASE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportTransType_REVERSE",TradeReportTransType_REVERSE_get, TradeReportTransType_REVERSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PaymentMethod_CREST",PaymentMethod_CREST_get, PaymentMethod_CREST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PaymentMethod_NSCC",PaymentMethod_NSCC_get, PaymentMethod_NSCC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PaymentMethod_EUROCLEAR",PaymentMethod_EUROCLEAR_get, PaymentMethod_EUROCLEAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PaymentMethod_CLEARSTREAM",PaymentMethod_CLEARSTREAM_get, PaymentMethod_CLEARSTREAM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PaymentMethod_CHEQUE",PaymentMethod_CHEQUE_get, PaymentMethod_CHEQUE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PaymentMethod_TELEGRAPHIC_TRANSFER",PaymentMethod_TELEGRAPHIC_TRANSFER_get, PaymentMethod_TELEGRAPHIC_TRANSFER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PaymentMethod_FEDWIRE",PaymentMethod_FEDWIRE_get, PaymentMethod_FEDWIRE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PaymentMethod_DEBIT_CARD",PaymentMethod_DEBIT_CARD_get, PaymentMethod_DEBIT_CARD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PaymentMethod_DIRECT_DEBIT",PaymentMethod_DIRECT_DEBIT_get, PaymentMethod_DIRECT_DEBIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TaxAdvantageType_NONE",TaxAdvantageType_NONE_get, TaxAdvantageType_NONE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TaxAdvantageType_MAXI_ISA",TaxAdvantageType_MAXI_ISA_get, TaxAdvantageType_MAXI_ISA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TaxAdvantageType_TESSA",TaxAdvantageType_TESSA_get, TaxAdvantageType_TESSA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TaxAdvantageType_MINI_CASH_ISA",TaxAdvantageType_MINI_CASH_ISA_get, TaxAdvantageType_MINI_CASH_ISA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA",TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA_get, TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TaxAdvantageType_MINI_INSURANCE_ISA",TaxAdvantageType_MINI_INSURANCE_ISA_get, TaxAdvantageType_MINI_INSURANCE_ISA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TaxAdvantageType_CURRENT_YEAR_PAYMENT",TaxAdvantageType_CURRENT_YEAR_PAYMENT_get, TaxAdvantageType_CURRENT_YEAR_PAYMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TaxAdvantageType_PRIOR_YEAR_PAYMENT",TaxAdvantageType_PRIOR_YEAR_PAYMENT_get, TaxAdvantageType_PRIOR_YEAR_PAYMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TaxAdvantageType_ASSET_TRANSFER",TaxAdvantageType_ASSET_TRANSFER_get, TaxAdvantageType_ASSET_TRANSFER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TaxAdvantageType_EMPLOYEE_PRIOR_YEAR",TaxAdvantageType_EMPLOYEE_PRIOR_YEAR_get, TaxAdvantageType_EMPLOYEE_PRIOR_YEAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TaxAdvantageType_OTHER",TaxAdvantageType_OTHER_get, TaxAdvantageType_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FundRenewWaiv_YES",FundRenewWaiv_YES_get, FundRenewWaiv_YES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FundRenewWaiv_NO",FundRenewWaiv_NO_get, FundRenewWaiv_NO_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistStatus_ACCEPTED",RegistStatus_ACCEPTED_get, RegistStatus_ACCEPTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistStatus_REJECTED",RegistStatus_REJECTED_get, RegistStatus_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistStatus_HELD",RegistStatus_HELD_get, RegistStatus_HELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistStatus_REMINDER",RegistStatus_REMINDER_get, RegistStatus_REMINDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE",RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE",RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE",RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS",RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO",RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS",RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS",RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST",RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID",RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE",RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH",RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE",RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS",RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE",RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD",RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME",RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE",RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM",RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM_get, RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistRejReasonCode_OTHER",RegistRejReasonCode_OTHER_get, RegistRejReasonCode_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistTransType_NEW",RegistTransType_NEW_get, RegistTransType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistTransType_REPLACE",RegistTransType_REPLACE_get, RegistTransType_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RegistTransType_CANCEL",RegistTransType_CANCEL_get, RegistTransType_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnershipType_JOINT_INVESTORS",OwnershipType_JOINT_INVESTORS_get, OwnershipType_JOINT_INVESTORS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnershipType_TENANTS_IN_COMMON",OwnershipType_TENANTS_IN_COMMON_get, OwnershipType_TENANTS_IN_COMMON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnershipType_JOINT_TRUSTEES",OwnershipType_JOINT_TRUSTEES_get, OwnershipType_JOINT_TRUSTEES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ContAmtType_COMMISSION_AMOUNT",ContAmtType_COMMISSION_AMOUNT_get, ContAmtType_COMMISSION_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ContAmtType_COMMISSION_PERCENT",ContAmtType_COMMISSION_PERCENT_get, ContAmtType_COMMISSION_PERCENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ContAmtType_INITIAL_CHARGE_AMOUNT",ContAmtType_INITIAL_CHARGE_AMOUNT_get, ContAmtType_INITIAL_CHARGE_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ContAmtType_INITIAL_CHARGE_PERCENT",ContAmtType_INITIAL_CHARGE_PERCENT_get, ContAmtType_INITIAL_CHARGE_PERCENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ContAmtType_DISCOUNT_AMOUNT",ContAmtType_DISCOUNT_AMOUNT_get, ContAmtType_DISCOUNT_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ContAmtType_DISCOUNT_PERCENT",ContAmtType_DISCOUNT_PERCENT_get, ContAmtType_DISCOUNT_PERCENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ContAmtType_DILUTION_LEVY_AMOUNT",ContAmtType_DILUTION_LEVY_AMOUNT_get, ContAmtType_DILUTION_LEVY_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ContAmtType_DILUTION_LEVY_PERCENT",ContAmtType_DILUTION_LEVY_PERCENT_get, ContAmtType_DILUTION_LEVY_PERCENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ContAmtType_EXIT_CHARGE_AMOUNT",ContAmtType_EXIT_CHARGE_AMOUNT_get, ContAmtType_EXIT_CHARGE_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnerType_INDIVIDUAL_INVESTOR",OwnerType_INDIVIDUAL_INVESTOR_get, OwnerType_INDIVIDUAL_INVESTOR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnerType_PUBLIC_COMPANY",OwnerType_PUBLIC_COMPANY_get, OwnerType_PUBLIC_COMPANY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnerType_PRIVATE_COMPANY",OwnerType_PRIVATE_COMPANY_get, OwnerType_PRIVATE_COMPANY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnerType_INDIVIDUAL_TRUSTEE",OwnerType_INDIVIDUAL_TRUSTEE_get, OwnerType_INDIVIDUAL_TRUSTEE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnerType_COMPANY_TRUSTEE",OwnerType_COMPANY_TRUSTEE_get, OwnerType_COMPANY_TRUSTEE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnerType_PENSION_PLAN",OwnerType_PENSION_PLAN_get, OwnerType_PENSION_PLAN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT",OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT_get, OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnerType_TRUSTS",OwnerType_TRUSTS_get, OwnerType_TRUSTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OwnerType_FIDUCIARIES",OwnerType_FIDUCIARIES_get, OwnerType_FIDUCIARIES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderCapacity_AGENCY",OrderCapacity_AGENCY_get, OrderCapacity_AGENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderCapacity_PROPRIETARY",OrderCapacity_PROPRIETARY_get, OrderCapacity_PROPRIETARY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderCapacity_INDIVIDUAL",OrderCapacity_INDIVIDUAL_get, OrderCapacity_INDIVIDUAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderCapacity_PRINCIPAL",OrderCapacity_PRINCIPAL_get, OrderCapacity_PRINCIPAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderCapacity_RISKLESS_PRINCIPAL",OrderCapacity_RISKLESS_PRINCIPAL_get, OrderCapacity_RISKLESS_PRINCIPAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderCapacity_AGENT_FOR_OTHER_MEMBER",OrderCapacity_AGENT_FOR_OTHER_MEMBER_get, OrderCapacity_AGENT_FOR_OTHER_MEMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderRestrictions_PROGRAM_TRADE",OrderRestrictions_PROGRAM_TRADE_get, OrderRestrictions_PROGRAM_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderRestrictions_INDEX_ARBITRAGE",OrderRestrictions_INDEX_ARBITRAGE_get, OrderRestrictions_INDEX_ARBITRAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderRestrictions_NON_INDEX_ARBITRAGE",OrderRestrictions_NON_INDEX_ARBITRAGE_get, OrderRestrictions_NON_INDEX_ARBITRAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderRestrictions_COMPETING_MARKET_MAKER",OrderRestrictions_COMPETING_MARKET_MAKER_get, OrderRestrictions_COMPETING_MARKET_MAKER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY",OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY_get, OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY",OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY_get, OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderRestrictions_FOREIGN_ENTITY",OrderRestrictions_FOREIGN_ENTITY_get, OrderRestrictions_FOREIGN_ENTITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT",OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT_get, OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE",OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE_get, OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OrderRestrictions_RISKLESS_ARBITRAGE",OrderRestrictions_RISKLESS_ARBITRAGE_get, OrderRestrictions_RISKLESS_ARBITRAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY",MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_get, MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY",MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY_get, MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT",MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT_get, MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE",MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE_get, MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE",MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE_get, MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION",MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION_get, MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRequestType_CANCEL_ALL_ORDERS",MassCancelRequestType_CANCEL_ALL_ORDERS_get, MassCancelRequestType_CANCEL_ALL_ORDERS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelResponse_CANCEL_REQUEST_REJECTED",MassCancelResponse_CANCEL_REQUEST_REJECTED_get, MassCancelResponse_CANCEL_REQUEST_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY",MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_get, MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY",MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY_get, MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT",MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT_get, MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE",MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE_get, MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE",MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE_get, MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION",MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION_get, MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelResponse_CANCEL_ALL_ORDERS",MassCancelResponse_CANCEL_ALL_ORDERS_get, MassCancelResponse_CANCEL_ALL_ORDERS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED",MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED_get, MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY",MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_get, MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING",MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_get, MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT",MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT_get, MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE",MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE_get, MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE",MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE_get, MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION",MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION_get, MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteType_INDICATIVE",QuoteType_INDICATIVE_get, QuoteType_INDICATIVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteType_TRADEABLE",QuoteType_TRADEABLE_get, QuoteType_TRADEABLE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteType_RESTRICTED_TRADEABLE",QuoteType_RESTRICTED_TRADEABLE_get, QuoteType_RESTRICTED_TRADEABLE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteType_COUNTER",QuoteType_COUNTER_get, QuoteType_COUNTER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CashMargin_CASH",CashMargin_CASH_get, CashMargin_CASH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CashMargin_MARGIN_OPEN",CashMargin_MARGIN_OPEN_get, CashMargin_MARGIN_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CashMargin_MARGIN_CLOSE",CashMargin_MARGIN_CLOSE_get, CashMargin_MARGIN_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Scope_LOCAL",Scope_LOCAL_get, Scope_LOCAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Scope_NATIONAL",Scope_NATIONAL_get, Scope_NATIONAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Scope_GLOBAL",Scope_GLOBAL_get, Scope_GLOBAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT",CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_get, CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED",CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_get, CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE",CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_get, CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE",CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE_get, CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CrossPrioritization_NONE",CrossPrioritization_NONE_get, CrossPrioritization_NONE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CrossPrioritization_BUY_SIDE_IS_PRIORITIZED",CrossPrioritization_BUY_SIDE_IS_PRIORITIZED_get, CrossPrioritization_BUY_SIDE_IS_PRIORITIZED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CrossPrioritization_SELL_SIDE_IS_PRIORITIZED",CrossPrioritization_SELL_SIDE_IS_PRIORITIZED_get, CrossPrioritization_SELL_SIDE_IS_PRIORITIZED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NoSides_ONE_SIDE",NoSides_ONE_SIDE_get, NoSides_ONE_SIDE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NoSides_BOTH_SIDES",NoSides_BOTH_SIDES_get, NoSides_BOTH_SIDES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityListRequestType_SYMBOL",SecurityListRequestType_SYMBOL_get, SecurityListRequestType_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE",SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE_get, SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityListRequestType_PRODUCT",SecurityListRequestType_PRODUCT_get, SecurityListRequestType_PRODUCT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityListRequestType_TRADINGSESSIONID",SecurityListRequestType_TRADINGSESSIONID_get, SecurityListRequestType_TRADINGSESSIONID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityListRequestType_ALL_SECURITIES",SecurityListRequestType_ALL_SECURITIES_get, SecurityListRequestType_ALL_SECURITIES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityRequestResult_VALID_REQUEST",SecurityRequestResult_VALID_REQUEST_get, SecurityRequestResult_VALID_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST",SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST_get, SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA",SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA_get, SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA",SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA_get, SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE",SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE_get, SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED",SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED_get, SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY",MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY_get, MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY",MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_get, MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY",MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY_get, MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID",TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID_get, TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestType_ALL_TRADES",TradeRequestType_ALL_TRADES_get, TradeRequestType_ALL_TRADES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST",TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST_get, TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA",TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA_get, TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA",TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA_get, TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA",TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA_get, TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MatchStatus_COMPARED_MATCHED_OR_AFFIRMED",MatchStatus_COMPARED_MATCHED_OR_AFFIRMED_get, MatchStatus_COMPARED_MATCHED_OR_AFFIRMED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED",MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED_get, MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MatchStatus_ADVISORY_OR_ALERT",MatchStatus_ADVISORY_OR_ALERT_get, MatchStatus_ADVISORY_OR_ALERT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingInstruction_PROCESS_NORMALLY",ClearingInstruction_PROCESS_NORMALLY_get, ClearingInstruction_PROCESS_NORMALLY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingInstruction_EXCLUDE_FROM_ALL_NETTING",ClearingInstruction_EXCLUDE_FROM_ALL_NETTING_get, ClearingInstruction_EXCLUDE_FROM_ALL_NETTING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingInstruction_BILATERAL_NETTING_ONLY",ClearingInstruction_BILATERAL_NETTING_ONLY_get, ClearingInstruction_BILATERAL_NETTING_ONLY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingInstruction_EX_CLEARING",ClearingInstruction_EX_CLEARING_get, ClearingInstruction_EX_CLEARING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingInstruction_SPECIAL_TRADE",ClearingInstruction_SPECIAL_TRADE_get, ClearingInstruction_SPECIAL_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingInstruction_MULTILATERAL_NETTING",ClearingInstruction_MULTILATERAL_NETTING_get, ClearingInstruction_MULTILATERAL_NETTING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY",ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY_get, ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY",ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY_get, ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingInstruction_MANUAL_MODE",ClearingInstruction_MANUAL_MODE_get, ClearingInstruction_MANUAL_MODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingInstruction_AUTOMATIC_POSTING_MODE",ClearingInstruction_AUTOMATIC_POSTING_MODE_get, ClearingInstruction_AUTOMATIC_POSTING_MODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS",AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS_get, AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS",AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_get, AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AccountType_HOUSE_TRADER",AccountType_HOUSE_TRADER_get, AccountType_HOUSE_TRADER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AccountType_FLOOR_TRADER",AccountType_FLOOR_TRADER_get, AccountType_FLOOR_TRADER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED",AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED_get, AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED",AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED_get, AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AccountType_JOINT_BACKOFFICE_ACCOUNT",AccountType_JOINT_BACKOFFICE_ACCOUNT_get, AccountType_JOINT_BACKOFFICE_ACCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT",CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT_get, CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT",CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT_get, CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER",CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER_get, CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CustOrderCapacity_ALL_OTHER",CustOrderCapacity_ALL_OTHER_get, CustOrderCapacity_ALL_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY",MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY_get, MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY",MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY_get, MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT",MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT_get, MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE",MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE_get, MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE",MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE_get, MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION",MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION_get, MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassStatusReqType_STATUS_FOR_ALL_ORDERS",MassStatusReqType_STATUS_FOR_ALL_ORDERS_get, MassStatusReqType_STATUS_FOR_ALL_ORDERS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID",MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID_get, MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR",DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR_get, DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING",DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING_get, DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DayBookingInst_ACCUMULATE",DayBookingInst_ACCUMULATE_get, DayBookingInst_ACCUMULATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT",BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT_get, BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER",BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER_get, BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE",BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE_get, BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PreallocMethod_PRO_RATA",PreallocMethod_PRO_RATA_get, PreallocMethod_PRO_RATA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PreallocMethod_DO_NOT_PRO_RATA",PreallocMethod_DO_NOT_PRO_RATA_get, PreallocMethod_DO_NOT_PRO_RATA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocType_CALCULATED",AllocType_CALCULATED_get, AllocType_CALCULATED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocType_PRELIMINARY",AllocType_PRELIMINARY_get, AllocType_PRELIMINARY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocType_READY_TO_BOOK_SINGLE_ORDER",AllocType_READY_TO_BOOK_SINGLE_ORDER_get, AllocType_READY_TO_BOOK_SINGLE_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocType_WAREHOUSE_INSTRUCTION",AllocType_WAREHOUSE_INSTRUCTION_get, AllocType_WAREHOUSE_INSTRUCTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocType_REQUEST_TO_INTERMEDIARY",AllocType_REQUEST_TO_INTERMEDIARY_get, AllocType_REQUEST_TO_INTERMEDIARY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingFeeIndicator_CBOE_MEMBER",ClearingFeeIndicator_CBOE_MEMBER_get, ClearingFeeIndicator_CBOE_MEMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER",ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER_get, ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER",ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER_get, ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS",ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS_get, ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingFeeIndicator_FIRMS_106H_AND_106J",ClearingFeeIndicator_FIRMS_106H_AND_106J_get, ClearingFeeIndicator_FIRMS_106H_AND_106J_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS",ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS_get, ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES",ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES_get, ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES",ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES_get, ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PriorityIndicator_PRIORITY_UNCHANGED",PriorityIndicator_PRIORITY_UNCHANGED_get, PriorityIndicator_PRIORITY_UNCHANGED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE",PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE_get, PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRequestRejectReason_UNKNOWN_SYMBOL",QuoteRequestRejectReason_UNKNOWN_SYMBOL_get, QuoteRequestRejectReason_UNKNOWN_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRequestRejectReason_EXCHANGE_CLOSED",QuoteRequestRejectReason_EXCHANGE_CLOSED_get, QuoteRequestRejectReason_EXCHANGE_CLOSED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT",QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT_get, QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRequestRejectReason_TOO_LATE_TO_ENTER",QuoteRequestRejectReason_TOO_LATE_TO_ENTER_get, QuoteRequestRejectReason_TOO_LATE_TO_ENTER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRequestRejectReason_INVALID_PRICE",QuoteRequestRejectReason_INVALID_PRICE_get, QuoteRequestRejectReason_INVALID_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE",QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE_get, QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY",QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY_get, QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT",QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT_get, QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRequestRejectReason_NO_INVENTORY",QuoteRequestRejectReason_NO_INVENTORY_get, QuoteRequestRejectReason_NO_INVENTORY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AcctIDSource_BIC",AcctIDSource_BIC_get, AcctIDSource_BIC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AcctIDSource_SID_CODE",AcctIDSource_SID_CODE_get, AcctIDSource_SID_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AcctIDSource_TFM",AcctIDSource_TFM_get, AcctIDSource_TFM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AcctIDSource_OMGEO",AcctIDSource_OMGEO_get, AcctIDSource_OMGEO_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AcctIDSource_DTCC_CODE",AcctIDSource_DTCC_CODE_get, AcctIDSource_DTCC_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmStatus_RECEIVED",ConfirmStatus_RECEIVED_get, ConfirmStatus_RECEIVED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmStatus_MISMATCHED_ACCOUNT",ConfirmStatus_MISMATCHED_ACCOUNT_get, ConfirmStatus_MISMATCHED_ACCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS",ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS_get, ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmStatus_CONFIRMED",ConfirmStatus_CONFIRMED_get, ConfirmStatus_CONFIRMED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmStatus_REQUEST_REJECTED",ConfirmStatus_REQUEST_REJECTED_get, ConfirmStatus_REQUEST_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmTransType_NEW",ConfirmTransType_NEW_get, ConfirmTransType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmTransType_REPLACE",ConfirmTransType_REPLACE_get, ConfirmTransType_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmTransType_CANCEL",ConfirmTransType_CANCEL_get, ConfirmTransType_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DeliveryForm_BOOKENTRY",DeliveryForm_BOOKENTRY_get, DeliveryForm_BOOKENTRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DeliveryForm_BEARER",DeliveryForm_BEARER_get, DeliveryForm_BEARER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LegSwapType_PAR_FOR_PAR",LegSwapType_PAR_FOR_PAR_get, LegSwapType_PAR_FOR_PAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LegSwapType_MODIFIED_DURATION",LegSwapType_MODIFIED_DURATION_get, LegSwapType_MODIFIED_DURATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LegSwapType_RISK",LegSwapType_RISK_get, LegSwapType_RISK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LegSwapType_PROCEEDS",LegSwapType_PROCEEDS_get, LegSwapType_PROCEEDS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuotePriceType_PERCENT",QuotePriceType_PERCENT_get, QuotePriceType_PERCENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuotePriceType_PER_SHARE",QuotePriceType_PER_SHARE_get, QuotePriceType_PER_SHARE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuotePriceType_FIXED_AMOUNT",QuotePriceType_FIXED_AMOUNT_get, QuotePriceType_FIXED_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuotePriceType_DISCOUNT",QuotePriceType_DISCOUNT_get, QuotePriceType_DISCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuotePriceType_PREMIUM",QuotePriceType_PREMIUM_get, QuotePriceType_PREMIUM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK",QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK_get, QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuotePriceType_TED_PRICE",QuotePriceType_TED_PRICE_get, QuotePriceType_TED_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuotePriceType_TED_YIELD",QuotePriceType_TED_YIELD_get, QuotePriceType_TED_YIELD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuotePriceType_YIELD_SPREAD",QuotePriceType_YIELD_SPREAD_get, QuotePriceType_YIELD_SPREAD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRespType_HIT_LIFT",QuoteRespType_HIT_LIFT_get, QuoteRespType_HIT_LIFT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRespType_COUNTER",QuoteRespType_COUNTER_get, QuoteRespType_COUNTER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRespType_EXPIRED",QuoteRespType_EXPIRED_get, QuoteRespType_EXPIRED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRespType_COVER",QuoteRespType_COVER_get, QuoteRespType_COVER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRespType_DONE_AWAY",QuoteRespType_DONE_AWAY_get, QuoteRespType_DONE_AWAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QuoteRespType_PASS",QuoteRespType_PASS_get, QuoteRespType_PASS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_TRANSACTION_QUANTITY",PosType_TRANSACTION_QUANTITY_get, PosType_TRANSACTION_QUANTITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_INTRA_SPREAD_QTY",PosType_INTRA_SPREAD_QTY_get, PosType_INTRA_SPREAD_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_INTER_SPREAD_QTY",PosType_INTER_SPREAD_QTY_get, PosType_INTER_SPREAD_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_END_OF_DAY_QTY",PosType_END_OF_DAY_QTY_get, PosType_END_OF_DAY_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_START_OF_DAY_QTY",PosType_START_OF_DAY_QTY_get, PosType_START_OF_DAY_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_OPTION_EXERCISE_QTY",PosType_OPTION_EXERCISE_QTY_get, PosType_OPTION_EXERCISE_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_OPTION_ASSIGNMENT",PosType_OPTION_ASSIGNMENT_get, PosType_OPTION_ASSIGNMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_TRANSACTION_FROM_EXERCISE",PosType_TRANSACTION_FROM_EXERCISE_get, PosType_TRANSACTION_FROM_EXERCISE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_TRANSACTION_FROM_ASSIGNMENT",PosType_TRANSACTION_FROM_ASSIGNMENT_get, PosType_TRANSACTION_FROM_ASSIGNMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_PIT_TRADE_QTY",PosType_PIT_TRADE_QTY_get, PosType_PIT_TRADE_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_TRANSFER_TRADE_QTY",PosType_TRANSFER_TRADE_QTY_get, PosType_TRANSFER_TRADE_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_ELECTRONIC_TRADE_QTY",PosType_ELECTRONIC_TRADE_QTY_get, PosType_ELECTRONIC_TRADE_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_ALLOCATION_TRADE_QTY",PosType_ALLOCATION_TRADE_QTY_get, PosType_ALLOCATION_TRADE_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_ADJUSTMENT_QTY",PosType_ADJUSTMENT_QTY_get, PosType_ADJUSTMENT_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_AS_OF_TRADE_QTY",PosType_AS_OF_TRADE_QTY_get, PosType_AS_OF_TRADE_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_DELIVERY_QTY",PosType_DELIVERY_QTY_get, PosType_DELIVERY_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_TOTAL_TRANSACTION_QTY",PosType_TOTAL_TRANSACTION_QTY_get, PosType_TOTAL_TRANSACTION_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_CROSS_MARGIN_QTY",PosType_CROSS_MARGIN_QTY_get, PosType_CROSS_MARGIN_QTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosType_INTEGRAL_SPLIT",PosType_INTEGRAL_SPLIT_get, PosType_INTEGRAL_SPLIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosQtyStatus_SUBMITTED",PosQtyStatus_SUBMITTED_get, PosQtyStatus_SUBMITTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosQtyStatus_ACCEPTED",PosQtyStatus_ACCEPTED_get, PosQtyStatus_ACCEPTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosQtyStatus_REJECTED",PosQtyStatus_REJECTED_get, PosQtyStatus_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT",PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT_get, PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT",PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT_get, PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosAmtType_TRADE_VARIATION_AMOUNT",PosAmtType_TRADE_VARIATION_AMOUNT_get, PosAmtType_TRADE_VARIATION_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT",PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT_get, PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosAmtType_PREMIUM_AMOUNT",PosAmtType_PREMIUM_AMOUNT_get, PosAmtType_PREMIUM_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosAmtType_CASH_RESIDUAL_AMOUNT",PosAmtType_CASH_RESIDUAL_AMOUNT_get, PosAmtType_CASH_RESIDUAL_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosAmtType_CASH_AMOUNT",PosAmtType_CASH_AMOUNT_get, PosAmtType_CASH_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosAmtType_VALUE_ADJUSTED_AMOUNT",PosAmtType_VALUE_ADJUSTED_AMOUNT_get, PosAmtType_VALUE_ADJUSTED_AMOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosTransType_EXERCISE",PosTransType_EXERCISE_get, PosTransType_EXERCISE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosTransType_DO_NOT_EXERCISE",PosTransType_DO_NOT_EXERCISE_get, PosTransType_DO_NOT_EXERCISE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosTransType_POSITION_ADJUSTMENT",PosTransType_POSITION_ADJUSTMENT_get, PosTransType_POSITION_ADJUSTMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION",PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION_get, PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosTransType_PLEDGE",PosTransType_PLEDGE_get, PosTransType_PLEDGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosMaintAction_NEW",PosMaintAction_NEW_get, PosMaintAction_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosMaintAction_REPLACE",PosMaintAction_REPLACE_get, PosMaintAction_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosMaintAction_CANCEL",PosMaintAction_CANCEL_get, PosMaintAction_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION",AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION_get, AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AdjustmentType_DELTA_PLUS",AdjustmentType_DELTA_PLUS_get, AdjustmentType_DELTA_PLUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AdjustmentType_DELTA_MINUS",AdjustmentType_DELTA_MINUS_get, AdjustmentType_DELTA_MINUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AdjustmentType_FINAL",AdjustmentType_FINAL_get, AdjustmentType_FINAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosMaintStatus_ACCEPTED",PosMaintStatus_ACCEPTED_get, PosMaintStatus_ACCEPTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosMaintStatus_ACCEPTED_WITH_WARNINGS",PosMaintStatus_ACCEPTED_WITH_WARNINGS_get, PosMaintStatus_ACCEPTED_WITH_WARNINGS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosMaintStatus_REJECTED",PosMaintStatus_REJECTED_get, PosMaintStatus_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosMaintStatus_COMPLETED",PosMaintStatus_COMPLETED_get, PosMaintStatus_COMPLETED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosMaintStatus_COMPLETED_WITH_WARNINGS",PosMaintStatus_COMPLETED_WITH_WARNINGS_get, PosMaintStatus_COMPLETED_WITH_WARNINGS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosMaintResult_SUCCESSFUL_COMPLETION_NO_WARNINGS_OR_ERRORS",PosMaintResult_SUCCESSFUL_COMPLETION_NO_WARNINGS_OR_ERRORS_get, PosMaintResult_SUCCESSFUL_COMPLETION_NO_WARNINGS_OR_ERRORS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosMaintResult_REJECTED",PosMaintResult_REJECTED_get, PosMaintResult_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqType_POSITIONS",PosReqType_POSITIONS_get, PosReqType_POSITIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqType_TRADES",PosReqType_TRADES_get, PosReqType_TRADES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqType_EXERCISES",PosReqType_EXERCISES_get, PosReqType_EXERCISES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqType_ASSIGNMENTS",PosReqType_ASSIGNMENTS_get, PosReqType_ASSIGNMENTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ResponseTransportType_INBAND",ResponseTransportType_INBAND_get, ResponseTransportType_INBAND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ResponseTransportType_OUT_OF_BAND",ResponseTransportType_OUT_OF_BAND_get, ResponseTransportType_OUT_OF_BAND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqResult_VALID_REQUEST",PosReqResult_VALID_REQUEST_get, PosReqResult_VALID_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST",PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST_get, PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA",PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA_get, PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS",PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS_get, PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED",PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED_get, PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqResult_OTHER",PosReqResult_OTHER_get, PosReqResult_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqStatus_COMPLETED",PosReqStatus_COMPLETED_get, PosReqStatus_COMPLETED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqStatus_COMPLETED_WITH_WARNINGS",PosReqStatus_COMPLETED_WITH_WARNINGS_get, PosReqStatus_COMPLETED_WITH_WARNINGS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PosReqStatus_REJECTED",PosReqStatus_REJECTED_get, PosReqStatus_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlPriceType_FINAL",SettlPriceType_FINAL_get, SettlPriceType_FINAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlPriceType_THEORETICAL",SettlPriceType_THEORETICAL_get, SettlPriceType_THEORETICAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AssignmentMethod_RANDOM",AssignmentMethod_RANDOM_get, AssignmentMethod_RANDOM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AssignmentMethod_PRORATA",AssignmentMethod_PRORATA_get, AssignmentMethod_PRORATA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExerciseMethod_AUTOMATIC",ExerciseMethod_AUTOMATIC_get, ExerciseMethod_AUTOMATIC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExerciseMethod_MANUAL",ExerciseMethod_MANUAL_get, ExerciseMethod_MANUAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestResult_SUCCESSFUL",TradeRequestResult_SUCCESSFUL_get, TradeRequestResult_SUCCESSFUL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT",TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT_get, TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED",TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED_get, TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestResult_INVALID_PARTIES",TradeRequestResult_INVALID_PARTIES_get, TradeRequestResult_INVALID_PARTIES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED",TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED_get, TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestResult_INVALID_DESTINATION_REQUESTED",TradeRequestResult_INVALID_DESTINATION_REQUESTED_get, TradeRequestResult_INVALID_DESTINATION_REQUESTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED",TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED_get, TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST",TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST_get, TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestStatus_ACCEPTED",TradeRequestStatus_ACCEPTED_get, TradeRequestStatus_ACCEPTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestStatus_COMPLETED",TradeRequestStatus_COMPLETED_get, TradeRequestStatus_COMPLETED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeRequestStatus_REJECTED",TradeRequestStatus_REJECTED_get, TradeRequestStatus_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportRejectReason_SUCCESSFUL",TradeReportRejectReason_SUCCESSFUL_get, TradeReportRejectReason_SUCCESSFUL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportRejectReason_INVALID_PARTY_INFORMATION",TradeReportRejectReason_INVALID_PARTY_INFORMATION_get, TradeReportRejectReason_INVALID_PARTY_INFORMATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportRejectReason_UNKNOWN_INSTRUMENT",TradeReportRejectReason_UNKNOWN_INSTRUMENT_get, TradeReportRejectReason_UNKNOWN_INSTRUMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES",TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES_get, TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportRejectReason_INVALID_TRADE_TYPE",TradeReportRejectReason_INVALID_TRADE_TYPE_get, TradeReportRejectReason_INVALID_TRADE_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SideMultiLegReportingType_SINGLE_SECURITY",SideMultiLegReportingType_SINGLE_SECURITY_get, SideMultiLegReportingType_SINGLE_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY",SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY_get, SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SideMultiLegReportingType_MULTI_LEG_SECURITY",SideMultiLegReportingType_MULTI_LEG_SECURITY_get, SideMultiLegReportingType_MULTI_LEG_SECURITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdRegTimestampType_EXECUTION_TIME",TrdRegTimestampType_EXECUTION_TIME_get, TrdRegTimestampType_EXECUTION_TIME_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdRegTimestampType_TIME_IN",TrdRegTimestampType_TIME_IN_get, TrdRegTimestampType_TIME_IN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdRegTimestampType_TIME_OUT",TrdRegTimestampType_TIME_OUT_get, TrdRegTimestampType_TIME_OUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdRegTimestampType_BROKER_RECEIPT",TrdRegTimestampType_BROKER_RECEIPT_get, TrdRegTimestampType_BROKER_RECEIPT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdRegTimestampType_BROKER_EXECUTION",TrdRegTimestampType_BROKER_EXECUTION_get, TrdRegTimestampType_BROKER_EXECUTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmType_STATUS",ConfirmType_STATUS_get, ConfirmType_STATUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmType_CONFIRMATION",ConfirmType_CONFIRMATION_get, ConfirmType_CONFIRMATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmType_CONFIRMATION_REQUEST_REJECTED",ConfirmType_CONFIRMATION_REQUEST_REJECTED_get, ConfirmType_CONFIRMATION_REQUEST_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmRejReason_MISMATCHED_ACCOUNT",ConfirmRejReason_MISMATCHED_ACCOUNT_get, ConfirmRejReason_MISMATCHED_ACCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS",ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS_get, ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BookingType_REGULAR_BOOKING",BookingType_REGULAR_BOOKING_get, BookingType_REGULAR_BOOKING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BookingType_CFD",BookingType_CFD_get, BookingType_CFD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BookingType_TOTAL_RETURN_SWAP",BookingType_TOTAL_RETURN_SWAP_get, BookingType_TOTAL_RETURN_SWAP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS",AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS_get, AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED",AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED_get, AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocSettlInstType_FULL_DETAILS_PROVIDED",AllocSettlInstType_FULL_DETAILS_PROVIDED_get, AllocSettlInstType_FULL_DETAILS_PROVIDED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocSettlInstType_SSI_DB_IDS_PROVIDED",AllocSettlInstType_SSI_DB_IDS_PROVIDED_get, AllocSettlInstType_SSI_DB_IDS_PROVIDED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocSettlInstType_PHONE_FOR_INSTRUCTIONS",AllocSettlInstType_PHONE_FOR_INSTRUCTIONS_get, AllocSettlInstType_PHONE_FOR_INSTRUCTIONS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DlvyInstType_SECURITIES",DlvyInstType_SECURITIES_get, DlvyInstType_SECURITIES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DlvyInstType_CASH",DlvyInstType_CASH_get, DlvyInstType_CASH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TerminationType_OVERNIGHT",TerminationType_OVERNIGHT_get, TerminationType_OVERNIGHT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TerminationType_TERM",TerminationType_TERM_get, TerminationType_TERM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TerminationType_FLEXIBLE",TerminationType_FLEXIBLE_get, TerminationType_FLEXIBLE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TerminationType_OPEN",TerminationType_OPEN_get, TerminationType_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST",SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST_get, SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstReqRejCode_UNKNOWN_ACCOUNT",SettlInstReqRejCode_UNKNOWN_ACCOUNT_get, SettlInstReqRejCode_UNKNOWN_ACCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND",SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND_get, SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY",AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY_get, AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY",AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY_get, AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocReportType_WAREHOUSE_RECAP",AllocReportType_WAREHOUSE_RECAP_get, AllocReportType_WAREHOUSE_RECAP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocReportType_REQUEST_TO_INTERMEDIARY",AllocReportType_REQUEST_TO_INTERMEDIARY_get, AllocReportType_REQUEST_TO_INTERMEDIARY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT",AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT_get, AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS",AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS_get, AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS",AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS_get, AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS",AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_get, AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocAccountType_HOUSE_TRADER",AllocAccountType_HOUSE_TRADER_get, AllocAccountType_HOUSE_TRADER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocAccountType_FLOOR_TRADER",AllocAccountType_FLOOR_TRADER_get, AllocAccountType_FLOOR_TRADER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED",AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED_get, AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED",AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED_get, AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocAccountType_JOINT_BACKOFFICE_ACCOUNT",AllocAccountType_JOINT_BACKOFFICE_ACCOUNT_get, AllocAccountType_JOINT_BACKOFFICE_ACCOUNT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocIntermedReqType_PENDING_ACCEPT",AllocIntermedReqType_PENDING_ACCEPT_get, AllocIntermedReqType_PENDING_ACCEPT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocIntermedReqType_PENDING_RELEASE",AllocIntermedReqType_PENDING_RELEASE_get, AllocIntermedReqType_PENDING_RELEASE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocIntermedReqType_PENDING_REVERSAL",AllocIntermedReqType_PENDING_REVERSAL_get, AllocIntermedReqType_PENDING_REVERSAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocIntermedReqType_ACCEPT",AllocIntermedReqType_ACCEPT_get, AllocIntermedReqType_ACCEPT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocIntermedReqType_BLOCK_LEVEL_REJECT",AllocIntermedReqType_BLOCK_LEVEL_REJECT_get, AllocIntermedReqType_BLOCK_LEVEL_REJECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocIntermedReqType_ACCOUNT_LEVEL_REJECT",AllocIntermedReqType_ACCOUNT_LEVEL_REJECT_get, AllocIntermedReqType_ACCOUNT_LEVEL_REJECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ApplQueueResolution_NO_ACTION_TAKEN",ApplQueueResolution_NO_ACTION_TAKEN_get, ApplQueueResolution_NO_ACTION_TAKEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ApplQueueResolution_QUEUE_FLUSHED",ApplQueueResolution_QUEUE_FLUSHED_get, ApplQueueResolution_QUEUE_FLUSHED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ApplQueueResolution_OVERLAY_LAST",ApplQueueResolution_OVERLAY_LAST_get, ApplQueueResolution_OVERLAY_LAST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ApplQueueResolution_END_SESSION",ApplQueueResolution_END_SESSION_get, ApplQueueResolution_END_SESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ApplQueueAction_NO_ACTION_TAKEN",ApplQueueAction_NO_ACTION_TAKEN_get, ApplQueueAction_NO_ACTION_TAKEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ApplQueueAction_QUEUE_FLUSHED",ApplQueueAction_QUEUE_FLUSHED_get, ApplQueueAction_QUEUE_FLUSHED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ApplQueueAction_OVERLAY_LAST",ApplQueueAction_OVERLAY_LAST_get, ApplQueueAction_OVERLAY_LAST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ApplQueueAction_END_SESSION",ApplQueueAction_END_SESSION_get, ApplQueueAction_END_SESSION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AvgPxIndicator_NO_AVERAGE_PRICING",AvgPxIndicator_NO_AVERAGE_PRICING_get, AvgPxIndicator_NO_AVERAGE_PRICING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID",AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID_get, AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID",AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID_get, AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeAllocIndicator_ALLOCATION_NOT_REQUIRED",TradeAllocIndicator_ALLOCATION_NOT_REQUIRED_get, TradeAllocIndicator_ALLOCATION_NOT_REQUIRED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeAllocIndicator_ALLOCATION_REQUIRED",TradeAllocIndicator_ALLOCATION_REQUIRED_get, TradeAllocIndicator_ALLOCATION_REQUIRED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE",TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE_get, TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE",ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE_get, ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN",ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN_get, ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdType_REGULAR_TRADE",TrdType_REGULAR_TRADE_get, TrdType_REGULAR_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdType_BLOCK_TRADE",TrdType_BLOCK_TRADE_get, TrdType_BLOCK_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdType_EFP",TrdType_EFP_get, TrdType_EFP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdType_TRANSFER",TrdType_TRANSFER_get, TrdType_TRANSFER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdType_LATE_TRADE",TrdType_LATE_TRADE_get, TrdType_LATE_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdType_T_TRADE",TrdType_T_TRADE_get, TrdType_T_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdType_WEIGHTED_AVERAGE_PRICE_TRADE",TrdType_WEIGHTED_AVERAGE_PRICE_TRADE_get, TrdType_WEIGHTED_AVERAGE_PRICE_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdType_BUNCHED_TRADE",TrdType_BUNCHED_TRADE_get, TrdType_BUNCHED_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdType_LATE_BUNCHED_TRADE",TrdType_LATE_BUNCHED_TRADE_get, TrdType_LATE_BUNCHED_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdType_PRIOR_REFERENCE_PRICE_TRADE",TrdType_PRIOR_REFERENCE_PRICE_TRADE_get, TrdType_PRIOR_REFERENCE_PRICE_TRADE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegMoveType_FLOATING",PegMoveType_FLOATING_get, PegMoveType_FLOATING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegMoveType_FIXED",PegMoveType_FIXED_get, PegMoveType_FIXED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegOffsetType_PRICE",PegOffsetType_PRICE_get, PegOffsetType_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegOffsetType_BASIS_POINTS",PegOffsetType_BASIS_POINTS_get, PegOffsetType_BASIS_POINTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegOffsetType_TICKS",PegOffsetType_TICKS_get, PegOffsetType_TICKS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegOffsetType_PRICE_TIER_LEVEL",PegOffsetType_PRICE_TIER_LEVEL_get, PegOffsetType_PRICE_TIER_LEVEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegLimitType_OR_BETTER",PegLimitType_OR_BETTER_get, PegLimitType_OR_BETTER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegLimitType_STRICT",PegLimitType_STRICT_get, PegLimitType_STRICT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegLimitType_OR_WORSE",PegLimitType_OR_WORSE_get, PegLimitType_OR_WORSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegRoundDirection_MORE_AGGRESSIVE",PegRoundDirection_MORE_AGGRESSIVE_get, PegRoundDirection_MORE_AGGRESSIVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegRoundDirection_MORE_PASSIVE",PegRoundDirection_MORE_PASSIVE_get, PegRoundDirection_MORE_PASSIVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegScope_LOCAL",PegScope_LOCAL_get, PegScope_LOCAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegScope_NATIONAL",PegScope_NATIONAL_get, PegScope_NATIONAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegScope_GLOBAL",PegScope_GLOBAL_get, PegScope_GLOBAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PegScope_NATIONAL_EXCLUDING_LOCAL",PegScope_NATIONAL_EXCLUDING_LOCAL_get, PegScope_NATIONAL_EXCLUDING_LOCAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionMoveType_FLOATING",DiscretionMoveType_FLOATING_get, DiscretionMoveType_FLOATING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionMoveType_FIXED",DiscretionMoveType_FIXED_get, DiscretionMoveType_FIXED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionOffsetType_PRICE",DiscretionOffsetType_PRICE_get, DiscretionOffsetType_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionOffsetType_BASIS_POINTS",DiscretionOffsetType_BASIS_POINTS_get, DiscretionOffsetType_BASIS_POINTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionOffsetType_TICKS",DiscretionOffsetType_TICKS_get, DiscretionOffsetType_TICKS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionOffsetType_PRICE_TIER_LEVEL",DiscretionOffsetType_PRICE_TIER_LEVEL_get, DiscretionOffsetType_PRICE_TIER_LEVEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionLimitType_OR_BETTER",DiscretionLimitType_OR_BETTER_get, DiscretionLimitType_OR_BETTER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionLimitType_STRICT",DiscretionLimitType_STRICT_get, DiscretionLimitType_STRICT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionLimitType_OR_WORSE",DiscretionLimitType_OR_WORSE_get, DiscretionLimitType_OR_WORSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionRoundDirection_MORE_AGGRESSIVE",DiscretionRoundDirection_MORE_AGGRESSIVE_get, DiscretionRoundDirection_MORE_AGGRESSIVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionRoundDirection_MORE_PASSIVE",DiscretionRoundDirection_MORE_PASSIVE_get, DiscretionRoundDirection_MORE_PASSIVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionScope_LOCAL",DiscretionScope_LOCAL_get, DiscretionScope_LOCAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionScope_NATIONAL",DiscretionScope_NATIONAL_get, DiscretionScope_NATIONAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionScope_GLOBAL",DiscretionScope_GLOBAL_get, DiscretionScope_GLOBAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiscretionScope_NATIONAL_EXCLUDING_LOCAL",DiscretionScope_NATIONAL_EXCLUDING_LOCAL_get, DiscretionScope_NATIONAL_EXCLUDING_LOCAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LastLiquidityInd_ADDED_LIQUIDITY",LastLiquidityInd_ADDED_LIQUIDITY_get, LastLiquidityInd_ADDED_LIQUIDITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LastLiquidityInd_REMOVED_LIQUIDITY",LastLiquidityInd_REMOVED_LIQUIDITY_get, LastLiquidityInd_REMOVED_LIQUIDITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LastLiquidityInd_LIQUIDITY_ROUTED_OUT",LastLiquidityInd_LIQUIDITY_ROUTED_OUT_get, LastLiquidityInd_LIQUIDITY_ROUTED_OUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ShortSaleReason_DEALER_SOLD_SHORT",ShortSaleReason_DEALER_SOLD_SHORT_get, ShortSaleReason_DEALER_SOLD_SHORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT",ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT_get, ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT",ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_get, ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT",ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT_get, ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE_OR_AUTOMATIC_GIVEUP_CONTRA_SIDE_SOLD_SHORT",ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE_OR_AUTOMATIC_GIVEUP_CONTRA_SIDE_SOLD_SHORT_get, ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE_OR_AUTOMATIC_GIVEUP_CONTRA_SIDE_SOLD_SHORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT",ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT_get, ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QtyType_UNITS",QtyType_UNITS_get, QtyType_UNITS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"QtyType_CONTRACTS",QtyType_CONTRACTS_get, QtyType_CONTRACTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportType_SUBMIT",TradeReportType_SUBMIT_get, TradeReportType_SUBMIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportType_ALLEGED",TradeReportType_ALLEGED_get, TradeReportType_ALLEGED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportType_ACCEPT",TradeReportType_ACCEPT_get, TradeReportType_ACCEPT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportType_DECLINE",TradeReportType_DECLINE_get, TradeReportType_DECLINE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportType_ADDENDUM",TradeReportType_ADDENDUM_get, TradeReportType_ADDENDUM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportType_NO_WAS",TradeReportType_NO_WAS_get, TradeReportType_NO_WAS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportType_TRADE_REPORT_CANCEL",TradeReportType_TRADE_REPORT_CANCEL_get, TradeReportType_TRADE_REPORT_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TradeReportType_LOCKED_IN_TRADE_BREAK",TradeReportType_LOCKED_IN_TRADE_BREAK_get, TradeReportType_LOCKED_IN_TRADE_BREAK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocNoOrdersType_NOT_SPECIFIED",AllocNoOrdersType_NOT_SPECIFIED_get, AllocNoOrdersType_NOT_SPECIFIED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AllocNoOrdersType_EXPLICIT_LIST_PROVIDED",AllocNoOrdersType_EXPLICIT_LIST_PROVIDED_get, AllocNoOrdersType_EXPLICIT_LIST_PROVIDED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EventType_PUT",EventType_PUT_get, EventType_PUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EventType_CALL",EventType_CALL_get, EventType_CALL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EventType_TENDER",EventType_TENDER_get, EventType_TENDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EventType_SINKING_FUND_CALL",EventType_SINKING_FUND_CALL_get, EventType_SINKING_FUND_CALL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InstrAttribType_FLAT",InstrAttribType_FLAT_get, InstrAttribType_FLAT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InstrAttribType_ZERO_COUPON",InstrAttribType_ZERO_COUPON_get, InstrAttribType_ZERO_COUPON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InstrAttribType_INTEREST_BEARING",InstrAttribType_INTEREST_BEARING_get, InstrAttribType_INTEREST_BEARING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InstrAttribType_NO_PERIODIC_PAYMENTS",InstrAttribType_NO_PERIODIC_PAYMENTS_get, InstrAttribType_NO_PERIODIC_PAYMENTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InstrAttribType_VARIABLE_RATE",InstrAttribType_VARIABLE_RATE_get, InstrAttribType_VARIABLE_RATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InstrAttribType_LESS_FEE_FOR_PUT",InstrAttribType_LESS_FEE_FOR_PUT_get, InstrAttribType_LESS_FEE_FOR_PUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InstrAttribType_STEPPED_COUPON",InstrAttribType_STEPPED_COUPON_get, InstrAttribType_STEPPED_COUPON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InstrAttribType_COUPON_PERIOD",InstrAttribType_COUPON_PERIOD_get, InstrAttribType_COUPON_PERIOD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InstrAttribType_WHEN_AND_IF_ISSUED",InstrAttribType_WHEN_AND_IF_ISSUED_get, InstrAttribType_WHEN_AND_IF_ISSUED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeBasis_ABSOLUTE",MiscFeeBasis_ABSOLUTE_get, MiscFeeBasis_ABSOLUTE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeBasis_PER_UNIT",MiscFeeBasis_PER_UNIT_get, MiscFeeBasis_PER_UNIT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MiscFeeBasis_PERCENTAGE",MiscFeeBasis_PERCENTAGE_get, MiscFeeBasis_PERCENTAGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnReason_INITIAL",CollAsgnReason_INITIAL_get, CollAsgnReason_INITIAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnReason_SCHEDULED",CollAsgnReason_SCHEDULED_get, CollAsgnReason_SCHEDULED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnReason_TIME_WARNING",CollAsgnReason_TIME_WARNING_get, CollAsgnReason_TIME_WARNING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnReason_MARGIN_DEFICIENCY",CollAsgnReason_MARGIN_DEFICIENCY_get, CollAsgnReason_MARGIN_DEFICIENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnReason_MARGIN_EXCESS",CollAsgnReason_MARGIN_EXCESS_get, CollAsgnReason_MARGIN_EXCESS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnReason_FORWARD_COLLATERAL_DEMAND",CollAsgnReason_FORWARD_COLLATERAL_DEMAND_get, CollAsgnReason_FORWARD_COLLATERAL_DEMAND_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnReason_EVENT_OF_DEFAULT",CollAsgnReason_EVENT_OF_DEFAULT_get, CollAsgnReason_EVENT_OF_DEFAULT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnReason_ADVERSE_TAX_EVENT",CollAsgnReason_ADVERSE_TAX_EVENT_get, CollAsgnReason_ADVERSE_TAX_EVENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryQualifier_TRADEDATE",CollInquiryQualifier_TRADEDATE_get, CollInquiryQualifier_TRADEDATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryQualifier_GC_INSTRUMENT",CollInquiryQualifier_GC_INSTRUMENT_get, CollInquiryQualifier_GC_INSTRUMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryQualifier_COLLATERALINSTRUMENT",CollInquiryQualifier_COLLATERALINSTRUMENT_get, CollInquiryQualifier_COLLATERALINSTRUMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryQualifier_SUBSTITUTION_ELIGIBLE",CollInquiryQualifier_SUBSTITUTION_ELIGIBLE_get, CollInquiryQualifier_SUBSTITUTION_ELIGIBLE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryQualifier_NOT_ASSIGNED",CollInquiryQualifier_NOT_ASSIGNED_get, CollInquiryQualifier_NOT_ASSIGNED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryQualifier_PARTIALLY_ASSIGNED",CollInquiryQualifier_PARTIALLY_ASSIGNED_get, CollInquiryQualifier_PARTIALLY_ASSIGNED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryQualifier_FULLY_ASSIGNED",CollInquiryQualifier_FULLY_ASSIGNED_get, CollInquiryQualifier_FULLY_ASSIGNED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryQualifier_OUTSTANDING_TRADES",CollInquiryQualifier_OUTSTANDING_TRADES_get, CollInquiryQualifier_OUTSTANDING_TRADES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnTransType_NEW",CollAsgnTransType_NEW_get, CollAsgnTransType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnTransType_REPLACE",CollAsgnTransType_REPLACE_get, CollAsgnTransType_REPLACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnTransType_CANCEL",CollAsgnTransType_CANCEL_get, CollAsgnTransType_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnTransType_RELEASE",CollAsgnTransType_RELEASE_get, CollAsgnTransType_RELEASE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnTransType_REVERSE",CollAsgnTransType_REVERSE_get, CollAsgnTransType_REVERSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnRespType_RECEIVED",CollAsgnRespType_RECEIVED_get, CollAsgnRespType_RECEIVED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnRespType_ACCEPTED",CollAsgnRespType_ACCEPTED_get, CollAsgnRespType_ACCEPTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnRespType_DECLINED",CollAsgnRespType_DECLINED_get, CollAsgnRespType_DECLINED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnRespType_REJECTED",CollAsgnRespType_REJECTED_get, CollAsgnRespType_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnRejectReason_UNKNOWN_DEAL",CollAsgnRejectReason_UNKNOWN_DEAL_get, CollAsgnRejectReason_UNKNOWN_DEAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT",CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT_get, CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION",CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION_get, CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnRejectReason_INSUFFICIENT_COLLATERAL",CollAsgnRejectReason_INSUFFICIENT_COLLATERAL_get, CollAsgnRejectReason_INSUFFICIENT_COLLATERAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL",CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL_get, CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION",CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION_get, CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollStatus_UNASSIGNED",CollStatus_UNASSIGNED_get, CollStatus_UNASSIGNED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollStatus_PARTIALLY_ASSIGNED",CollStatus_PARTIALLY_ASSIGNED_get, CollStatus_PARTIALLY_ASSIGNED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollStatus_ASSIGNMENT_PROPOSED",CollStatus_ASSIGNMENT_PROPOSED_get, CollStatus_ASSIGNMENT_PROPOSED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollStatus_ASSIGNED",CollStatus_ASSIGNED_get, CollStatus_ASSIGNED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollStatus_CHALLENGED",CollStatus_CHALLENGED_get, CollStatus_CHALLENGED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DeliveryType_VERSUS_PAYMENT",DeliveryType_VERSUS_PAYMENT_get, DeliveryType_VERSUS_PAYMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DeliveryType_FREE",DeliveryType_FREE_get, DeliveryType_FREE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DeliveryType_TRI_PARTY",DeliveryType_TRI_PARTY_get, DeliveryType_TRI_PARTY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DeliveryType_HOLD_IN_CUSTODY",DeliveryType_HOLD_IN_CUSTODY_get, DeliveryType_HOLD_IN_CUSTODY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UserRequestType_LOGONUSER",UserRequestType_LOGONUSER_get, UserRequestType_LOGONUSER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UserRequestType_LOGOFFUSER",UserRequestType_LOGOFFUSER_get, UserRequestType_LOGOFFUSER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UserRequestType_CHANGEPASSWORDFORUSER",UserRequestType_CHANGEPASSWORDFORUSER_get, UserRequestType_CHANGEPASSWORDFORUSER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS",UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS_get, UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UserStatus_LOGGED_IN",UserStatus_LOGGED_IN_get, UserStatus_LOGGED_IN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UserStatus_NOT_LOGGED_IN",UserStatus_NOT_LOGGED_IN_get, UserStatus_NOT_LOGGED_IN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UserStatus_USER_NOT_RECOGNISED",UserStatus_USER_NOT_RECOGNISED_get, UserStatus_USER_NOT_RECOGNISED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UserStatus_PASSWORD_INCORRECT",UserStatus_PASSWORD_INCORRECT_get, UserStatus_PASSWORD_INCORRECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UserStatus_PASSWORD_CHANGED",UserStatus_PASSWORD_CHANGED_get, UserStatus_PASSWORD_CHANGED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UserStatus_OTHER",UserStatus_OTHER_get, UserStatus_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StatusValue_CONNECTED",StatusValue_CONNECTED_get, StatusValue_CONNECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP",StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP_get, StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN",StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN_get, StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StatusValue_IN_PROCESS",StatusValue_IN_PROCESS_get, StatusValue_IN_PROCESS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NetworkRequestType_SNAPSHOT",NetworkRequestType_SNAPSHOT_get, NetworkRequestType_SNAPSHOT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NetworkRequestType_SUBSCRIBE",NetworkRequestType_SUBSCRIBE_get, NetworkRequestType_SUBSCRIBE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NetworkRequestType_STOP_SUBSCRIBING",NetworkRequestType_STOP_SUBSCRIBING_get, NetworkRequestType_STOP_SUBSCRIBING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NetworkRequestType_LEVEL_OF_DETAIL",NetworkRequestType_LEVEL_OF_DETAIL_get, NetworkRequestType_LEVEL_OF_DETAIL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NetworkStatusResponseType_FULL",NetworkStatusResponseType_FULL_get, NetworkStatusResponseType_FULL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NetworkStatusResponseType_INCREMENTAL_UPDATE",NetworkStatusResponseType_INCREMENTAL_UPDATE_get, NetworkStatusResponseType_INCREMENTAL_UPDATE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdRptStatus_ACCEPTED",TrdRptStatus_ACCEPTED_get, TrdRptStatus_ACCEPTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TrdRptStatus_REJECTED",TrdRptStatus_REJECTED_get, TrdRptStatus_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AffirmStatus_RECEIVED",AffirmStatus_RECEIVED_get, AffirmStatus_RECEIVED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AffirmStatus_CONFIRM_REJECTED",AffirmStatus_CONFIRM_REJECTED_get, AffirmStatus_CONFIRM_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AffirmStatus_AFFIRMED",AffirmStatus_AFFIRMED_get, AffirmStatus_AFFIRMED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAction_RETAIN",CollAction_RETAIN_get, CollAction_RETAIN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAction_ADD",CollAction_ADD_get, CollAction_ADD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollAction_REMOVE",CollAction_REMOVE_get, CollAction_REMOVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryStatus_ACCEPTED",CollInquiryStatus_ACCEPTED_get, CollInquiryStatus_ACCEPTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryStatus_ACCEPTED_WITH_WARNINGS",CollInquiryStatus_ACCEPTED_WITH_WARNINGS_get, CollInquiryStatus_ACCEPTED_WITH_WARNINGS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryStatus_COMPLETED",CollInquiryStatus_COMPLETED_get, CollInquiryStatus_COMPLETED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryStatus_COMPLETED_WITH_WARNINGS",CollInquiryStatus_COMPLETED_WITH_WARNINGS_get, CollInquiryStatus_COMPLETED_WITH_WARNINGS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryStatus_REJECTED",CollInquiryStatus_REJECTED_get, CollInquiryStatus_REJECTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryResult_SUCCESSFUL",CollInquiryResult_SUCCESSFUL_get, CollInquiryResult_SUCCESSFUL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT",CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT_get, CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE",CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE_get, CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryResult_INVALID_PARTIES",CollInquiryResult_INVALID_PARTIES_get, CollInquiryResult_INVALID_PARTIES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED",CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED_get, CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryResult_INVALID_DESTINATION_REQUESTED",CollInquiryResult_INVALID_DESTINATION_REQUESTED_get, CollInquiryResult_INVALID_DESTINATION_REQUESTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED",CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED_get, CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED",CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED_get, CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED",CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED_get, CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY",CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY_get, CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CollInquiryResult_OTHER",CollInquiryResult_OTHER_get, CollInquiryResult_OTHER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_INVALID_TAG_NUMBER_TEXT",SessionRejectReason_INVALID_TAG_NUMBER_TEXT_get, SessionRejectReason_INVALID_TAG_NUMBER_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_REQUIRED_TAG_MISSING_TEXT",SessionRejectReason_REQUIRED_TAG_MISSING_TEXT_get, SessionRejectReason_REQUIRED_TAG_MISSING_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT",SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT_get, SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_UNDEFINED_TAG_TEXT",SessionRejectReason_UNDEFINED_TAG_TEXT_get, SessionRejectReason_UNDEFINED_TAG_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT",SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT_get, SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_VALUE_IS_INCORRECT_TEXT",SessionRejectReason_VALUE_IS_INCORRECT_TEXT_get, SessionRejectReason_VALUE_IS_INCORRECT_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT",SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT_get, SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_DECRYPTION_PROBLEM_TEXT",SessionRejectReason_DECRYPTION_PROBLEM_TEXT_get, SessionRejectReason_DECRYPTION_PROBLEM_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_SIGNATURE_PROBLEM_TEXT",SessionRejectReason_SIGNATURE_PROBLEM_TEXT_get, SessionRejectReason_SIGNATURE_PROBLEM_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_COMPID_PROBLEM_TEXT",SessionRejectReason_COMPID_PROBLEM_TEXT_get, SessionRejectReason_COMPID_PROBLEM_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT",SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT_get, SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_INVALID_MSGTYPE_TEXT",SessionRejectReason_INVALID_MSGTYPE_TEXT_get, SessionRejectReason_INVALID_MSGTYPE_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT",SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT_get, SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT",SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT_get, SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT",SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT_get, SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_OTHER_TEXT",BusinessRejectReason_OTHER_TEXT_get, BusinessRejectReason_OTHER_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_UNKNOWN_ID_TEXT",BusinessRejectReason_UNKNOWN_ID_TEXT_get, BusinessRejectReason_UNKNOWN_ID_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_UNKNOWN_SECURITY_TEXT",BusinessRejectReason_UNKNOWN_SECURITY_TEXT_get, BusinessRejectReason_UNKNOWN_SECURITY_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT",BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT_get, BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT",BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT_get, BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT",BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT_get, BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_NOT_AUTHORIZED_TEXT",BusinessRejectReason_NOT_AUTHORIZED_TEXT_get, BusinessRejectReason_NOT_AUTHORIZED_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT",BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT_get, BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecTransType_NEW",ExecTransType_NEW_get, ExecTransType_NEW_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecTransType_CANCEL",ExecTransType_CANCEL_get, ExecTransType_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecTransType_CORRECT",ExecTransType_CORRECT_get, ExecTransType_CORRECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExecTransType_STATUS",ExecTransType_STATUS_get, ExecTransType_STATUS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IDSource_CUSIP",IDSource_CUSIP_get, IDSource_CUSIP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IDSource_SEDOL",IDSource_SEDOL_get, IDSource_SEDOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IDSource_QUIK",IDSource_QUIK_get, IDSource_QUIK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IDSource_ISIN_NUMBER",IDSource_ISIN_NUMBER_get, IDSource_ISIN_NUMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IDSource_RIC_CODE",IDSource_RIC_CODE_get, IDSource_RIC_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IDSource_ISO_CURRENCY_CODE",IDSource_ISO_CURRENCY_CODE_get, IDSource_ISO_CURRENCY_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IDSource_ISO_COUNTRY_CODE",IDSource_ISO_COUNTRY_CODE_get, IDSource_ISO_COUNTRY_CODE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IDSource_EXCHANGE_SYMBOL",IDSource_EXCHANGE_SYMBOL_get, IDSource_EXCHANGE_SYMBOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IDSource_CONSOLIDATED_TAPE_ASSOCIATION",IDSource_CONSOLIDATED_TAPE_ASSOCIATION_get, IDSource_CONSOLIDATED_TAPE_ASSOCIATION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIShares_SMALL",IOIShares_SMALL_get, IOIShares_SMALL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIShares_MEDIUM",IOIShares_MEDIUM_get, IOIShares_MEDIUM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"IOIShares_LARGE",IOIShares_LARGE_get, IOIShares_LARGE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_AGENCY_SINGLE_ORDER",Rule80A_AGENCY_SINGLE_ORDER_get, Rule80A_AGENCY_SINGLE_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_A_TYPE",Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_A_TYPE_get, Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_A_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM",Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM_get, Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM",Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM_get, Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL",Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL_get, Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_W_TYPE",Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_W_TYPE_get, Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_W_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_I_TYPE",Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_I_TYPE_get, Rule80A_SHORT_EXEMPT_TRANSACTION_REFER_TO_I_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_INDIVIDUAL_INVESTOR",Rule80A_INDIVIDUAL_INVESTOR_get, Rule80A_INDIVIDUAL_INVESTOR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER",Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER_get, Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER",Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER_get, Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_SHORT_EXEMPT_AFFILIATED",Rule80A_SHORT_EXEMPT_AFFILIATED_get, Rule80A_SHORT_EXEMPT_AFFILIATED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER",Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER_get, Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER",Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER_get, Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_PROPRIETARY_AFFILIATED",Rule80A_PROPRIETARY_AFFILIATED_get, Rule80A_PROPRIETARY_AFFILIATED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_PRINCIPAL",Rule80A_PRINCIPAL_get, Rule80A_PRINCIPAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_TRANSACTIONS_NON_MEMBER",Rule80A_TRANSACTIONS_NON_MEMBER_get, Rule80A_TRANSACTIONS_NON_MEMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_SPECIALIST_TRADES",Rule80A_SPECIALIST_TRADES_get, Rule80A_SPECIALIST_TRADES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_TRANSACTIONS_UNAFFILIATED_MEMBER",Rule80A_TRANSACTIONS_UNAFFILIATED_MEMBER_get, Rule80A_TRANSACTIONS_UNAFFILIATED_MEMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY",Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY_get, Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER",Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER_get, Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_SHORT_EXEMPT_NOT_AFFILIATED",Rule80A_SHORT_EXEMPT_NOT_AFFILIATED_get, Rule80A_SHORT_EXEMPT_NOT_AFFILIATED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY",Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY_get, Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Rule80A_SHORT_EXEMPT_NONMEMBER",Rule80A_SHORT_EXEMPT_NONMEMBER_get, Rule80A_SHORT_EXEMPT_NONMEMBER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlmntTyp_REGULAR",SettlmntTyp_REGULAR_get, SettlmntTyp_REGULAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlmntTyp_CASH",SettlmntTyp_CASH_get, SettlmntTyp_CASH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlmntTyp_NEXT_DAY",SettlmntTyp_NEXT_DAY_get, SettlmntTyp_NEXT_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlmntTyp_T_PLUS_2",SettlmntTyp_T_PLUS_2_get, SettlmntTyp_T_PLUS_2_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlmntTyp_T_PLUS_3",SettlmntTyp_T_PLUS_3_get, SettlmntTyp_T_PLUS_3_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlmntTyp_T_PLUS_4",SettlmntTyp_T_PLUS_4_get, SettlmntTyp_T_PLUS_4_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlmntTyp_FUTURE",SettlmntTyp_FUTURE_get, SettlmntTyp_FUTURE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlmntTyp_WHEN_AND_IF_ISSUED",SettlmntTyp_WHEN_AND_IF_ISSUED_get, SettlmntTyp_WHEN_AND_IF_ISSUED_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlmntTyp_SELLERS_OPTION",SettlmntTyp_SELLERS_OPTION_get, SettlmntTyp_SELLERS_OPTION_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlmntTyp_T_PLUS_5",SettlmntTyp_T_PLUS_5_get, SettlmntTyp_T_PLUS_5_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlmntTyp_T_PLUS_1",SettlmntTyp_T_PLUS_1_get, SettlmntTyp_T_PLUS_1_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenClose_OPEN",OpenClose_OPEN_get, OpenClose_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenClose_CLOSE",OpenClose_CLOSE_get, OpenClose_CLOSE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlType_PARTIAL_CANCEL",CxlType_PARTIAL_CANCEL_get, CxlType_PARTIAL_CANCEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CxlType_FULL_REMAINING_QUANTITY",CxlType_FULL_REMAINING_QUANTITY_get, CxlType_FULL_REMAINING_QUANTITY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlLocation_CEDEL",SettlLocation_CEDEL_get, SettlLocation_CEDEL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlLocation_DEPOSITORY_TRUST_COMPANY",SettlLocation_DEPOSITORY_TRUST_COMPANY_get, SettlLocation_DEPOSITORY_TRUST_COMPANY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlLocation_EUROCLEAR",SettlLocation_EUROCLEAR_get, SettlLocation_EUROCLEAR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlLocation_FEDERAL_BOOK_ENTRY",SettlLocation_FEDERAL_BOOK_ENTRY_get, SettlLocation_FEDERAL_BOOK_ENTRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlLocation_PHYSICAL",SettlLocation_PHYSICAL_get, SettlLocation_PHYSICAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SettlLocation_PARTICIPANT_TRUST_COMPANY_ISO_COUNTRY",SettlLocation_PARTICIPANT_TRUST_COMPANY_ISO_COUNTRY_get, SettlLocation_PARTICIPANT_TRUST_COMPANY_ISO_COUNTRY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PutOrCall_PUT",PutOrCall_PUT_get, PutOrCall_PUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PutOrCall_CALL",PutOrCall_CALL_get, PutOrCall_CALL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CustomerOrFirm_CUSTOMER",CustomerOrFirm_CUSTOMER_get, CustomerOrFirm_CUSTOMER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CustomerOrFirm_FIRM",CustomerOrFirm_FIRM_get, CustomerOrFirm_FIRM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Benchmark_CURVE",Benchmark_CURVE_get, Benchmark_CURVE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Benchmark_FIVEYR",Benchmark_FIVEYR_get, Benchmark_FIVEYR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Benchmark_OLD5",Benchmark_OLD5_get, Benchmark_OLD5_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Benchmark_TENYR",Benchmark_TENYR_get, Benchmark_TENYR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Benchmark_OLD10",Benchmark_OLD10_get, Benchmark_OLD10_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Benchmark_THIRTYYR",Benchmark_THIRTYYR_get, Benchmark_THIRTYYR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Benchmark_OLD30",Benchmark_OLD30_get, Benchmark_OLD30_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Benchmark_THREEMOLIBOR",Benchmark_THREEMOLIBOR_get, Benchmark_THREEMOLIBOR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Benchmark_SIXMOLIBOR",Benchmark_SIXMOLIBOR_get, Benchmark_SIXMOLIBOR_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenCloseSettleFlag_DAILY_OPEN",OpenCloseSettleFlag_DAILY_OPEN_get, OpenCloseSettleFlag_DAILY_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenCloseSettleFlag_SESSION_OPEN",OpenCloseSettleFlag_SESSION_OPEN_get, OpenCloseSettleFlag_SESSION_OPEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE",OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE_get, OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenCloseSettleFlag_EXPECTED_PRICE",OpenCloseSettleFlag_EXPECTED_PRICE_get, OpenCloseSettleFlag_EXPECTED_PRICE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY",OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY_get, OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BEGINSTRING",BEGINSTRING_get, BEGINSTRING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SENDERCOMPID",SENDERCOMPID_get, SENDERCOMPID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TARGETCOMPID",TARGETCOMPID_get, TARGETCOMPID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SESSION_QUALIFIER",SESSION_QUALIFIER_get, SESSION_QUALIFIER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CONNECTION_TYPE",CONNECTION_TYPE_get, CONNECTION_TYPE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"USE_DATA_DICTIONARY",USE_DATA_DICTIONARY_get, USE_DATA_DICTIONARY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SEND_RESETSEQNUMFLAG",SEND_RESETSEQNUMFLAG_get, SEND_RESETSEQNUMFLAG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SEND_REDUNDANT_RESENDREQUESTS",SEND_REDUNDANT_RESENDREQUESTS_get, SEND_REDUNDANT_RESENDREQUESTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DATA_DICTIONARY",DATA_DICTIONARY_get, DATA_DICTIONARY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"START_TIME",START_TIME_get, START_TIME_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"END_TIME",END_TIME_get, END_TIME_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"START_DAY",START_DAY_get, START_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"END_DAY",END_DAY_get, END_DAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CHECK_COMPID",CHECK_COMPID_get, CHECK_COMPID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CHECK_LATENCY",CHECK_LATENCY_get, CHECK_LATENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MAX_LATENCY",MAX_LATENCY_get, MAX_LATENCY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HEARTBTINT",HEARTBTINT_get, HEARTBTINT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SOCKET_ACCEPT_PORT",SOCKET_ACCEPT_PORT_get, SOCKET_ACCEPT_PORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SOCKET_REUSE_ADDRESS",SOCKET_REUSE_ADDRESS_get, SOCKET_REUSE_ADDRESS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SOCKET_CONNECT_HOST",SOCKET_CONNECT_HOST_get, SOCKET_CONNECT_HOST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SOCKET_CONNECT_PORT",SOCKET_CONNECT_PORT_get, SOCKET_CONNECT_PORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SOCKET_NODELAY",SOCKET_NODELAY_get, SOCKET_NODELAY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RECONNECT_INTERVAL",RECONNECT_INTERVAL_get, RECONNECT_INTERVAL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"VALIDATE_FIELDS_OUT_OF_ORDER",VALIDATE_FIELDS_OUT_OF_ORDER_get, VALIDATE_FIELDS_OUT_OF_ORDER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"VALIDATE_FIELDS_HAVE_VALUES",VALIDATE_FIELDS_HAVE_VALUES_get, VALIDATE_FIELDS_HAVE_VALUES_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"VALIDATE_USER_DEFINED_FIELDS",VALIDATE_USER_DEFINED_FIELDS_get, VALIDATE_USER_DEFINED_FIELDS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LOGON_TIMEOUT",LOGON_TIMEOUT_get, LOGON_TIMEOUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"LOGOUT_TIMEOUT",LOGOUT_TIMEOUT_get, LOGOUT_TIMEOUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FILE_STORE_PATH",FILE_STORE_PATH_get, FILE_STORE_PATH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_STORE_USECONNECTIONPOOL",MYSQL_STORE_USECONNECTIONPOOL_get, MYSQL_STORE_USECONNECTIONPOOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_STORE_DATABASE",MYSQL_STORE_DATABASE_get, MYSQL_STORE_DATABASE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_STORE_USER",MYSQL_STORE_USER_get, MYSQL_STORE_USER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_STORE_PASSWORD",MYSQL_STORE_PASSWORD_get, MYSQL_STORE_PASSWORD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_STORE_HOST",MYSQL_STORE_HOST_get, MYSQL_STORE_HOST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_STORE_PORT",MYSQL_STORE_PORT_get, MYSQL_STORE_PORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_STORE_USECONNECTIONPOOL",POSTGRESQL_STORE_USECONNECTIONPOOL_get, POSTGRESQL_STORE_USECONNECTIONPOOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_STORE_DATABASE",POSTGRESQL_STORE_DATABASE_get, POSTGRESQL_STORE_DATABASE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_STORE_USER",POSTGRESQL_STORE_USER_get, POSTGRESQL_STORE_USER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_STORE_PASSWORD",POSTGRESQL_STORE_PASSWORD_get, POSTGRESQL_STORE_PASSWORD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_STORE_HOST",POSTGRESQL_STORE_HOST_get, POSTGRESQL_STORE_HOST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_STORE_PORT",POSTGRESQL_STORE_PORT_get, POSTGRESQL_STORE_PORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ODBC_STORE_USER",ODBC_STORE_USER_get, ODBC_STORE_USER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ODBC_STORE_PASSWORD",ODBC_STORE_PASSWORD_get, ODBC_STORE_PASSWORD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ODBC_STORE_CONNECTION_STRING",ODBC_STORE_CONNECTION_STRING_get, ODBC_STORE_CONNECTION_STRING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"FILE_LOG_PATH",FILE_LOG_PATH_get, FILE_LOG_PATH_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SCREEN_LOG_SHOW_INCOMING",SCREEN_LOG_SHOW_INCOMING_get, SCREEN_LOG_SHOW_INCOMING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SCREEN_LOG_SHOW_OUTGOING",SCREEN_LOG_SHOW_OUTGOING_get, SCREEN_LOG_SHOW_OUTGOING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SCREEN_LOG_SHOW_EVENTS",SCREEN_LOG_SHOW_EVENTS_get, SCREEN_LOG_SHOW_EVENTS_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_LOG_USECONNECTIONPOOL",MYSQL_LOG_USECONNECTIONPOOL_get, MYSQL_LOG_USECONNECTIONPOOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_LOG_DATABASE",MYSQL_LOG_DATABASE_get, MYSQL_LOG_DATABASE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_LOG_USER",MYSQL_LOG_USER_get, MYSQL_LOG_USER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_LOG_PASSWORD",MYSQL_LOG_PASSWORD_get, MYSQL_LOG_PASSWORD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_LOG_HOST",MYSQL_LOG_HOST_get, MYSQL_LOG_HOST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MYSQL_LOG_PORT",MYSQL_LOG_PORT_get, MYSQL_LOG_PORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_LOG_USECONNECTIONPOOL",POSTGRESQL_LOG_USECONNECTIONPOOL_get, POSTGRESQL_LOG_USECONNECTIONPOOL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_LOG_DATABASE",POSTGRESQL_LOG_DATABASE_get, POSTGRESQL_LOG_DATABASE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_LOG_USER",POSTGRESQL_LOG_USER_get, POSTGRESQL_LOG_USER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_LOG_PASSWORD",POSTGRESQL_LOG_PASSWORD_get, POSTGRESQL_LOG_PASSWORD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_LOG_HOST",POSTGRESQL_LOG_HOST_get, POSTGRESQL_LOG_HOST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"POSTGRESQL_LOG_PORT",POSTGRESQL_LOG_PORT_get, POSTGRESQL_LOG_PORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ODBC_LOG_USER",ODBC_LOG_USER_get, ODBC_LOG_USER_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ODBC_LOG_PASSWORD",ODBC_LOG_PASSWORD_get, ODBC_LOG_PASSWORD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ODBC_LOG_CONNECTION_STRING",ODBC_LOG_CONNECTION_STRING_get, ODBC_LOG_CONNECTION_STRING_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RESET_ON_LOGON",RESET_ON_LOGON_get, RESET_ON_LOGON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RESET_ON_LOGOUT",RESET_ON_LOGOUT_get, RESET_ON_LOGOUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RESET_ON_DISCONNECT",RESET_ON_DISCONNECT_get, RESET_ON_DISCONNECT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"REFRESH_ON_LOGON",REFRESH_ON_LOGON_get, REFRESH_ON_LOGON_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MILLISECONDS_IN_TIMESTAMP",MILLISECONDS_IN_TIMESTAMP_get, MILLISECONDS_IN_TIMESTAMP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HTTP_ACCEPT_PORT",HTTP_ACCEPT_PORT_get, HTTP_ACCEPT_PORT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PERSIST_MESSAGES",PERSIST_MESSAGES_get, PERSIST_MESSAGES_set);
}

