<?xml version="1.0" encoding="UTF-8"?>
<templates>

<template 
	context="ruby" 
	description="%forTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.for1" 
	name="for">for ${obj} in ${collection}
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%forTemplate2.description" 
	id="org.rubypeople.rdt.ui.templates.for2" 
	name="for">for ${i} in ${start_num}..${end_num}
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%defTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.def1" 
	name="def">def ${method_name}
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%whileTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.while1" 
	name="while">while ${condition}
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%whileTemplate2.description" 
	id="org.rubypeople.rdt.ui.templates.while2" 
	name="while">while ${condition}</template>

<template 
	context="ruby" 
	description="%classTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.class1" 
	name="class">class ${ClassName}
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%classTemplate2.description" 
	id="org.rubypeople.rdt.ui.templates.class2" 
	name="class">class &lt;&lt; ${obj}
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%moduleTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.module1" 
	name="module">module ${ModuleName}
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%doTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.do1" 
	name="do">do |${block_var}|
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%ifTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.if1" 
	name="if">if ${condition}
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%ifTemplate2.description" 
	id="org.rubypeople.rdt.ui.templates.if2" 
	name="if">if __FILE__ == $$0
    ${cursor}
end</template>

<template 
	context="ruby" 
	description="%ifelseTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.ifelse1" 
	name="ifelse">if ${condition}
  ${if_body}
else
  ${else_body}
end</template>

<template 
	context="ruby" 
	description="%elsifTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.elsif1" 
	name="elsif">elsif ${condition}
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%caseTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.case" 
	name="case">case ${condition}
  when ${comparison1}
    ${comparison1_body}
  when ${comparison2}
    ${comparison2_body}
end</template>

<template 
	context="ruby" 
	description="%elseTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.else" 
	name="else">else ${condition}
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%beginTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.begin1" 
	name="begin">begin
 ${body}
end until ${condition}</template>

<template 
	context="ruby" 
	description="%beginTemplate2.description" 
	id="org.rubypeople.rdt.ui.templates.begin2" 
	name="begin">begin
 ${body}
end while ${condition}</template>

<template 
	context="ruby" 
	description="%beginTemplate3.description" 
	id="org.rubypeople.rdt.ui.templates.begin3" 
	name="begin">begin
 ${begin_body}
rescue ${ErrorType}
  ${rescue_body}
end</template>

<template 
	context="ruby" 
	description="%beginTemplate4.description" 
	id="org.rubypeople.rdt.ui.templates.begin4" 
	name="begin">begin
 ${begin_body}
rescue ${ErrorType}
  ${rescue_body}
ensure
  ${ensure_body}
end</template>

<template 
	context="ruby" 
	description="%untilTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.until1" 
	name="until">until ${condition}
  ${cursor}
end</template>

<template 
	context="ruby" 
	description="%aliasTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.alias1" 
	name="alias">alias :${new_method} :${old_method}</template>

<template 
	context="ruby" 
	description="%rescueTemplate1.description" 
	id="org.rubypeople.rdt.ui.templates.rescue1" 
	name="rescue">rescue ${ErrorType}
	${rescue_body}
end</template>

<template 
	context="ruby" 
	description="%rescueTemplate2.description" 
	id="org.rubypeople.rdt.ui.templates.rescue2" 
	name="rescue">rescue ${ErrorType} =&gt; ${error_var}
	${rescue_body}
end</template>

<!-- Dr. Nic's templates -->

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.all" 
	description="tm - all? { |e| .. }" 
	enabled="true" 
	name="all">all? { |${e}| ${cursor} }</template>
	
<template 
	autoinsert="true" 
	id="org.rubypeople.rdt.ui.templates.tm.alias_method"
	context="ruby" 
	deleted="false" 
	description="tm - alias_method .." 
	enabled="true" 
	name="am">alias_method :${new_name}, :${old_name}</template>
	
<template 
	autoinsert="true" 
	id="org.rubypeople.rdt.ui.templates.tm.any"
	context="ruby" 
	deleted="false" 
	description="tm - any? { |e| .. }" 
	enabled="true" 
	name="any">any? { |${e}| ${cursor} }</template>
	
<template 
	autoinsert="true" 
	id="org.rubypeople.rdt.ui.templates.tm.application_code"
	context="ruby" 
	deleted="false" 
	description="tm - application_code { .. }" 
	enabled="true" 
	name="app">if __FILE__ == $$PROGRAM_NAME
	${cursor}
end</template>

<template 
	autoinsert="true" 
	id="org.rubypeople.rdt.ui.templates.tm.array"
	context="ruby" 
	deleted="false" 
	description="tm - Array.new(10) { |i| .. }" 
	enabled="true" 
	name="Array">Array.new(${10}) { |${i}|${cursor} }</template>
	
<template 
	autoinsert="true" 
	context="ruby" 
	id="org.rubypeople.rdt.ui.templates.tm.assert"
	deleted="false" 
	description="tm - assert(..)" 
	enabled="true" 
	name="as">assert(${test}, "${message}")</template>
	
<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_equal"
	description="tm - assert_equal(..)" 
	enabled="true" 
	name="ase">assert_equal(${expected}, ${actual})</template>
	
<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_in_delta"
	description="tm - assert_in_delta(..)" 
	enabled="true" 
	name="asid">assert_in_delta(${expected_float}, ${actual_float}, ${20})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_instance_of"
	description="tm - assert_instance_of(..)" 
	enabled="true" 
	name="asio">assert_instance_of(${ExpectedClass}, ${actual_instance})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_kind_of"
	description="tm - assert_kind_of(..)" 
	enabled="true" 
	name="asko">assert_kind_of(${ExpectedKind}, ${actual_instance})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_match"
	description="tm - assert_match(..)" 
	enabled="true" 
	name="asm">assert_match(/${expected_pattern}/, ${actual_string})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_nil"
	description="tm - assert_nil(..)" 
	enabled="true" 
	name="asn">assert_nil(${instance})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_not_equal"
	description="tm - assert_not_equal(..)" 
	enabled="true" 
	name="asne">assert_not_equal(${unexpected}, ${actual})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_no_match"
	description="tm - assert_no_match(..)" 
	enabled="true" 
	name="asnm">assert_no_match(/${unexpected_pattern}/, ${actual_string})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_not_nil"
	description="tm - assert_not_nil(..)" 
	enabled="true" 
	name="asnn">assert_not_nil(${instance})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_not_nil_assigns"
	description="assert_not_nil(var = assigns(:var))" 
	enabled="true" 
	name="asnnv">assert_not_nil(${var} = assigns(:${var}))</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_nothing_raised"
	description="tm - assert_nothing_raised(..) { .. }" 
	enabled="true" 
	name="asnr">assert_nothing_raised(${Exception}) { ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_not_same"
	description="tm - assert_not_same(..)" 
	enabled="true" 
	name="asns">assert_not_same(${unexpected}, ${actual})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_nothing_thrown"
	description="tm - assert_nothing_thrown { .. }" 
	enabled="true" 
	name="asnt">assert_nothing_thrown { ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_operator"
	description="tm - assert_operator(..)" 
	enabled="true" 
	name="aso">assert_operator(${left}, :${operator}, ${right})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_raise"
	description="tm - assert_raise(..) { .. }" 
	enabled="true" 
	name="asr">assert_raise(${Exception}) { ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_respond_to"
	description="tm - assert_respond_to(..)" 
	enabled="true" 
	name="asrt">assert_respond_to(${object}, :${method})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_same"
	description="tm - assert_same(..)" 
	enabled="true" 
	name="ass">assert_same(${expected}, ${actual})</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_send"
	description="tm - assert_send(..)" 
	enabled="true" 
	name="ass">assert_send([${object}, :${message}, ${args}])</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.assert_throws"
	description="tm - assert_throws(..) { .. }" 
	enabled="true" 
	name="ast">assert_throws(:${expected}) { ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.rdoc"
	description="tm - New Block" 
	enabled="true" 
	name="b">=begin rdoc
	${cursor}
=end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.begin_resuce_end"
	description="tm - begin … rescue … end" 
	enabled="true" 
	name="begin">begin
	${paste}
rescue ${Exception} =&gt; ${e}
	${cursor}
end
</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.case_end"
	description="tm - case … end" 
	enabled="true" 
	name="case">case ${object}
when ${condition}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.classify"
	description="tm - classify { |e| .. }" 
	enabled="true" 
	name="cl">classify { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.delegate_class"
	description="tm - class .. &lt; DelegateClass .. initialize .. end" 
	enabled="true" 
	name="cla">class ${ClassName} &lt; DelegateClass(${ParentClass})
	def initialize${1}
		super(${del_obj})
		
		${cursor}
	end
	
	
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.subclass_stub"
	description="tm - class .. &lt; ParentClass .. initialize .. end" 
	enabled="true" 
	name="cla">class ${ClassName} &lt; ${ParentClass}
	def initialize${1}
		${cursor}
	end
	
	
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.struct_class"
	description="tm - class .. &lt; Struct .. initialize .. end" 
	enabled="true" 
	name="cla">class ${ClassName} &lt; Struct.new(:${attr_names})
	def initialize(*args)
		super
		
		${cursor}
	end
	
	
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.class_stub"
	description="tm - class .. end" 
	enabled="true" 
	name="cla">class ${ClassName}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.class_with_constructor"
	description="tm - class .. initialize .. end" 
	enabled="true" 
	name="cla">class ${ClassName}
	def initialize${1}
		${cursor}
	end
	
	
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.singleton_class"
	description="tm - class &lt;&lt; self .. end" 
	enabled="true" 
	name="cla">class &lt;&lt; ${self}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.blank_slate"
	description="tm - class BlankSlate .. initialize .. end" 
	enabled="true" 
	name="cla">class ${BlankSlate}
	instance_methods.each { |meth| undef_method(meth) unless meth =~ /\A__/ }
	
	def initialize${var}
		@${delegate} = ${delegate_object}
		
		${cursor}
	end
	
	def method_missing(meth, *args, &amp;block)
		@${delegate}.send(meth, *args, &amp;block)
	end
	
	
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.class_from_name"
	description="tm - class_from_name()" 
	enabled="true" 
	name="clafn">split("::").inject(Object) { |par, const| par.const_get(const) }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.class_end"
	description="tm - class … end" 
	enabled="true" 
	name="class">class ${ClassName}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.collect"
	description="tm - collect { |e| .. }" 
	enabled="true" 
	name="col">collect { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.collect_element"
	description="tm - collect element" 
	enabled="true" 
	name="collect">collect { |${element}| ${element}.${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.include_comparable"
	description="tm - include Comparable .." 
	enabled="true" 
	name="Comp">include Comparable

def &lt;=&gt;(other)
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.deep_copy"
	description="tm - deep_copy(..)" 
	enabled="true" 
	name="dee">Marshal.load(Marshal.dump(${obj_to_copy}))</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.def_end"
	description="tm - def … end" 
	enabled="true" 
	name="def">def ${method_name}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.def_delegator"
	description="tm - def_delegator .." 
	enabled="true" 
	name="defd">def_delegator :${del_obj}, :${del_meth}, :${new_name}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.def_delegators"
	description="tm - def_delegators .." 
	enabled="true" 
	name="defds">def_delegators :${del_obj}, :${del_methods}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.deff"
	description="tm - def … end" 
	enabled="true" 
	name="deff">def ${method_name}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false"
	id="org.rubypeople.rdt.ui.templates.tm.defs" 
	description="tm - def self .. end" 
	enabled="true" 
	name="defs">def self.${class_method_name}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.def_test"
	description="tm - def test_ .. end" 
	enabled="true" 
	name="deft">def test_${case_name}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.delete_if"
	description="tm - delete_if { |e| .. }" 
	enabled="true" 
	name="deli">delete_if { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.detect"
	description="tm - detect { |e| .. }" 
	enabled="true" 
	name="det">detect { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.dir_glob"
	description="tm - Dir.glob(&quot;..&quot;) { |file| .. }" 
	enabled="true" 
	name="Dir">Dir.glob(${glob}) { |${file}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.do_end"
	description="tm - do … end" 
	enabled="true" 
	name="do">do
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.do_pipe_end"
	description="tm - Insert do |object| … end" 
	enabled="true" 
	name="doo">do |${object}|
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.downto_0"
	description="tm - downto(0) { |n| .. }" 
	enabled="true" 
	name="dow">downto(${0}) { |${n}|${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_block"
	description="tm - each { |e| .. }" 
	enabled="true" 
	name="ea">each { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_byte"
	description="tm - each_byte { |byte| .. }" 
	enabled="true" 
	name="eab">each_byte { |${byte}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_char"
	description="tm - each_char { |chr| .. }" 
	enabled="true" 
	name="eac">each_char { |${chr}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_cons"
	description="tm - each_cons(..) { |group| .. }" 
	enabled="true" 
	name="eac">each_cons(${2}) { |${group}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_element"
	description="tm - each element" 
	enabled="true" 
	name="each">each { |${element}| ${element}.${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_with_index"
	description="tm - each_with_index" 
	enabled="true" 
	name="each_with_index">each_with_index { |${element}, ${idx}| ${element}.${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_index"
	description="tm - each_index { |i| .. }" 
	enabled="true" 
	name="eai">each_index { |${i}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_key"
	description="tm - each_key { |key| .. }" 
	enabled="true" 
	name="eak">each_key { |${key}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_line"
	description="tm - each_line { |line| .. }" 
	enabled="true" 
	name="eal">each_line${1} { |${line}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_pair"
	description="tm - each_pair { |name, val| .. }" 
	enabled="true" 
	name="eap">each_pair { |${name}, ${val}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_slice"
	description="tm - each_slice(..) { |group| .. }" 
	enabled="true" 
	name="eas">each_slice(${2}) { |${group}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_value"
	description="tm - each_value { |val| .. }" 
	enabled="true" 
	name="eav">each_value { |${val}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.each_with_index2"
	description="tm - each_with_index { |e, i| .. }" 
	enabled="true" 
	name="eawi">each_with_index { |${e}, ${i}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.elsif"
	description="tm - elsif ..." 
	enabled="true" 
	name="elsif">elsif ${condition}
	${cursor}</template>
	
<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.include_Enumerable"
	description="tm - include Enumerable .." 
	enabled="true" 
	name="Enum">include Enumerable

def each(&amp;block)
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.fetch"
	description="tm - fetch(name) { |key| .. }" 
	enabled="true" 
	name="fet">fetch(${name}) { |${key}|${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.fill"
	description="tm - fill(range) { |i| .. }" 
	enabled="true" 
	name="fil">fill(${range}) { |${i}|${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.file_foreach"
	description="tm - File.foreach (&quot;..&quot;) { |line| .. }" 
	enabled="true" 
	name="File">File.foreach(${file}) { |${line}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.find"
	description="tm - find { |e| .. }" 
	enabled="true" 
	name="fin">find { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.find_all"
	description="tm - find_all { |e| .. }" 
	enabled="true" 
	name="fina">find_all { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.flunk"
	description="tm - flunk(..)" 
	enabled="true" 
	name="fl">flunk("${message}")</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.flatten_once"
	description="tm - flatten_once()" 
	enabled="true" 
	name="flao">inject(Array.new) { |${arr}, ${a}| ${arr}.push(*${a}) }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.for_in_end"
	description="tm - for … in … end" 
	enabled="true" 
	name="forin">for ${element} in ${collection}
	${element}.${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.extend_forwardable"
	description="tm - extend Forwardable" 
	enabled="true" 
	name="Forw">extend Forwardable</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.grep"
	description="tm - grep(/pattern/) { |match| .. }" 
	enabled="true" 
	name="gre">grep(${pattern}) { |${match}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.gsub"
	description="tm - gsub(/../) { |match| .. }" 
	enabled="true" 
	name="gsu">gsub(/${pattern}/) { |${match}|${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.hash_new"
	description="tm - Hash.new { |hash, key| hash[key] = .. }" 
	enabled="true" 
	name="Hash">Hash.new { |${hash}, ${key}| ${hash}[${key}] = ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.hash_pair"
	description="tm - Hash Pair — :key =&gt; &quot;value&quot;" 
	enabled="true" 
	name="hp">:${key} =&gt; ${value}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.if_end"
	description="tm - if … end" 
	enabled="true" 
	name="if">if ${condition}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.if_else_end"
	description="tm - if … else … end" 
	enabled="true" 
	name="ife">if ${condition}
	${2}
else
	${3}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.inject"
	description="tm - inject(init) { |mem, var| .. }" 
	enabled="true" 
	name="inj">inject(${init}) { |${mem}, ${var}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.inject_object"
	description="tm - inject object" 
	enabled="true" 
	name="inject">inject(${object}) { |${injection}, ${element}| ${4} }${cursor}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.lambda"
	description="tm - lambda { |args| .. }" 
	enabled="true" 
	name="lam">lambda { |${args}|${cursor} }</template>

<template 
	autoinsert="true"
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.logger_debug"
	description="tm - logger.debug" 
	enabled="true" 
	name="log">logger.debug "${message}"${cursor}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.logger_error"
	description="tm - logger.error" 
	enabled="true" 
	name="loge">logger.error "${message}"${cursor}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.logger_fatal"
	description="tm - logger.fatal" 
	enabled="true" 
	name="logf">logger.fatal "${message}"${cursor}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.logger_info"
	description="tm - logger.info" 
	enabled="true" 
	name="logi">logger.info "${message}"${cursor}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.logger_warn"
	description="tm - logger.warn" 
	enabled="true" 
	name="logw">logger.warn "${message}"${cursor}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.map"
	description="tm - map { |e| .. }" 
	enabled="true" 
	name="map">map { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.map_with_index"
	description="tm - map_with_index { |e, i| .. }" 
	enabled="true" 
	name="mapwi">enum_with_index.map { |${e}, ${i}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.max"
	description="tm - max { |a, b| .. }" 
	enabled="true" 
	name="max">max { |a, b| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.marshal_dump"
	description="tm - Marshal.dump(.., file)" 
	enabled="true" 
	name="Md">File.open(${dump}, "w") { |${file}| Marshal.dump(${obj}, ${file}) }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.min"
	description="tm - min { |a, b| .. }" 
	enabled="true" 
	name="min">min { |a, b| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.marshal_load"
	description="tm - Marshal.load(obj)" 
	enabled="true" 
	name="Ml">File.open(${dump}) { |${file}| Marshal.load(${file}) }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.method_missing"
	description="tm - def method_missing .. end" 
	enabled="true" 
	name="mm">def method_missing(meth, *args, &amp;block)
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.module_class_methods"
	description="tm - module .. ClassMethods .. end" 
	enabled="true" 
	name="mod">module ${ModuleName}
	module ClassMethods
		${cursor}
	end
	
	extend ClassMethods
	
	def self.included(receiver)
		receiver.extend(ClassMethods)
	end
	
	
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.module_end"
	description="tm - module .. end" 
	enabled="true" 
	name="mod">module ${ModuleName}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.module_module_function_end"
	description="tm - module .. module_function .. end" 
	enabled="true" 
	name="mod">module ${ModuleName}
	module_function
	
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.open"
	description="tm - open(&quot;path/or/url&quot;, &quot;w&quot;) { |io| .. }" 
	enabled="true" 
	name="ope">open(${pipe}) { |${io}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	id="org.rubypeople.rdt.ui.templates.tm.option"
	deleted="false" description="tm - option(..)" 
	enabled="true" 
	name="opt">opts.on( "-${o}", "--${option}"${1},
         "${description}" ) do |${opt}|
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.option_parse"
	description="tm - option_parse { .. }" 
	enabled="true" 
	name="optp">require "optparse"
require "ostruct"

options = OpenStruct.new(${default})

ARGV.options do |opts|
	opts.banner = "Usage:  #{File.basename($$PROGRAM_NAME)}  [OPTIONS]${1}"
	
	opts.separator ""
	opts.separator "Specific Options:"
	
	${cursor}
	
	opts.separator "Common Options:"
	
	opts.on( "-h", "--help",
	         "Show this message." ) do
		puts opts
		exit
	end
	
	begin
		opts.parse!
	rescue
		puts opts
		exit
	end
end
</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.partition"
	description="tm - partition { |e| .. }" 
	enabled="true" 
	name="par">partition { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.randomize"
	description="tm - randomize()" 
	enabled="true" 
	name="ran">sort_by { rand }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.shebang"
	description="tm - #!/usr/local/bin/ruby -w" 
	enabled="true" 
	name="rb">#!/usr/bin/env ruby -w

</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.reject"
	description="tm - reject { |e| .. }" 
	enabled="true" 
	name="rej">reject { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.reject_element"
	description="tm - reject element" 
	enabled="true" 
	name="reject">reject { |${element}| ${element}.${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.results_report"
	description="tm - results.report(..) { .. }" 
	enabled="true" 
	name="rep">results.report("${name}:") { TESTS.times { ${cursor} } }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.require"
	description="tm - require &quot;..&quot;" 
	enabled="true" 
	name="req">require "${cursor}"</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.reverse_each"
	description="tm - reverse_each { |e| .. }" 
	enabled="true" 
	name="reve">reverse_each { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.attr_reader"
	description="tm - attr_reader .." 
	enabled="true" 
	name="ro">attr_reader :${attr_names}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.attr_accessor"
	description="tm - attr_accessor .." 
	enabled="true" 
	name="rw">attr_accessor :${attr_names}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.scan"
	description="tm - scan(/../) { |match| .. }" 
	enabled="true" 
	name="sca">scan(/${pattern}/) { |${match}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby"
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.select"
	description="tm - select { |e| .. }" 
	enabled="true" 
	name="sel">select { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.select_element"
	description="tm - select element" 
	enabled="true" 
	name="select">select { |${element}| ${element}.${2} }${cursor}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.singleton_class"
	description="tm - singleton_class()" 
	enabled="true" 
	name="sin">class &lt;&lt; self; self end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.sort"
	description="tm - sort { |a, b| .. }" 
	enabled="true" 
	name="sor">sort { |a, b| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.sort_by"
	description="tm - sort_by { |e| .. }" 
	enabled="true" 
	name="sorb">sort_by { |${e}| ${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.step"
	description="tm - step(2) { |e| .. }" 
	enabled="true" 
	name="ste">step(${2}) { |${n}|${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.sub"
	description="tm - sub(/../) { |match| .. }" 
	enabled="true" 
	name="sub">sub(/${pattern}/) { |${match}|${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.testcase"
	description="tm - class .. &lt; Test::Unit::TestCase .. end" 
	enabled="true" 
	name="tc">require "test/unit"

require "${library_file_name}"

class Test${amp} &lt; Test::Unit::TestCase
	def test_${case_name}
		${cursor}
	end
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.times"
	description="tm - times { |n| .. }" 
	enabled="true" 
	name="tim">times { |${n}|${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.testsuite"
	description="tm - require &quot;tc_..&quot; .." 
	enabled="true" 
	name="ts">require "test/unit"

require "tc_${test_case_file}"
require "tc_${test_case_file}"
</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.argf_each_line"
	description="tm - unix_filter { .. }" 
	enabled="true" 
	name="uni">ARGF.each_line${1} do |${line}|
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.unless_end"
	description="tm - unless … end" 
	enabled="true" 
	name="unless">unless ${condition}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.until_end"
	description="tm - until ... end" 
	enabled="true" 
	name="until">until ${condition}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.upto"
	description="tm - upto(1.0/0.0) { |n| .. }" 
	enabled="true" 
	name="upt">upto(${0}) { |${n}|${cursor} }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.usage_if"
	description="tm - usage_if()" 
	enabled="true" 
	name="usai">if ARGV.${1}
  puts "Usage:  #{$$PROGRAM_NAME} ${ARGS_GO_HERE}"
  exit
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.usage_unless"
	description="tm - usage_unless()" 
	enabled="true" 
	name="usau">unless ARGV.${1}
  puts "Usage:  #{$$PROGRAM_NAME} ${ARGS_GO_HERE}"
  exit
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false"
	id="org.rubypeople.rdt.ui.templates.tm.when" 
	description="tm - when …" 
	enabled="true" 
	name="when">when ${condition}
	${cursor}</template>
	
<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.while_end"
	description="tm - while ... end" 
	enabled="true" 
	name="while">while ${condition}
	${cursor}
end</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.attr_writer"
	description="tm - attr_writer .." 
	enabled="true" 
	name="wo">attr_writer :${attr_names}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.yaml_dump"
	description="tm - YAML.dump(.., file)" 
	enabled="true" 
	name="Yd">File.open(${yaml}, "w") { |${file}| YAML.dump(${obj}, ${file}) }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.rdoc_yields"
	description="tm - :yields: for Rdoc" 
	enabled="true" 
	name="yields"> :yields: ${arguments}</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.yaml_load"
	description="tm - YAML.load(file)" 
	enabled="true" 
	name="Yl">File.open(${yaml}) { |${file}| YAML.load(${file}) }</template>

<template 
	autoinsert="true" 
	context="ruby" 
	deleted="false" 
	id="org.rubypeople.rdt.ui.templates.tm.zip"
	description="tm - zip(enums) { |row| .. }" 
	enabled="true" 
	name="zip">zip(${enums}) { |${row}| ${cursor} }</template>
</templates>
