//
// this file is automatically generated
//
package org.marketcetera.trade.pnl;

/* $License$ */

/**
 * Indicates a trade that took place at a particular point in time for a particular amount and price.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
public class SimpleTrade
        implements Trade
{
    /**
     * Create a new SimpleTrade instance.
     */
    public SimpleTrade() {}
    /**
     * Create a new SimpleTrade instance.
     *
     * @param inTrade a <code>Trade</code> value
     */
    public SimpleTrade(Trade inTrade)
    {
        setInstrument(inTrade.getInstrument());
        setExecutionId(inTrade.getExecutionId());
        setPrice(inTrade.getPrice());
        setQuantity(inTrade.getQuantity());
        setTransactionTime(inTrade.getTransactionTime());
    }
    /**
     * Get the instrument value.
     *
     * @return a <code>org.marketcetera.trade.Instrument</code> value
     */
    @Override
    public org.marketcetera.trade.Instrument getInstrument()
    {
        return instrument;
    }
    /**
     * Set the instrument value.
     *
     * @param inInstrument a <code>org.marketcetera.trade.Instrument</code> value
     */
    @Override
    public void setInstrument(org.marketcetera.trade.Instrument inInstrument)
    {
        instrument = inInstrument;
    }
    /**
     * Get the executionId value.
     *
     * @return a <code>org.marketcetera.trade.OrderID</code> value
     */
    @Override
    public org.marketcetera.trade.OrderID getExecutionId()
    {
        return executionId;
    }
    /**
     * Set the executionId value.
     *
     * @param inExecutionId a <code>org.marketcetera.trade.OrderID</code> value
     */
    @Override
    public void setExecutionId(org.marketcetera.trade.OrderID inExecutionId)
    {
        executionId = inExecutionId;
    }
    /**
     * Get the price value.
     *
     * @return a <code>java.math.BigDecimal</code> value
     */
    @Override
    public java.math.BigDecimal getPrice()
    {
        return price;
    }
    /**
     * Set the price value.
     *
     * @param inPrice a <code>java.math.BigDecimal</code> value
     */
    @Override
    public void setPrice(java.math.BigDecimal inPrice)
    {
        price = inPrice == null ? java.math.BigDecimal.ZERO : inPrice;
    }
    /**
     * Get the quantity value.
     *
     * @return a <code>java.math.BigDecimal</code> value
     */
    @Override
    public java.math.BigDecimal getQuantity()
    {
        return quantity;
    }
    /**
     * Set the quantity value.
     *
     * @param inQuantity a <code>java.math.BigDecimal</code> value
     */
    @Override
    public void setQuantity(java.math.BigDecimal inQuantity)
    {
        quantity = inQuantity == null ? java.math.BigDecimal.ZERO : inQuantity;
    }
    /**
     * Get the transactionTime value.
     *
     * @return a <code>java.util.Date</code> value
     */
    @Override
    public java.util.Date getTransactionTime()
    {
        return transactionTime;
    }
    /**
     * Set the transactionTime value.
     *
     * @param inTransactionTime a <code>java.util.Date</code> value
     */
    @Override
    public void setTransactionTime(java.util.Date inTransactionTime)
    {
        transactionTime = inTransactionTime;
    }
    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString()
    {
        StringBuilder builder = new StringBuilder();
        builder.append("Trade [")
            .append("instrument=").append(instrument)
            .append(", executionId=").append(executionId)
            .append(", price=").append(org.marketcetera.core.BigDecimalUtil.renderCurrency(price))
            .append(", quantity=").append(org.marketcetera.core.BigDecimalUtil.render(quantity))
            .append(", transactionTime=").append(transactionTime).append("]");
        return builder.toString();
    }
    /**
     * position instrument value
     */
    private org.marketcetera.trade.Instrument instrument;
    /**
     * exchange execution id that uniquely identifies this trade
     */
    private org.marketcetera.trade.OrderID executionId;
    /**
     * price at which trade occurred
     */
    private java.math.BigDecimal price = java.math.BigDecimal.ZERO;
    /**
     * size of trade
     */
    private java.math.BigDecimal quantity = java.math.BigDecimal.ZERO;
    /**
     * transaction date
     */
    private java.util.Date transactionTime;
}
