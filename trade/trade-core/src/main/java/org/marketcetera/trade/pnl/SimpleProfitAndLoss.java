//
// this file is automatically generated
//
package org.marketcetera.trade.pnl;

/* $License$ */

/**
 * Indicates profit and loss for a user-instrument tuple.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
public class SimpleProfitAndLoss
        implements ProfitAndLoss
{
    /**
     * Create a new SimpleProfitAndLoss instance.
     */
    public SimpleProfitAndLoss() {}
    /**
     * Create a new SimpleProfitAndLoss instance.
     *
     * @param inProfitAndLoss a <code>ProfitAndLoss</code> value
     */
    public SimpleProfitAndLoss(ProfitAndLoss inProfitAndLoss)
    {
        setInstrument(inProfitAndLoss.getInstrument());
        setUser(inProfitAndLoss.getUser());
        setRealizedGain(inProfitAndLoss.getRealizedGain());
        setUnrealizedGain(inProfitAndLoss.getUnrealizedGain());
        setBasisPrice(inProfitAndLoss.getBasisPrice());
        setPosition(inProfitAndLoss.getPosition());
    }
    /**
     * Get the instrument value.
     *
     * @return a <code>org.marketcetera.trade.Instrument</code> value
     */
    @Override
    public org.marketcetera.trade.Instrument getInstrument()
    {
        return instrument;
    }
    /**
     * Set the instrument value.
     *
     * @param inInstrument a <code>org.marketcetera.trade.Instrument</code> value
     */
    @Override
    public void setInstrument(org.marketcetera.trade.Instrument inInstrument)
    {
        instrument = inInstrument;
    }
    /**
     * Get the user value.
     *
     * @return a <code>org.marketcetera.admin.User</code> value
     */
    @Override
    public org.marketcetera.admin.User getUser()
    {
        return user;
    }
    /**
     * Set the user value.
     *
     * @param inUser a <code>org.marketcetera.admin.User</code> value
     */
    @Override
    public void setUser(org.marketcetera.admin.User inUser)
    {
        user = inUser;
    }
    /**
     * Get the realizedGain value.
     *
     * @return a <code>java.math.BigDecimal</code> value
     */
    @Override
    public java.math.BigDecimal getRealizedGain()
    {
        return realizedGain;
    }
    /**
     * Set the realizedGain value.
     *
     * @param inRealizedGain a <code>java.math.BigDecimal</code> value
     */
    @Override
    public void setRealizedGain(java.math.BigDecimal inRealizedGain)
    {
        realizedGain = inRealizedGain == null ? java.math.BigDecimal.ZERO : inRealizedGain;
    }
    /**
     * Get the unrealizedGain value.
     *
     * @return a <code>java.math.BigDecimal</code> value
     */
    @Override
    public java.math.BigDecimal getUnrealizedGain()
    {
        return unrealizedGain;
    }
    /**
     * Set the unrealizedGain value.
     *
     * @param inUnrealizedGain a <code>java.math.BigDecimal</code> value
     */
    @Override
    public void setUnrealizedGain(java.math.BigDecimal inUnrealizedGain)
    {
        unrealizedGain = inUnrealizedGain == null ? java.math.BigDecimal.ZERO : inUnrealizedGain;
    }
    /**
     * Get the basisPrice value.
     *
     * @return a <code>java.math.BigDecimal</code> value
     */
    @Override
    public java.math.BigDecimal getBasisPrice()
    {
        return basisPrice;
    }
    /**
     * Set the basisPrice value.
     *
     * @param inBasisPrice a <code>java.math.BigDecimal</code> value
     */
    @Override
    public void setBasisPrice(java.math.BigDecimal inBasisPrice)
    {
        basisPrice = inBasisPrice == null ? java.math.BigDecimal.ZERO : inBasisPrice;
    }
    /**
     * Get the position value.
     *
     * @return a <code>java.math.BigDecimal</code> value
     */
    @Override
    public java.math.BigDecimal getPosition()
    {
        return position;
    }
    /**
     * Set the position value.
     *
     * @param inPosition a <code>java.math.BigDecimal</code> value
     */
    @Override
    public void setPosition(java.math.BigDecimal inPosition)
    {
        position = inPosition == null ? java.math.BigDecimal.ZERO : inPosition;
    }
    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString()
    {
        StringBuilder builder = new StringBuilder();
        builder.append("ProfitAndLoss [")
            .append("instrument=").append(instrument)
            .append(", user=").append(user)
            .append(", realizedGain=").append(org.marketcetera.core.BigDecimalUtil.renderCurrency(realizedGain))
            .append(", unrealizedGain=").append(org.marketcetera.core.BigDecimalUtil.renderCurrency(unrealizedGain))
            .append(", basisPrice=").append(org.marketcetera.core.BigDecimalUtil.renderCurrency(basisPrice))
            .append(", position=").append(org.marketcetera.core.BigDecimalUtil.render(position)).append("]");
        return builder.toString();
    }
    /**
     * position instrument value
     */
    private org.marketcetera.trade.Instrument instrument;
    /**
     * user which owns lot
     */
    private org.marketcetera.admin.User user;
    /**
     * realized gain value
     */
    private java.math.BigDecimal realizedGain = java.math.BigDecimal.ZERO;
    /**
     * unrealized gain value
     */
    private java.math.BigDecimal unrealizedGain = java.math.BigDecimal.ZERO;
    /**
     * basis price value
     */
    private java.math.BigDecimal basisPrice = java.math.BigDecimal.ZERO;
    /**
     * position as a result of this transaction
     */
    private java.math.BigDecimal position = java.math.BigDecimal.ZERO;
}
