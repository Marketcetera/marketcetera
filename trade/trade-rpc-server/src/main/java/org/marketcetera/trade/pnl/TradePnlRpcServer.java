//
// this file is automatically generated
//
package org.marketcetera.trade.pnl;

/* $License$ */

/**
 * Provides an RPC Server for TradePnlRpc services.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
public class TradePnlRpcServer<SessionClazz>
        extends org.marketcetera.rpc.server.AbstractRpcService<SessionClazz,org.marketcetera.trade.pnl.TradePnlRpcServiceGrpc.TradePnlRpcServiceImplBase>
{
    /* (non-Javadoc)
    * @see org.marketcetera.rpc.server.AbstractRpcService#getServiceDescription()
    */
    @Override
    protected String getServiceDescription()
    {
        return description;
    }
    /* (non-Javadoc)
    * @see org.marketcetera.rpc.server.AbstractRpcService#getService()
    */
    @Override
    protected org.marketcetera.trade.pnl.TradePnlRpcServiceGrpc.TradePnlRpcServiceImplBase getService()
    {
        return service;
    }
    /**
     * Validate and start the object.
     */
    @javax.annotation.PostConstruct
    public void start()
            throws Exception
    {
        service = new Service();
        super.start();
    }
    /**
     * TradePnlRpc Service implementation.
     *
     * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
     * @version $Id$
     * @since $Release$
     */
    private class Service
            extends org.marketcetera.trade.pnl.TradePnlRpcServiceGrpc.TradePnlRpcServiceImplBase
    {
        /* (non-Javadoc)
         * @see org.marketcetera.trade.pnl.TradePnlRpcServiceGrpc.TradePnlRpcServiceImplBase#login(org.marketcetera.rpc.base.BaseRpc.LoginRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void login(org.marketcetera.rpc.base.BaseRpc.LoginRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.LoginResponse> inResponseObserver)
        {
            TradePnlRpcServer.this.doLogin(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.trade.pnl.TradePnlRpcServiceGrpc.TradePnlRpcServiceImplBase#logout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void logout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.LogoutResponse> inResponseObserver)
        {
            TradePnlRpcServer.this.doLogout(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.trade.pnl.TradePnlRpcServiceGrpc.TradePnlRpcServiceImplBase#heartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void heartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.HeartbeatResponse> inResponseObserver)
        {
            TradePnlRpcServer.this.doHeartbeat(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.trade.pnl.TradePnlRpcServiceGrpc.TradePnlRpcServiceImplBase#getCurrentPositions(org.marketcetera.trade.pnl.TradePnlRpc.CurrentPositionsRequest ,io.grpc.stub.StreamObserver)
         */
        @Override
        public void getCurrentPositions(org.marketcetera.trade.pnl.TradePnlRpc.CurrentPositionsRequest inCurrentPositionsRequest,io.grpc.stub.StreamObserver<org.marketcetera.trade.pnl.TradePnlRpc.CurrentPositionsResponse> inResponseObserver)
        {
            try {
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(TradePnlRpcServer.this,"Received {}",inCurrentPositionsRequest);
                org.marketcetera.util.ws.stateful.SessionHolder<SessionClazz> sessionHolder = validateAndReturnSession(inCurrentPositionsRequest.getSessionId());
                authzService.authorize(sessionHolder.getUser(),TradePnlPermissions.ReadCurrentPositions.name());
                org.marketcetera.trade.pnl.TradePnlRpc.CurrentPositionsResponse.Builder responseBuilder = org.marketcetera.trade.pnl.TradePnlRpc.CurrentPositionsResponse.newBuilder();
                org.marketcetera.trade.UserID userID = org.marketcetera.admin.rpc.AdminRpcUtil.getUserId(inCurrentPositionsRequest.getUserId()).orElse(null);
                org.marketcetera.persist.PageRequest pageRequest = inCurrentPositionsRequest.hasPageRequest()?org.marketcetera.rpc.paging.PagingRpcUtil.getPageRequest(inCurrentPositionsRequest.getPageRequest()):org.marketcetera.persist.PageRequest.ALL;
                org.marketcetera.persist.CollectionPageResponse<org.marketcetera.trade.pnl.CurrentPosition> serviceData = tradePnlService.getCurrentPositions(userID,pageRequest);
                responseBuilder.setPageResponse(org.marketcetera.rpc.paging.PagingRpcUtil.getPageResponse(pageRequest,serviceData));
                org.marketcetera.trade.pnl.TradePnlRpc.CurrentPositionsResponse response = responseBuilder.build();
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(TradePnlRpcServer.this,"Responding {}",response);
                inResponseObserver.onNext(response);
                inResponseObserver.onCompleted();
            } catch (Exception e) {
                handleError(e,inResponseObserver);
            }
        }
        /* (non-Javadoc)
         * @see org.marketcetera.trade.pnl.TradePnlRpcServiceGrpc.TradePnlRpcServiceImplBase#getProfitAndLoss(org.marketcetera.trade.pnl.TradePnlRpc.ProfitAndLossRequest ,io.grpc.stub.StreamObserver)
         */
        @Override
        public void getProfitAndLoss(org.marketcetera.trade.pnl.TradePnlRpc.ProfitAndLossRequest inProfitAndLossRequest,io.grpc.stub.StreamObserver<org.marketcetera.trade.pnl.TradePnlRpc.ProfitAndLossResponse> inResponseObserver)
        {
            try {
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(TradePnlRpcServer.this,"Received {}",inProfitAndLossRequest);
                org.marketcetera.util.ws.stateful.SessionHolder<SessionClazz> sessionHolder = validateAndReturnSession(inProfitAndLossRequest.getSessionId());
                org.marketcetera.trade.pnl.TradePnlRpc.ProfitAndLossResponse.Builder responseBuilder = org.marketcetera.trade.pnl.TradePnlRpc.ProfitAndLossResponse.newBuilder();
                org.marketcetera.trade.UserID userID = org.marketcetera.admin.rpc.AdminRpcUtil.getUserId(inProfitAndLossRequest.getUserId()).orElse(null);
                org.marketcetera.trade.Instrument instrument = org.marketcetera.trading.rpc.TradeRpcUtil.getInstrument(inProfitAndLossRequest.getInstrument()).orElse(null);
                org.marketcetera.persist.PageRequest pageRequest = inProfitAndLossRequest.hasPageRequest()?org.marketcetera.rpc.paging.PagingRpcUtil.getPageRequest(inProfitAndLossRequest.getPageRequest()):org.marketcetera.persist.PageRequest.ALL;
                org.marketcetera.persist.CollectionPageResponse<org.marketcetera.trade.pnl.ProfitAndLoss> serviceData = tradePnlService.getProfitAndLoss(userID,instrument,pageRequest);
                responseBuilder.setPageResponse(org.marketcetera.rpc.paging.PagingRpcUtil.getPageResponse(pageRequest,serviceData));
                org.marketcetera.trade.pnl.TradePnlRpc.ProfitAndLossResponse response = responseBuilder.build();
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(TradePnlRpcServer.this,"Responding {}",response);
                inResponseObserver.onNext(response);
                inResponseObserver.onCompleted();
            } catch (Exception e) {
                handleError(e,inResponseObserver);
            }
        }
    }
    /**
     * provides access to authorization services
     */
    @org.springframework.beans.factory.annotation.Autowired
    private org.marketcetera.admin.service.AuthorizationService authzService;
    /**
     * provides services for Trade PnL
     */
    @org.springframework.beans.factory.annotation.Autowired
    private org.marketcetera.trade.pnl.TradePnlService tradePnlService;
    /**
     * provides the RPC service
     */
    private Service service;
    /**
     * description of this service
     */
    private final static String description = "TradePnl RPC Service";
}
