//
// this file is automatically generated
//
package org.marketcetera.eventbus.data.event;

import java.util.Optional;

import org.marketcetera.core.Preserve;
import org.marketcetera.rpc.base.BaseRpcUtil;
import org.marketcetera.util.log.SLF4JLoggerProxy;

/* $License$ */

/**
 * Provides common behavior for DataEvent services.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
@Preserve
public abstract class DataEventRpcUtil
{
    /**
     * Get the RPC object from the given value.
     *
     * @param inDataEvent a <code>DataEvent</code> value
     * @return an <code>Optional&lt;DataEventRpc.DataEvent&gt;</code> value
     */
    public static Optional<DataEventRpc.DataEvent> getRpcDataEvent(DataEvent inDataEvent)
    {
        if(inDataEvent == null) {
            return Optional.empty();
        }
        DataEventRpc.DataEvent.Builder builder = DataEventRpc.DataEvent.newBuilder();
        builder.setId(inDataEvent.getId());
        BaseRpcUtil.getTimestampValue(inDataEvent.getTimestamp()).ifPresent(value->builder.setTimestamp(value));
        BaseRpcUtil.getClassnameValue(inDataEvent.getClass()).ifPresent(value->builder.setType(value));
        return Optional.of(builder.build());
    }
    /**
     * Get the object from the given RPC value.
     *
     * @param inDataEventChangeType a <code>DataEventRpc.DataEventChangeType</code> value
     * @return an <code>Optional&lt;DataEventChangeType&gt;</code> value
     */
    public static Optional<DataEventChangeType> getDataEventChangeType(DataEventRpc.DataEventChangeType inDataEventChangeType)
    {
        if(inDataEventChangeType == null) {
            return Optional.empty();
        }
        return Optional.of(DataEventChangeType.values()[inDataEventChangeType.getNumber()]);
    }
    /**
     * Get the RPC value from the given object.
     *
     * @param inRpcDataEventChangeType a <code>DataEventChangeType</code> value
     * @return an <code>Optional&lt;DataEventRpc.DataEventChangeType&gt;</code> value
     */
    public static Optional<DataEventRpc.DataEventChangeType> getRpcDataEventChangeType(DataEventChangeType inRpcDataEventChangeType)
    {
        if(inRpcDataEventChangeType == null) {
            return Optional.empty();
        }
        return Optional.of(DataEventRpc.DataEventChangeType.forNumber(inRpcDataEventChangeType.ordinal()));
    }
    /**
     * Get the object from the given RPC value.
     *
     * @param inDataEvent a <code>DataEventRpc.DataEvent</code> value
     * @return an <code>Optional&lt;DataEvent&gt;</code> value
     */
    public static Optional<DataEvent> getDataEvent(DataEventRpc.DataEvent inDataEvent)
    {
        if(inDataEvent == null) {
            return Optional.empty();
        }
        final DataEvent dataEvent;
        try {
            dataEvent = (DataEvent)Class.forName(inDataEvent.getType()).newInstance();
        } catch (Exception e) {
            SLF4JLoggerProxy.warn(DataEventRpcUtil.class,
                                  e);
            return Optional.empty();
        }
        dataEvent.setId(inDataEvent.getId());
        BaseRpcUtil.getDateValue(inDataEvent.getTimestamp()).ifPresent(value->dataEvent.setTimestamp(value));
        BaseRpcUtil.getClassValue(inDataEvent.getType()).ifPresent(value->dataEvent.setType(value));
        return Optional.of(dataEvent);
    }
}
