//
// this file is automatically generated
//
package org.marketcetera.eventbus.data;

/* $License$ */

/**
 * Provides common behavior for DataEvent services.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
public abstract class DataEventRpcUtil
{
    /**
     * Get the RPC object from the given value.
     *
     * @param inDataEvent a <code>org.marketcetera.eventbus.data.DataEvent</code> value
     * @return a java.util.Optional<DataEventRpc.DataEvent> value
     */
    public static java.util.Optional<DataEventRpc.DataEvent> getRpcDataEvent(org.marketcetera.eventbus.data.DataEvent inDataEvent)
    {
        if(inDataEvent == null) {
            return java.util.Optional.empty();
        }
        DataEventRpc.DataEvent.Builder builder = DataEventRpc.DataEvent.newBuilder();
        builder.setId(inDataEvent.getId());
        org.marketcetera.rpc.base.BaseRpcUtil.getTimestampValue(inDataEvent.getTimestamp()).ifPresent(value->builder.setTimestamp(value));
        org.marketcetera.rpc.base.BaseRpcUtil.getClassnameValue(inDataEvent.getType()).ifPresent(value->builder.setType(value));
        return java.util.Optional.of(builder.build());
    }
    /**
     * Get the object from the given RPC value.
     *
     * @param inDataEventChangeType a <code>org.marketcetera.eventbus.data.DataEventRpc.DataEventChangeType</code> value
     * @return a org.marketcetera.eventbus.data.DataEventChangeType value
     */
    public static java.util.Optional<org.marketcetera.eventbus.data.DataEventChangeType> getDataEventChangeType(org.marketcetera.eventbus.data.DataEventRpc.DataEventChangeType inDataEventChangeType)
    {
        if(inDataEventChangeType == null) {
            return java.util.Optional.empty();
        }
        return java.util.Optional.of(org.marketcetera.eventbus.data.DataEventChangeType.values()[inDataEventChangeType.getNumber()]);
    }
    /**
     * Get the RPC value from the given object.
     *
     * @param inRpcDataEventChangeType a <code>org.marketcetera.eventbus.data.DataEventChangeType</code> value
     * @return a org.marketcetera.eventbus.data.DataEventRpc.DataEventChangeType value
     */
    public static java.util.Optional<org.marketcetera.eventbus.data.DataEventRpc.DataEventChangeType> getRpcDataEventChangeType(org.marketcetera.eventbus.data.DataEventChangeType inRpcDataEventChangeType)
    {
        if(inRpcDataEventChangeType == null) {
            return java.util.Optional.empty();
        }
        return java.util.Optional.of(org.marketcetera.eventbus.data.DataEventRpc.DataEventChangeType.forNumber(inRpcDataEventChangeType.ordinal()));
    }
    /**
     * Get the object from the given RPC value.
     *
     * @param inDataEvent a <code>org.marketcetera.eventbus.data.DataEventRpc.DataEvent</code> value
     * @param inDataEventFactory a <code>org.marketcetera.eventbus.data.DataEventFactory</code> value
     * @return a org.marketcetera.eventbus.data.DataEvent value
     */
    public static java.util.Optional<org.marketcetera.eventbus.data.DataEvent> getDataEvent(org.marketcetera.eventbus.data.DataEventRpc.DataEvent inDataEvent,org.marketcetera.eventbus.data.DataEventFactory inDataEventFactory)
    {
        if(inDataEvent == null) {
            return java.util.Optional.empty();
        }
        org.marketcetera.eventbus.data.DataEvent dataEvent = inDataEventFactory.create();
        dataEvent.setId(inDataEvent.getId());
        org.marketcetera.rpc.base.BaseRpcUtil.getDateValue(inDataEvent.getTimestamp()).ifPresent(value->dataEvent.setTimestamp(value));
        org.marketcetera.rpc.base.BaseRpcUtil.getClassValue(inDataEvent.getType()).ifPresent(value->dataEvent.setType(value));
        return java.util.Optional.of(dataEvent);
    }
}
