//
// this file is automatically generated
//
package org.marketcetera.eventbus.data.event;

/* $License$ */

/**
 * Provides an RPC Server for DataEventRpc services.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
public class DataEventRpcServer<SessionClazz>
        extends org.marketcetera.rpc.server.AbstractRpcService<SessionClazz,org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase>
{
    /* (non-Javadoc)
    * @see org.marketcetera.rpc.server.AbstractRpcService#getServiceDescription()
    */
    @Override
    protected String getServiceDescription()
    {
        return description;
    }
    /* (non-Javadoc)
    * @see org.marketcetera.rpc.server.AbstractRpcService#getService()
    */
    @Override
    protected org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase getService()
    {
        return service;
    }
    /**
     * Validate and start the object.
     */
    @javax.annotation.PostConstruct
    public void start()
            throws Exception
    {
        service = new Service();
        super.start();
    }
    /**
     * DataEventRpc Service implementation.
     *
     * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
     * @version $Id$
     * @since $Release$
     */
    private class Service
            extends org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase
    {
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase#login(org.marketcetera.rpc.base.BaseRpc.LoginRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void login(org.marketcetera.rpc.base.BaseRpc.LoginRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.LoginResponse> inResponseObserver)
        {
            DataEventRpcServer.this.doLogin(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase#logout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void logout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.LogoutResponse> inResponseObserver)
        {
            DataEventRpcServer.this.doLogout(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase#heartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void heartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.HeartbeatResponse> inResponseObserver)
        {
            DataEventRpcServer.this.doHeartbeat(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase#subscribeToDataEvents(org.marketcetera.eventbus.data.event.DataEventRpc.DataEventRequest ,io.grpc.stub.StreamObserver)
         */
        @Override
        public void subscribeToDataEvents(org.marketcetera.eventbus.data.event.DataEventRpc.DataEventRequest inDataEventRequest,io.grpc.stub.StreamObserver<org.marketcetera.eventbus.data.event.DataEventRpc.DataEventResponse> inResponseObserver)
        {
            try {
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(DataEventRpcServer.this,"Received {}",inDataEventRequest);
                org.marketcetera.util.ws.stateful.SessionHolder<SessionClazz> sessionHolder = validateAndReturnSession(inDataEventRequest.getSessionId());
                org.marketcetera.eventbus.data.event.DataEventRpc.DataEventResponse.Builder responseBuilder = org.marketcetera.eventbus.data.event.DataEventRpc.DataEventResponse.newBuilder();
                String string = null(inDataEventRequest.getRequestId()).orElse(null);
                java.util.List<Class<?>> class<?s = com.google.common.collect.Lists.newArrayList();
                inDataEventRequest.getRequestTypesList().forEach(rpcValue->null(rpcValue).ifPresent(javaValue->class<?s.add(javaValue)));
                java.util.function.Consumer<DataEvent> consumer<DataEvent = null(inDataEventRequest.getConsumer()).orElse(null);
                dataEventService.subscribeToDataEvents(string,class<?s,consumer<DataEvent);
                org.marketcetera.eventbus.data.event.DataEventRpc.DataEventResponse response = responseBuilder.build();
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(DataEventRpcServer.this,"Responding {}",response);
                inResponseObserver.onNext(response);
                inResponseObserver.onCompleted();
            } catch (Exception e) {
                handleError(e,inResponseObserver);
            }
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase#unSubscribeToDataEvents(org.marketcetera.eventbus.data.event.DataEventRpc.DataEventRequestCancel ,io.grpc.stub.StreamObserver)
         */
        @Override
        public void unSubscribeToDataEvents(org.marketcetera.eventbus.data.event.DataEventRpc.DataEventRequestCancel inDataEventRequestCancel,io.grpc.stub.StreamObserver<org.marketcetera.eventbus.data.event.DataEventRpc.DataEventCancelResponse> inResponseObserver)
        {
            try {
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(DataEventRpcServer.this,"Received {}",inDataEventRequestCancel);
                org.marketcetera.util.ws.stateful.SessionHolder<SessionClazz> sessionHolder = validateAndReturnSession(inDataEventRequestCancel.getSessionId());
                org.marketcetera.eventbus.data.event.DataEventRpc.DataEventCancelResponse.Builder responseBuilder = org.marketcetera.eventbus.data.event.DataEventRpc.DataEventCancelResponse.newBuilder();
                String string = null(inDataEventRequestCancel.getRequestId()).orElse(null);
                dataEventService.unSubscribeToDataEvents(string);
                org.marketcetera.eventbus.data.event.DataEventRpc.DataEventCancelResponse response = responseBuilder.build();
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(DataEventRpcServer.this,"Responding {}",response);
                inResponseObserver.onNext(response);
                inResponseObserver.onCompleted();
            } catch (Exception e) {
                handleError(e,inResponseObserver);
            }
        }
    }
    /**
     * provides services for data events
     */
    @org.springframework.beans.factory.annotation.Autowired
    private org.marketcetera.eventbus.data.event.DataEventService dataEventService;
    /**
     * provides the RPC service
     */
    private Service service;
    /**
     * description of this service
     */
    private final static String description = "DataEvent RPC Service";
}
