//
// this file is automatically generated
//
package org.marketcetera.eventbus.event;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.marketcetera.core.Preserve;
import org.marketcetera.eventbus.EventBusService;
import org.marketcetera.eventbus.event.EventbusRpc.AddEventListenerRequest;
import org.marketcetera.eventbus.event.EventbusRpc.EventResponse;
import org.marketcetera.eventbus.event.EventbusRpc.RemoveEventListenerRequest;
import org.marketcetera.eventbus.event.EventbusRpc.RemoveEventListenerResponse;
import org.marketcetera.rpc.base.BaseRpcUtil;
import org.marketcetera.util.log.SLF4JLoggerProxy;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.eventbus.Subscribe;

import io.grpc.StatusRuntimeException;
import io.grpc.stub.StreamObserver;

/* $License$ */

/**
 * Provides an RPC Server for EventbusRpc services.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
@Preserve
public class EventbusRpcServer<SessionClazz>
        extends org.marketcetera.rpc.server.AbstractRpcService<SessionClazz,org.marketcetera.eventbus.event.EventbusRpcServiceGrpc.EventbusRpcServiceImplBase>
{
    /* (non-Javadoc)
    * @see org.marketcetera.rpc.server.AbstractRpcService#getServiceDescription()
    */
    @Override
    protected String getServiceDescription()
    {
        return description;
    }
    /* (non-Javadoc)
    * @see org.marketcetera.rpc.server.AbstractRpcService#getService()
    */
    @Override
    protected org.marketcetera.eventbus.event.EventbusRpcServiceGrpc.EventbusRpcServiceImplBase getService()
    {
        return service;
    }
    /**
     * Validate and start the object.
     */
    @javax.annotation.PostConstruct
    public void start()
            throws Exception
    {
        service = new Service();
        super.start();
    }
    /**
     * EventbusRpc Service implementation.
     *
     * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
     * @version $Id$
     * @since $Release$
     */
    private class Service
            extends org.marketcetera.eventbus.event.EventbusRpcServiceGrpc.EventbusRpcServiceImplBase
    {
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.event.EventbusRpcServiceGrpc.EventbusRpcServiceImplBase#login(org.marketcetera.rpc.base.BaseRpc.LoginRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void login(org.marketcetera.rpc.base.BaseRpc.LoginRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.LoginResponse> inResponseObserver)
        {
            EventbusRpcServer.this.doLogin(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.event.EventbusRpcServiceGrpc.EventbusRpcServiceImplBase#logout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void logout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.LogoutResponse> inResponseObserver)
        {
            EventbusRpcServer.this.doLogout(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.event.EventbusRpcServiceGrpc.EventbusRpcServiceImplBase#heartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void heartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest inRequest,io.grpc.stub.StreamObserver<org.marketcetera.rpc.base.BaseRpc.HeartbeatResponse> inResponseObserver)
        {
            EventbusRpcServer.this.doHeartbeat(inRequest,inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.event.EventbusRpcServiceGrpc.EventbusRpcServiceImplBase#addEventListener(org.marketcetera.eventbus.event.EventbusRpc.AddEventListenerRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void addEventListener(AddEventListenerRequest inRequest,
                                     StreamObserver<EventResponse> inResponseObserver)
        {
            try {
                validateAndReturnSession(inRequest.getSessionId());
                SLF4JLoggerProxy.trace(EventbusRpcServer.this,
                                       "Received add event listener request {}",
                                       inRequest);
                String listenerId = inRequest.getListenerId();
                BaseRpcUtil.AbstractServerListenerProxy<?> eventListenerProxy = listenerProxiesById.getIfPresent(listenerId);
                if(eventListenerProxy == null) {
                    eventListenerProxy = new EventbusEventListenerProxy(listenerId,
                                                                        inResponseObserver);
                    listenerProxiesById.put(eventListenerProxy.getId(),
                                            eventListenerProxy);
                    eventbusService.register(eventListenerProxy);
                }
            } catch (Exception e) {
                handleError(e,
                            inResponseObserver);
                inResponseObserver.onCompleted();
            }
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.event.EventbusRpcServiceGrpc.EventbusRpcServiceImplBase#removeEventListener(org.marketcetera.eventbus.event.EventbusRpc.RemoveEventListenerRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void removeEventListener(RemoveEventListenerRequest inRequest,
                                        StreamObserver<RemoveEventListenerResponse> inResponseObserver)
        {
            try {
                validateAndReturnSession(inRequest.getSessionId());
                SLF4JLoggerProxy.trace(EventbusRpcServer.this,
                                       "Received remove event listener request {}",
                                       inRequest);
                String listenerId = inRequest.getListenerId();
                BaseRpcUtil.AbstractServerListenerProxy<?> eventListenerProxy = listenerProxiesById.getIfPresent(listenerId);
                listenerProxiesById.invalidate(listenerId);
                if(eventListenerProxy != null) {
                    eventbusService.unregister(eventListenerProxy);
                    eventListenerProxy.close();
                }
                EventbusRpc.RemoveEventListenerResponse.Builder responseBuilder = EventbusRpc.RemoveEventListenerResponse.newBuilder();
                EventbusRpc.RemoveEventListenerResponse response = responseBuilder.build();
                SLF4JLoggerProxy.trace(EventbusRpcServer.this,
                                       "Returning {}",
                                       response);
                inResponseObserver.onNext(response);
                inResponseObserver.onCompleted();
            } catch (Exception e) {
                handleError(e,
                            inResponseObserver);
                inResponseObserver.onCompleted();
            }
        }
    }
    /**
     * Wraps a {@link EventbusEventStatusListener} with the RPC call from the client.
     *
     * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
     * @version $Id$
     * @since $Release$
     */
    private class EventbusEventListenerProxy
            extends BaseRpcUtil.AbstractServerListenerProxy<EventbusRpc.EventResponse>
            implements EventbusEventListener
    {
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.event.EventbusEventListener#receiveEventbusEvent(org.marketcetera.eventbus.event.Event)
         */
        @Override
        @Subscribe
        public void receiveEventbusEvent(Event inEvent)
        {
            try {
                EventbusRpcUtil.getRpcEvent(inEvent).ifPresent(value->responseBuilder.setEvent(value));
                EventbusRpc.EventResponse response = responseBuilder.build();
                SLF4JLoggerProxy.trace(EventbusRpcServer.class,
                                       "{} received event {}, sending {}",
                                       getId(),
                                       inEvent,
                                       response);
                getObserver().onNext(response);
                responseBuilder.clear();
            } catch (StatusRuntimeException e) {
                SLF4JLoggerProxy.info(EventbusRpcServer.class,
                                      "Client disconnected, canceling event listener: {}",
                                      ExceptionUtils.getRootCauseMessage(e));
                eventbusService.unregister(this);
            } catch (Exception e) {
                SLF4JLoggerProxy.warn(EventbusRpcServer.class,
                                      e,
                                      "Unable to transmit event to listener, closing client");
                eventbusService.unregister(this);
            }
        }
        /**
         * Create a new EventbusEventStatusListenerProxy instance.
         *
         * @param inId a <code>String</code> value
         * @param inObserver a <code>StreamObserver&lt;EventbusRpc.EventbusEventStatusListenerResponse&gt;</code> value
         */
        private EventbusEventListenerProxy(String inId,
                                              StreamObserver<EventbusRpc.EventResponse> inObserver)
        {
            super(inId,
                  inObserver);
        }
        /**
         * builder used to construct messages
         */
        private final EventbusRpc.EventResponse.Builder responseBuilder = EventbusRpc.EventResponse.newBuilder();
    }
    /**
     * holds trade message listeners by id
     */
    private final Cache<String,BaseRpcUtil.AbstractServerListenerProxy<?>> listenerProxiesById = CacheBuilder.newBuilder().build();
    /**
     * provides access to authorization services
     */
    @org.springframework.beans.factory.annotation.Autowired
    private org.marketcetera.admin.service.AuthorizationService authzService;
    /**
     * provides services for eventbus events
     */
    @org.springframework.beans.factory.annotation.Autowired
    private EventBusService eventbusService;
    /**
     * provides the RPC service
     */
    private Service service;
    /**
     * description of this service
     */
    private final static String description = "Eventbus RPC Service";
}
