//
// this file is automatically generated
//
package org.marketcetera.eventbus.data.event;

import java.util.Date;
import java.util.List;
import java.util.function.Consumer;

import javax.annotation.PostConstruct;

import org.apache.commons.lang.exception.ExceptionUtils;
import org.marketcetera.core.Preserve;
import org.marketcetera.eventbus.data.event.DataEventRpc.DataEventCancelResponse;
import org.marketcetera.eventbus.data.event.DataEventRpc.DataEventRequestCancel;
import org.marketcetera.rpc.base.BaseRpc;
import org.marketcetera.rpc.base.BaseRpcUtil;
import org.marketcetera.rpc.server.AbstractRpcService;
import org.marketcetera.util.log.SLF4JLoggerProxy;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.collect.Lists;

import io.grpc.StatusRuntimeException;
import io.grpc.stub.StreamObserver;

/* $License$ */

/**
 * Provides an RPC Server for DataEventRpc services.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
@Preserve
public class DataEventRpcServer<SessionClazz>
        extends AbstractRpcService<SessionClazz,DataEventRpcServiceGrpc.DataEventRpcServiceImplBase>
{
    /* (non-Javadoc)
    * @see org.marketcetera.rpc.server.AbstractRpcService#getServiceDescription()
    */
    @Override
    protected String getServiceDescription()
    {
        return description;
    }
    /* (non-Javadoc)
    * @see org.marketcetera.rpc.server.AbstractRpcService#getService()
    */
    @Override
    protected DataEventRpcServiceGrpc.DataEventRpcServiceImplBase getService()
    {
        return service;
    }
    /**
     * Validate and start the object.
     */
    @PostConstruct
    public void start()
            throws Exception
    {
        service = new Service();
        super.start();
    }
    /**
     * DataEventRpc Service implementation.
     *
     * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
     * @version $Id$
     * @since $Release$
     */
    private class Service
            extends DataEventRpcServiceGrpc.DataEventRpcServiceImplBase
    {
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.data.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase#login(org.marketcetera.rpc.base.BaseRpc.LoginRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void login(BaseRpc.LoginRequest inRequest,
                          StreamObserver<BaseRpc.LoginResponse> inResponseObserver)
        {
            DataEventRpcServer.this.doLogin(inRequest,
                                            inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.data.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase#logout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void logout(BaseRpc.LogoutRequest inRequest,
                           StreamObserver<BaseRpc.LogoutResponse> inResponseObserver)
        {
            DataEventRpcServer.this.doLogout(inRequest,
                                             inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.data.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase#heartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest, io.grpc.stub.StreamObserver)
         */
        @Override
        public void heartbeat(BaseRpc.HeartbeatRequest inRequest,
                              StreamObserver<BaseRpc.HeartbeatResponse> inResponseObserver)
        {
            DataEventRpcServer.this.doHeartbeat(inRequest,
                                                inResponseObserver);
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.data.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase#subscribeToDataEvents(org.marketcetera.eventbus.data.DataEventRpc.DataEventRequest ,io.grpc.stub.StreamObserver)
         */
        @Override
        public void subscribeToDataEvents(DataEventRpc.DataEventRequest inDataEventRequest,
                                          StreamObserver<DataEventRpc.DataEventResponse> inResponseObserver)
        {
            try {
                SLF4JLoggerProxy.trace(DataEventRpcServer.this,
                                       "Received {}",
                                       inDataEventRequest);
                validateAndReturnSession(inDataEventRequest.getSessionId());
                // the client is obligated to provide a request id that is unique to her. we need to make sure that that uniqueness is guaranteed as long as she does her part,
                //  so we're going to build a compound request id that includes the session id. however, the client doesn't know about that so we need to make sure that we
                //  can deliver her original request id, too.
                String clientRequestId = inDataEventRequest.getRequestId();
                String serverRequestId = buildRequestId(inDataEventRequest.getSessionId(),
                                                        clientRequestId);
                DataEventListenerProxy dataEventListenerProxy = listenerProxiesById.getIfPresent(serverRequestId);
                if(dataEventListenerProxy == null) {
                    List<Class<?>> requestTypes = Lists.newArrayList();
                    for(String type : inDataEventRequest.getTypesList()) {
                        try {
                            requestTypes.add(Class.forName(type));
                        } catch (ClassNotFoundException e) {
                            SLF4JLoggerProxy.warn(this,
                                                  "Class not found: '{}'",
                                                  type);
                        }
                    }
                    Date timestamp = BaseRpcUtil.getDateValue(inDataEventRequest.getTimestamp()).orElse(new Date());
                    dataEventListenerProxy = new DataEventListenerProxy(serverRequestId,
                                                                        clientRequestId,
                                                                        inResponseObserver);
                    listenerProxiesById.put(serverRequestId,
                                            dataEventListenerProxy);
                    dataEventService.subscribeToDataEvents(serverRequestId,
                                                           timestamp,
                                                           dataEventListenerProxy,
                                                           requestTypes.toArray(new Class<?>[requestTypes.size()]));
                } else {
                    throw new IllegalArgumentException("Duplicate data event request id: " + clientRequestId);
                }
            } catch (Exception e) {
                handleError(e,
                            inResponseObserver);
            }
        }
        /* (non-Javadoc)
         * @see org.marketcetera.eventbus.data.DataEventRpcServiceGrpc.DataEventRpcServiceImplBase#unsubscribeToDataEvents(org.marketcetera.eventbus.data.DataEventRpc.DataEventRequestCancel, io.grpc.stub.StreamObserver)
         */
        @Override
        public void unsubscribeToDataEvents(DataEventRequestCancel inRequest,
                                            StreamObserver<DataEventCancelResponse> inResponseObserver)
        {
            throw new UnsupportedOperationException(); // TODO
        }
    }
    /**
     * Maps a {@link DataEvent} subscriber with the RPC call from the client.
     *
     * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
     * @version $Id$
     * @since $Release$
     */
    private class DataEventListenerProxy
            extends BaseRpcUtil.AbstractServerListenerProxy<DataEventRpc.DataEventResponse>
            implements Consumer<DataEvent>
    {
        /* (non-Javadoc)
         * @see java.util.function.Consumer#accept(java.lang.Object)
         */
        @Override
        public void accept(DataEvent inEvent)
        {
            try {
                DataEventRpcUtil.getRpcDataEvent(inEvent).ifPresent(value->responseBuilder.addDataEvents(value));
                responseBuilder.setRequestId(clientRequestId);
                DataEventRpc.DataEventResponse response = responseBuilder.build();
                SLF4JLoggerProxy.trace(DataEventRpcServer.class,
                                       "{} received event {}, sending {}",
                                       getId(),
                                       inEvent,
                                       response);
                getObserver().onNext(response);
                responseBuilder.clear();
            } catch (StatusRuntimeException e) {
                SLF4JLoggerProxy.info(DataEventRpcServer.class,
                                      "Client disconnected, canceling data event listener: {}",
                                      ExceptionUtils.getRootCauseMessage(e));
                stop();
            } catch (Exception e) {
                SLF4JLoggerProxy.warn(DataEventRpcServer.class,
                                      e,
                                      "Unable to transmit data event to listener, closing client");
                stop();
            }
        }
        /**
         * Stop the proxy.
         */
        private void stop()
        {
            dataEventService.unsubscribeToDataEvents(getId());
        }
        /**
         * Create a new DataEventListenerProxy instance.
         *
         * @param inServerRequestId a <code>String</code> value
         * @param inClientRequestId a <code>String</code> value
         * @param inObserver a <code>StreamObserver&lt;DataEventRpc.DataEventResponse&gt;</code> value
         */
        private DataEventListenerProxy(String inServerRequestId,
                                       String inClientRequestId,
                                       StreamObserver<DataEventRpc.DataEventResponse> inObserver)
        {
            super(inServerRequestId,
                  inObserver);
            clientRequestId = inClientRequestId;
        }
        /**
         * identifies the request from the client
         */
        private final String clientRequestId;
        /**
         * builder used to construct messages
         */
        private final DataEventRpc.DataEventResponse.Builder responseBuilder = DataEventRpc.DataEventResponse.newBuilder();
    }
    /**
     * provides access to data event services
     */
    @Autowired
    private DataEventService dataEventService;
    /**
     * provides the RPC service
     */
    private Service service;
    /**
     * description of this service
     */
    private final static String description = "DataEvent RPC Service";
    /**
     * holds trade message listeners by id
     */
    private final Cache<String,DataEventListenerProxy> listenerProxiesById = CacheBuilder.newBuilder().build();
}
