//
// this file is automatically generated
//
package org.marketcetera.eventbus.data.event;

import java.util.Collection;
import java.util.Date;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;

import javax.annotation.PostConstruct;

import org.apache.commons.lang3.ClassUtils;
import org.marketcetera.core.PlatformServices;
import org.marketcetera.core.Preserve;
import org.marketcetera.eventbus.EventBusService;
import org.marketcetera.util.log.SLF4JLoggerProxy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.common.cache.LoadingCache;
import com.google.common.collect.Lists;
import com.google.common.eventbus.Subscribe;

import io.netty.util.internal.ConcurrentSet;


/* $License$ */

/**
 * Provides services for {@link DataEvent} actions.
 * 
 * <p>This service is intended to provide information about {@link DataEvent} objects. These objects
 * provide updates when particular types of data change. The primary intent is for UI display: notifications
 * about data being displayed will trigger update requests. There's no specific limitation for this to be
 * user for UI.</p>
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
@Preserve
@Component
public class DataEventServiceImpl
        implements DataEventService
{
    /* (non-Javadoc)
     * @see org.marketcetera.eventbus.data.event.DataEventService#subscribeToDataEvents(java.lang.String, java.util.Date, java.util.Collection, java.util.function.Consumer)
     */
    @Override
    public void subscribeToDataEvents(String inRequestId,
                                      Date inTimestamp,
                                      Collection<Class<?>> inTypes,
                                      Consumer<DataEvent> inConsumer)
    {
        // TODO duplicate request id
        // TODO timestamp - start sending all cached events that match the types and are before the timestamp
        Collection<Class<?>> expandedTypes = Lists.newArrayList();
        if(inTypes == null) {
            expandedTypes.add(DataEvent.class);
        } else {
            for(Class<?> type : inTypes) {
                expandedTypes.add(type);
                expandedTypes.addAll(ClassUtils.getAllInterfaces(type));
                expandedTypes.addAll(ClassUtils.getAllSuperclasses(type));
            }
        }
        SLF4JLoggerProxy.debug(this,
                               "{} expands to {} class(es): {}",
                               inTypes,
                               expandedTypes.size(),
                               expandedTypes);
        DataEventSubscriber subscriber = new DataEventSubscriber(inConsumer,
                                                                 expandedTypes);
        subscribersByRequestId.put(inRequestId,
                                   subscriber);
        expandedTypes.forEach(type -> {
            subscribersByClass.getUnchecked(type).add(subscriber);
        });
    }
    /**
     * Cancels data event request.
     *
     * @param inRequestId a <code>String</code> value
     */
    @Override
    public void unsubscribeToDataEvents(String inRequestId)
    {
        throw new UnsupportedOperationException(); // TODO
    }
    /**
     * Accept incoming DataEvent values.
     *
     * @param inDataEvent a <code>DataEvent</code> value
     */
    @Subscribe
    public void accept(DataEvent inDataEvent)
    {
        SLF4JLoggerProxy.trace(this,
                               "Received {} subscribers: {}",
                               inDataEvent,
                               subscribersByRequestId.asMap());
        dataEventTimeCache.put(inDataEvent.getId(),
                               inDataEvent);
        Class<?> eventType = inDataEvent.getClass();
        Set<DataEventSubscriber> subscribers = subscribersByClass.getUnchecked(eventType);
        for(DataEventSubscriber subscriber : subscribers) {
            subscriber.accept(inDataEvent);
        }
    }
    /**
     * Validate and start the object.
     */
    @PostConstruct
    public void start()
    {
        SLF4JLoggerProxy.info(this,
                              "Starting {}",
                              PlatformServices.getServiceName(getClass()));
        eventBusService.register(this);
        dataEventTimeCache = CacheBuilder.newBuilder().expireAfterWrite(dataEventTtlSeconds, TimeUnit.SECONDS).build();
    }
    private static class DataEventSubscriber
            implements Consumer<DataEvent>
    {
        /* (non-Javadoc)
         * @see java.util.function.Consumer#accept(java.lang.Object)
         */
        @Override
        public void accept(DataEvent inEvent)
        {
            consumer.accept(inEvent);
        }
        private DataEventSubscriber(Consumer<DataEvent> inConsumer,
                                    Collection<Class<?>> inTypes)
        {
            consumer = inConsumer;
            types = inTypes;
        }
        private final Collection<Class<?>> types;
        private final Consumer<DataEvent> consumer;
    }
    private int dataEventTtlSeconds = 10;
    private Cache<Long,DataEvent> dataEventTimeCache;
    private final LoadingCache<Class<?>,Set<DataEventSubscriber>> subscribersByClass = CacheBuilder.newBuilder().build(new CacheLoader<Class<?>,Set<DataEventSubscriber>>(){
        @Override
        public Set<DataEventSubscriber> load(Class<?> inKey)
                throws Exception
        {
            return new ConcurrentSet<>();
        }}
    );
    /**
     * lists data event subscribers by request id
     */
    private final Cache<String,DataEventSubscriber> subscribersByRequestId = CacheBuilder.newBuilder().build();
    /**
     * provides access to event services
     */
    @Autowired
    private EventBusService eventBusService;
}
