//
// this file is automatically generated
//
package org.marketcetera.eventbus.data.event;

import java.util.Collection;
import java.util.concurrent.Callable;
import java.util.function.Consumer;

import org.marketcetera.core.ApplicationVersion;
import org.marketcetera.core.Preserve;
import org.marketcetera.core.Util;
import org.marketcetera.core.VersionInfo;
import org.marketcetera.eventbus.data.event.DataEventRpc.DataEventResponse;
import org.marketcetera.rpc.base.BaseRpcUtil;
import org.marketcetera.rpc.client.AbstractRpcClient;
import org.marketcetera.util.log.SLF4JLoggerProxy;
import org.marketcetera.util.ws.tags.AppId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.collect.Lists;

/* $License$ */

/**
 * Provides an RPC Client for DataEventRpc services.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
@Preserve
@Component
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class DataEventRpcClient
        extends AbstractRpcClient<DataEventRpcServiceGrpc.DataEventRpcServiceBlockingStub,DataEventRpcServiceGrpc.DataEventRpcServiceStub,DataEventRpcClientParameters>
        implements DataEventClient
{
    /* (non-Javadoc)
     * @see DataEventClient#subscribeToDataEvents(String,java.util.Collection,java.util.function.Consumer<DataEvent>)
     */
    @Override
    public void subscribeToDataEvents(String inRequestId,
                                      Collection<Class<?>> inTypes,
                                      Consumer<DataEvent> inConsumer)
    {
        DataEventListenerProxy proxy = listenerProxiesById.getIfPresent(inRequestId);
        if(proxy != null) {
            throw new IllegalArgumentException("Duplicate data event request id: " + inRequestId);
        }
        proxy = new DataEventListenerProxy(inConsumer);
        listenerProxiesById.put(inRequestId,
                                proxy);
        final DataEventListenerProxy listener = proxy;
        executeCall(new Callable<Void>() {
            @Override
            public Void call()
                    throws Exception
            {
                DataEventRpc.DataEventRequest.Builder requestBuilder = DataEventRpc.DataEventRequest.newBuilder();
                requestBuilder.setSessionId(getSessionId().getValue());
                requestBuilder.setRequestId(inRequestId);
                inTypes.forEach(javaValue->BaseRpcUtil.getClassnameValue(javaValue).ifPresent(rpcValue->requestBuilder.addTypes(rpcValue)));
                DataEventRpc.DataEventRequest request = requestBuilder.build();
                SLF4JLoggerProxy.trace(DataEventRpcClient.this,
                                       "{} sending {}",
                                       getSessionId(),
                                       request);
                getAsyncStub().subscribeToDataEvents(request,
                                                     listener);
                return null;
            }}
        );
    }
    /* (non-Javadoc)
     * @see DataEventClient#unsubscribeToDataEvents(String)
     */
    @Override
    public void unsubscribeToDataEvents(String inRequestId)
    {
        executeCall(new Callable<Void>() {
            @Override
            public Void call()
                    throws Exception
            {
                DataEventRpc.DataEventRequestCancel.Builder requestBuilder = DataEventRpc.DataEventRequestCancel.newBuilder();
                requestBuilder.setSessionId(getSessionId().getValue());
                requestBuilder.setRequestId(inRequestId);
                DataEventRpc.DataEventRequestCancel request = requestBuilder.build();
                SLF4JLoggerProxy.trace(DataEventRpcClient.this,
                                       "{} sending {}",
                                       getSessionId(),
                                       request);
                DataEventRpc.DataEventCancelResponse response = getBlockingStub().unsubscribeToDataEvents(request);
                SLF4JLoggerProxy.trace(DataEventRpcClient.this,
                                       "{} received {}",
                                       getSessionId(),
                                       response);
                return null;
            }}
        );
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getBlockingStub(io.grpc.Channel)
     */
    @Override
    protected DataEventRpcServiceGrpc.DataEventRpcServiceBlockingStub getBlockingStub(io.grpc.Channel inChannel)
    {
        return DataEventRpcServiceGrpc.newBlockingStub(inChannel);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getAsyncStub(io.grpc.Channel)
     */
    @Override
    protected DataEventRpcServiceGrpc.DataEventRpcServiceStub getAsyncStub(io.grpc.Channel inChannel)
    {
        return DataEventRpcServiceGrpc.newStub(inChannel);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#executeLogin(org.marketcetera.rpc.base.BaseRpc.LoginRequest)
     */
    @Override
    protected org.marketcetera.rpc.base.BaseRpc.LoginResponse executeLogin(org.marketcetera.rpc.base.BaseRpc.LoginRequest inRequest)
    {
        return getBlockingStub().login(inRequest);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#executeLogout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest)
     */
    @Override
    protected org.marketcetera.rpc.base.BaseRpc.LogoutResponse executeLogout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest inRequest)
    {
        return getBlockingStub().logout(inRequest);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#executeHeartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest)
     */
    @Override
    protected org.marketcetera.rpc.base.BaseRpc.HeartbeatResponse executeHeartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest inRequest)
    {
        return getBlockingStub().heartbeat(inRequest);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getAppId()
     */
    @Override
    protected org.marketcetera.util.ws.tags.AppId getAppId()
    {
        return APP_ID;
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getVersionInfo()
     */
    @Override
    protected org.marketcetera.core.VersionInfo getVersionInfo()
    {
        return APP_ID_VERSION;
    }
    /**
     * Create a new DataEventRpc instance.
     *
     * @param inParameters a <code>DataEventRpcClientParameters</code> value
     */
    protected DataEventRpcClient(DataEventRpcClientParameters inParameters)
    {
        super(inParameters);
    }
    /**
     * Provides an interface between data event stream listeners and their handlers.
     *
     * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
     * @version $Id$
     * @since $Release$
     */
    private class DataEventListenerProxy
            extends BaseRpcUtil.AbstractClientListenerProxy<DataEventRpc.DataEventResponse,Collection<DataEvent>,Consumer<DataEvent>>
    {
        /* (non-Javadoc)
         * @see org.marketcetera.rpc.base.BaseRpcUtil.AbstractClientListenerProxy#translateMessage(java.lang.Object)
         */
        @Override
        protected Collection<DataEvent> translateMessage(DataEventResponse inResponse)
        {
            Collection<DataEvent> dataEvents = Lists.newArrayList();
            for(DataEventRpc.DataEvent rpcDataEvent : inResponse.getDataEventsList()) {
                DataEventRpcUtil.getDataEvent(rpcDataEvent,
                                              dataEventFactory).ifPresent(dataEvent -> dataEvents.add(dataEvent));
            }
            return dataEvents;
        }
        /* (non-Javadoc)
         * @see org.marketcetera.rpc.base.BaseRpcUtil.AbstractClientListenerProxy#sendMessage(java.lang.Object, java.lang.Object)
         */
        @Override
        protected void sendMessage(Consumer<DataEvent> inConsumer,
                                   Collection<DataEvent> inEvents)
        {
            for(DataEvent dataEvent : inEvents) {
                try {
                    inConsumer.accept(dataEvent);
                } catch (Exception e) {
                    SLF4JLoggerProxy.warn(DataEventRpcClient.this,
                                          e);
                }
            }
        }
        /**
         * Create a new DataEventListenerProxy instance.
         *
         * @param inDataEventListener a <code>Consumer&lt;DataEvent&gt;</code> value
         */
        private DataEventListenerProxy(Consumer<DataEvent> inDataEventListener)
        {
            super(inDataEventListener);
        }
    }
    /**
     * holds report listeners by their id or the market data request id
     */
    private final Cache<String,DataEventListenerProxy> listenerProxiesById = CacheBuilder.newBuilder().build();
    /**
     * creates new {@link DataEvent} objects
     */
    @Autowired
    private DataEventFactory dataEventFactory;
    /**
     * The client's application ID: the application name.
     */
    public static final String APP_ID_NAME = "DataEventRpc"; //$NON-NLS-1$
    /**
     * The client's application ID: the version.
     */
    public static final VersionInfo APP_ID_VERSION = ApplicationVersion.getVersion(DataEventClient.class);
    /**
     * The client's application ID: the ID.
     */
    public static final AppId APP_ID = Util.getAppId(APP_ID_NAME,APP_ID_VERSION.getVersionInfo());
}
