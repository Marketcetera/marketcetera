//
// this file is automatically generated
//
package org.marketcetera.eventbus.data.event;

/* $License$ */

/**
 * Provides an RPC Client for DataEventRpc services.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
@org.springframework.stereotype.Component
@org.springframework.context.annotation.Scope(org.springframework.beans.factory.config.ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class DataEventRpcClient
        extends org.marketcetera.rpc.client.AbstractRpcClient<org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceBlockingStub,org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceStub,DataEventRpcClientParameters>
        implements DataEventClient
{
    /* (non-Javadoc)
     * @see org.marketcetera.eventbus.data.event.DataEventClient#subscribeToDataEvents(String,java.util.Collection,java.util.function.Consumer<DataEvent>)
     */
    @Override
    public void subscribeToDataEvents(String inRequestId,java.util.Collection<Class<?>> inRequestTypes,java.util.function.Consumer<DataEvent> inConsumer)
    {
        executeCall(new java.util.concurrent.Callable<Void>() {
            @Override
            public Void call()
                    throws Exception
            {
                DataEventRpc.DataEventRequest.Builder requestBuilder = DataEventRpc.DataEventRequest.newBuilder();
                requestBuilder.setSessionId(getSessionId().getValue());
                requestBuilder.setRequestId(inRequestId);
                inRequestTypes.forEach(javaValue->requestBuilder.addRequestTypes(javaValue));
                requestBuilder.setConsumer(inConsumer);
                DataEventRpc.DataEventRequest request = requestBuilder.build();
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(DataEventRpcClient.this,"{} sending {}",getSessionId(),request);
                DataEventRpc.DataEventResponse response = getBlockingStub().subscribeToDataEvents(request);
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(DataEventRpcClient.this,"{} received {}",getSessionId(),response);
                return null;
            }}
        );
    }
    /* (non-Javadoc)
     * @see org.marketcetera.eventbus.data.event.DataEventClient#unSubscribeToDataEvents(String)
     */
    @Override
    public void unSubscribeToDataEvents(String inRequestId)
    {
        executeCall(new java.util.concurrent.Callable<Void>() {
            @Override
            public Void call()
                    throws Exception
            {
                DataEventRpc.DataEventRequestCancel.Builder requestBuilder = DataEventRpc.DataEventRequestCancel.newBuilder();
                requestBuilder.setSessionId(getSessionId().getValue());
                requestBuilder.setRequestId(inRequestId);
                DataEventRpc.DataEventRequestCancel request = requestBuilder.build();
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(DataEventRpcClient.this,"{} sending {}",getSessionId(),request);
                DataEventRpc.DataEventCancelResponse response = getBlockingStub().unSubscribeToDataEvents(request);
                org.marketcetera.util.log.SLF4JLoggerProxy.trace(DataEventRpcClient.this,"{} received {}",getSessionId(),response);
                return null;
            }}
        );
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getBlockingStub(io.grpc.Channel)
     */
    @Override
    protected org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceBlockingStub getBlockingStub(io.grpc.Channel inChannel)
    {
        return org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.newBlockingStub(inChannel);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getAsyncStub(io.grpc.Channel)
     */
    @Override
    protected org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.DataEventRpcServiceStub getAsyncStub(io.grpc.Channel inChannel)
    {
        return org.marketcetera.eventbus.data.event.DataEventRpcServiceGrpc.newStub(inChannel);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#executeLogin(org.marketcetera.rpc.base.BaseRpc.LoginRequest)
     */
    @Override
    protected org.marketcetera.rpc.base.BaseRpc.LoginResponse executeLogin(org.marketcetera.rpc.base.BaseRpc.LoginRequest inRequest)
    {
        return getBlockingStub().login(inRequest);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#executeLogout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest)
     */
    @Override
    protected org.marketcetera.rpc.base.BaseRpc.LogoutResponse executeLogout(org.marketcetera.rpc.base.BaseRpc.LogoutRequest inRequest)
    {
        return getBlockingStub().logout(inRequest);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#executeHeartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest)
     */
    @Override
    protected org.marketcetera.rpc.base.BaseRpc.HeartbeatResponse executeHeartbeat(org.marketcetera.rpc.base.BaseRpc.HeartbeatRequest inRequest)
    {
        return getBlockingStub().heartbeat(inRequest);
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getAppId()
     */
    @Override
    protected org.marketcetera.util.ws.tags.AppId getAppId()
    {
        return APP_ID;
    }
    /* (non-Javadoc)
     * @see org.marketcetera.rpc.client.AbstractRpcClient#getVersionInfo()
     */
    @Override
    protected org.marketcetera.core.VersionInfo getVersionInfo()
    {
        return APP_ID_VERSION;
    }
    /**
     * Create a new DataEventRpc instance.
     *
     * @param inParameters a <code>DataEventRpcClientParameters</code> value
     */
    protected DataEventRpcClient(DataEventRpcClientParameters inParameters)
    {
        super(inParameters);
    }
    /**
     * The client's application ID: the application name.
     */
    public static final String APP_ID_NAME = "DataEventRpc"; //$NON-NLS-1$
    /**
     * The client's application ID: the version.
     */
    public static final org.marketcetera.core.VersionInfo APP_ID_VERSION = org.marketcetera.core.ApplicationVersion.getVersion(org.marketcetera.eventbus.data.event.DataEventClient.class);
    /**
     * The client's application ID: the ID.
     */
    public static final org.marketcetera.util.ws.tags.AppId APP_ID = org.marketcetera.core.Util.getAppId(APP_ID_NAME,APP_ID_VERSION.getVersionInfo());
}
