package org.marketcetera.client;

import java.beans.ConstructorProperties;

import org.apache.commons.lang.ObjectUtils;
import org.marketcetera.util.misc.ClassVersion;

/* $License$ */
/**
 * The set of parameters needed to initialize the client. These parameters
 * are provided to the following methods.
 * <ul>
 *      <li>{@link ClientManager#init(ClientParameters)}</li>
 *      <li>{@link Client#reconnect(ClientParameters)}</li>
 * </ul>
 *
 * @author anshul@marketcetera.com
 * @version $Id$
 * @since 1.0.0
 */
@ClassVersion("$Id$")
public class ClientParameters {
    /**
     * Gets the user name to use when connecting to the server.
     *
     * @return the user name.
     */
    public String getUsername() {
        return parametersSpec.getUsername();
    }

    /**
     * The password to use when connecting to the server.
     *
     * @return the password.
     */
    public char[] getPassword() {
        return mPassword;
    }

    /**
     * The URL of the server.
     *
     * @return the URL of the server.
     */
    public String getURL() {
        return parametersSpec.getUrl();
    }

    /**
     * The port number of the server.
     *
     * @return the server port number.
     */
    public int getPort() {
        return parametersSpec.getPort();
    }

    /**
     * The server hostname.
     *
     * @return the server hostname.
     */
    public String getHostname() {
        return parametersSpec.getHostname();
    }

    /**
     * The string to prefix to the orderIDs generated by this class.
     *
     * @return the string to prefix to the orderIDs generated by this class.
     */
    public String getIDPrefix() {
        return mIDPrefix;
    }

    /**
     * The time interval between heartbeats, in ms.
     *
     * @return the time interval.
     */
    public int getHeartbeatInterval() {
        return mHeartbeatInterval;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ClientParameters that = (ClientParameters) o;
        return ObjectUtils.equals(parametersSpec, that.parametersSpec);
    }

    @Override
    public int hashCode() {
        return ObjectUtils.hashCode(parametersSpec);
    }
    /**
     * 
     *
     *
     * @return
     */
    public ClientParametersSpec getParametersSpec()
    {
        return parametersSpec;
    }

    /**
     * Creates an instance.
     *
     * @param inUsername the user name.
     * @param inPassword the password.
     * @param inURL the URL.
     * @param inHostname the host name
     * @param inPort the port number
     * @param inIDPrefix the string to prefix to the orderIDs generated
     * by the client based on the IDs from the server.
     * @param inHeartbeatInterval time interval between heartbeats, in ms.
     */
    @ConstructorProperties({"username", 
            "password",
            "URL",
            "hostname",
            "port",
            "IDPrefix",
            "heartbeatInterval"})
    public ClientParameters(String inUsername, char[] inPassword,
                            String inURL, String inHostname, int inPort,
                            String inIDPrefix, int inHeartbeatInterval) {
        parametersSpec = new ClientParametersSpec(inUsername,
                                                  inHostname,
                                                  inPort,
                                                  inURL);
        mPassword = inPassword;
        mIDPrefix = inIDPrefix;
        mHeartbeatInterval = inHeartbeatInterval;
    }


    /**
     * Creates an instance.
     *
     * @param inUsername the user name.
     * @param inPassword the password.
     * @param inURL the URL.
     * @param inHostname the host name
     * @param inPort the port number
     * @param inIDPrefix the string to prefix to the orderIDs generated
     * by the client based on the IDs from the server.
     */
    public ClientParameters(String inUsername, char[] inPassword,
                            String inURL, String inHostname, int inPort,
                            String inIDPrefix) {
        this(inUsername, inPassword, inURL, inHostname, inPort, inIDPrefix,
             DEFAULT_HEARTBEAT_INTERVAL);
    }

    /**
     * Creates an instance.
     *
     * @param inUsername the user name.
     * @param inPassword the password.
     * @param inURL the URL.
     * @param inHostname the host name
     * @param inPort the port number
     */
    public ClientParameters(String inUsername, char[] inPassword, String inURL,
                            String inHostname, int inPort ) {
        this(inUsername, inPassword, inURL, inHostname, inPort,null);
    }
    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString()
    {
        StringBuilder builder = new StringBuilder();
        builder.append("ClientParameters [parametersSpec=").append(parametersSpec).append(", mIDPrefix=")
                .append(mIDPrefix).append(", mHeartbeatInterval=").append(mHeartbeatInterval).append("]");
        return builder.toString();
    }
    private ClientParametersSpec parametersSpec;
    private char[] mPassword;
    private String mIDPrefix;
    private int mHeartbeatInterval;
    public static final int DEFAULT_HEARTBEAT_INTERVAL = 5000;
}
