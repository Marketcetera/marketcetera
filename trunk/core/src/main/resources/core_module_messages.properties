# Author: anshul@marketcetera.com
# Since: 0.9.0
# Version: $Id$
#
# $License$

# This MUST be encoded in ISO-8859-1. To supply characters that are
# not supported by this encoding, use unicode escapes (\uxxxx).
#
# You may also create a separate file with a native encoding, and then
# use the 'native2ascii' tool of the Java Development Kit to convert
# that file into a this message file in ISO-8859-1. The same tool can
# do the reverse conversion using the '-reverse' command-line option.

incomplete_provider_urn.msg=The Module Provider URN ''{0}'' is incomplete. A Module provider URN has the format ''metc:providerType:providerName''. Ensure that the specified URN matches Module Provider URN format and retry operation.
sink_module_factory_desc.msg=The Data Sink Module Provider. This provider provides a singleton Sink Module instance that can receive any type of data and channel it to other system components like logs and console.
module_not_emitter.msg=Unable to create data flow. The module with the URN ''{0}'' does not emit data. Verify that the module URN is correct and that it''s specified at the end of data flow.
bean_registration_error.msg=Unexpected error when registering MBean with name ''{0}''
bean_unregistration_error.msg=Unexpected error when unregistering MBeans.
bean_object_name_error.msg=Unexpected error generating MBean object name from the URN ''{0}''
invalid_urn_scheme.msg=Invalid URN scheme specified ''{0}'' in the URN ''{1}''. Ensure that the URN scheme is ''{2}''
cannot_create_singleton.msg=Unable to create a new module instance. The module provider ''{0}'' supports singleton instances only and an instance with URN ''{1}'' already exists
cancel_failed_module_state_incorrect.msg=Unable to cancel data flow ''{0}'' as requested by the module instance ''{1}'' as the module is in state ''{2}''. A module can cancel data flows only when it is in one of ''{3}'' states. Ensure that the module is in one of ''{3}'' states and retry operation.
bean_attrib_discovery_error.msg=Unexpected error when discovering MBean attributes of ''{0}'' in order to set their default values.
module_not_receiver.msg=Unable to create data flow as the module ''{0}'' does not receive data. Verify that the module URN is correct and that it''s specified at the beginning of the data flow.
incomplete_instance_urn.msg=The instance URN ''{0}'' is incomplete. Ensure that the instance URN is of the form ''metc:providerType:providerName:instanceName''.
data_request_too_short.msg=The data request of length ''{0}'' is too short. Ensure that the request has either at least one element, if the sink module is being implicitly appended, or at least two elements if sink module is not being implicitly appended.
module_not_found.msg=Unable to find a module with URN ''{0}''. Ensure that the module URN is correct and retry operation
module_configuration_error.msg=Unexpected error when loading module providers. Ensure that the module factory names are correctly specified in the ''services/org.marketcetera.module.ModuleFactory'' files and that those files are readable. 
unable_generate_flow_id.msg=Unexpected error when generating IDs.
provider_not_found.msg=Unable to find a module provider with the URN ''{0}''. Ensure that the URN is correct and retry operation
cannot_create_module_wrong_param_type.msg=Unable to create a new module instance of provider ''{0}''. The parameter at index ''{1}'' is expected to be of type ''{2}'' but the supplied parameter is of type ''{3}''. Ensure that the supplied parameter is of type ''{2}'' and retry operation
cannot_delete_singleton.msg=Cannot delete the module instance ''{0}'' as it''s a singleton instance. Singleton module instances cannot be deleted
provider_urn_has_instance.msg=Incorrect provider URN ''{0}'': it specifies an instance name. Ensure that the provider URN is of the form ''metc:providerType:providerName''. 
instance_provider_urn_mismatch.msg=The specified instance URN ''{0}'' does not have the provider URN ''{1}'' as its prefix. Ensure that instance URN has the provider URN as its prefix and retry operation
invalid_provider_name.msg=The provider name ''{1}'' in the URN ''{0}'' is invalid. A valid provider name starts with a letter, has letters and numbers only and is not equal to ''this''
cannot_create_module_wrong_param_num.msg=Unable to create a new module instance of provider ''{0}''. The provider expects ''{1}'' parameters whereas ''{2}'' parameters have been provided. Ensure that exactly ''{1}'' parameters are specified and retry operation.
invalid_instance_urn.msg=The instance name ''{1}'' in the URN ''{0}'' is invalid. A valid instance name starts with a letter, only has letters and numbers and is not equal to ''this''
data_flow_not_found.msg=Unable to find data flow with ID ''{0}''. Ensure that the specified ID is correct and retry operation.
empty_urn.msg=The specified URN ''{0}'' is empty. Ensure that the specified URN is not empty and retry operation.
cannot_stop_module_dataflows.msg=Unable to stop module ''{0}'' as it''s participating in data flows ''{1}'' that it did not initiate. Ensure that these data flows are canceled and retry stop
module_not_started_state_incorrect.msg=Unable to start module ''{0}'' as it is in state ''{1}''. A module can be started when it is in one of ''{2}'' states. Ensure that module ''{0}'' is in one of ''{2}'' states and retry operation.
dataflow_failed_req_module_state_incorrect.msg=Unable to create data flow as requested by module ''{0}'' as it is in state ''{1}''. A module can request data flows when it is in one of ''{2}'' states. Ensure that module ''{0}'' is in one of ''{2}'' states and retry operation.
dataflow_failed_pcpt_module_state_incorrect.msg=Unable to create data flow with module ''{0}'' as it is in state ''{1}''. A module can participate in data flows when it is in one of ''{2}'' states. Ensure that module ''{0}'' is in one of ''{2}'' states and retry operation.
invalid_provider_type.msg=The provider type ''{1}'' in the URN ''{0}'' is invalid. A valid provider name starts with a letter, has letters and numbers only and is not equal to ''this''
duplicate_module_urn.msg=Unable to create module. A module with URN ''{0}'' already exists. Ensure that the module has a unique URN and try creating the module again.
unable_set_attribute.msg=Unexpected error when setting the attribute ''{0}'' to value ''{1}'' on the bean with name ''{2}''
cannot_convert_to_module_urn.msg=Unable to convert ''{0}'' to a module URN.
cannot_convert_to_properties.msg=Unable to convert ''{0}'' to Properties.
empty_string_data_request.msg=Unable to complete operation: empty data request specified. Ensure that a valid data request is specified and retry operation.
module_not_stopped_state_incorrect.msg=Unable to stop Module ''{0}'' as it is in state ''{1}''. A module can be stopped if it is in one of ''{2}'' states. Ensure that the module is in one of ''{2}'' states and retry operation. 
cannot_create_module_param_convert_error.msg=Unable to create module using provider ''{0}'': error encountered when converting parameter at index ''{1}'' from string to the requisite type.
string_conversion_error.msg=Unable to convert ''{0}'' to a value of type ''{1}'' because of the following error: {2}
module_delete_error_mxbean_unreg.msg=Unable to delete module ''{0}'': unexpected error when unregistering its MBean.
error_read_properties.msg=Unexpected error when reading the properties file ''{0}''.
unable_generate_request_id.msg=Unable to generate request IDs
illegal_req_parm_value.msg=Module ''{0}'' is unable to process request parameter value ''{1}''.
unsupported_req_parm_type.msg=Module ''{0}'' is unable to process request parameter of type ''{1}''.
incorrect_factory_auto_instantiate.msg=Module provider ''{0}'' is defined incorrectly. It''s defined to auto-instantiate module instances but it''s not defined to need a ModuleURN parameter only when creating module instances. Ensure that the module provider needs a parameter of type ModuleURN only when creating new Module instances to be able to support auto-instantiate behavior. 
log_module_emit_error.msg=Module ''{0}'' emitted error ''{1}''
log_data_receive_error.msg=Module ''{0}'' encountered error when receiving ''{1}''
log_canceling_data_flow.msg=Canceling data flow ''{0}'' as requested by the receiver module ''{1}''.
log_unexpected_error_canceling_req.msg=Ignoring unexpected error canceling request ''{0}''.
log_unexpected_error_canceling_flow.msg=Ignoring unexpected error when canceling data flow ''{0}'' as requested by ''{1}''.
log_init_factory.msg=Initializing module factory {0}.
log_init_factory_ignore.msg=Ignoring factory {0} as it''s already initialized.
log_registered_factory_bean.msg=Registered factory {0} bean with name {1}.
log_created_module_instance.msg=Created a module instance with URN {0}.
log_registered_module_bean.msg=Registered module {0} bean with name {1}.
log_start_module_failed.msg=Failed to start module {0}.
log_stop_module_failed.msg=Failed to stop module {0}.
log_module_started.msg=Started module {0}.
log_sink_listener_receive_error.msg=Unexpected error when delivering data to Sink Listener.
log_module_stopped.msg=Stopped module {0}.
log_module_deleted.msg=Deleted module {0}.
log_error_read_default_config.msg=Unable to read properties file {0} when fetching default value for attribute {2} of {1}
log_sink_module_misconfigured.msg=The Sink module is not correctly configured. Data received by the module will not get delivered to Sink Data Listeners.
multiple_modules_match_urn.msg=Unable to find a module matching URN ''{0}''. Multiple modules match this URN. For example, ''{1}'' and ''{2}''. Ensure that the specified URN matches single module and retry operation.
cannot_stop_sink_module.msg=Unable to stop the Sink Module. The System does not allow the Sink Module to be stopped.
log_delete_auto_created_module.msg=Deleting auto-created module ''{0}'' as the data flow ''{1}'' that it was participating in has been canceled and the module is not participating in any other data flows.
log_cancel_data_flow_start_failed.msg=System is canceling data flow ''{0}'' as the module that initiated it,''{1}'' failed to start.
log_stop_failure.msg=Error encountered when stopping the module manager.
error_refresh.msg=Unexpected error when refreshing the module manager.
refresh_listener_already_setup.msg=Unable to set refresh listener, a refresh listener of type ''{0}'' is already set.
log_stopping_module_manager.msg=Stopping Module Manager...
delete_failed_module_state_incorrect.msg=Unable to delete module ''{0}'' as it''s in state ''{1}''. The system can delete module only if it is in the one of ''{2}'' states. Ensure that the module is in one of ''{2}'' states and retry delete.
log_delete_auto_created_module_fail.msg=Unexpected error deleting auto-created module ''{0}''. If the module does not get automatically deleted, it may need to be deleted manually.
data_flow_already_canceling.msg=Unable to cancel data flow with the ID ''{0}'' as it is already in the process of being canceled by another operation.
incorrect_nested_flow_request.msg=Incorrect invocation of data flow APIs. Invocation of data flow APIs from within requestData() or cancel() is not supported.
error_cleaning_up_init_failure.msg=Module Manager encountered failure when stopping data flows and modules after the it failed to initialize.