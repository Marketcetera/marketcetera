<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.rubypeople.rdt.core">
<annotation>
      <appInfo>
         <meta.schema plugin="org.rubypeople.rdt.core" id="errorProvider" name="%errorProviderName"/>
      </appInfo>
      <documentation>
         This extension point allows plugins to participate in surfacing their error/warning markers through the preference page. Use this point to add new categories (or groups) of errors/warnings, and to add hooks to set teh severity and argumnets for your new/custom error/warning markers. This point is likely to be used in conjucntion with the compilationParticipants (which would do the actual parsing/AST analysis).
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <choice>
               <element ref="category"/>
               <element ref="error"/>
            </choice>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="category">
      <annotation>
         <documentation>
            Categories group togetehr a set of Errors/Warnings in the preference page.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for this category. Errors references this with their categoryId to be placed within this category.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The text used in the preference page to group the errors.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="error">
      <annotation>
         <documentation>
            An error is a type of Error/Warning that can be configured by the user.
         </documentation>
      </annotation>
      <complexType>
         <sequence minOccurs="0" maxOccurs="1">
            <element ref="argument"/>
         </sequence>
         <attribute name="prefKey" type="string" use="required">
            <annotation>
               <documentation>
                  the preference key used to store the severity of the error/warning (which will be RubyCore.IGNORE, RubyCore.WARNING, or RubyCore.ERROR).
               </documentation>
            </annotation>
         </attribute>
         <attribute name="label" type="string" use="required">
            <annotation>
               <documentation>
                  The text used on the preference page to describe the error/warning.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="categoryId" type="string" use="required">
            <annotation>
               <documentation>
                  the id of the category under which this error/warning resides.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="argument">
      <annotation>
         <documentation>
            If this preference has a particular value or argument associated with it, this element is used.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="prefKey" type="string" use="required">
            <annotation>
               <documentation>
                  The preference key to store the value.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="type" use="default" value="int">
            <annotation>
               <documentation>
                  The type of value. Defaults to int.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="int">
                  </enumeration>
                  <enumeration value="string">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         0.9.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         (C) 2007 Big Day Coming
      </documentation>
   </annotation>

</schema>
