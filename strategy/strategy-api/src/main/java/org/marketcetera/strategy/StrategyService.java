//
// this file is automatically generated
//
package org.marketcetera.strategy;

import java.nio.file.Path;
import java.util.Collection;
import java.util.Optional;

import org.marketcetera.core.Preserve;
import org.marketcetera.core.notifications.INotification.Severity;
import org.marketcetera.persist.CollectionPageResponse;
import org.marketcetera.persist.PageRequest;

/* $License$ */

/**
 * Provides StrategyService services.
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
@Preserve
public interface StrategyService
{
    /**
     * Requests loaded strategy instances.
     * 
     * @param inCurrentUserName a <code>String</code> value
     * @return a <code>Collection&lt;StrategyInstance&gt;</code> value
     */
    Collection<? extends StrategyInstance> getStrategyInstances(String inCurrentUserName);
    /**
     * Requests strategy messages.
     *
     * @param inStrategyName a <code>String</code> value
     * @param inSeverity a <code>Severity</code> value
     * @param inPageRequest an <code>PageRequest</code> value
     * @return a <code>CollectionPageResponse&lt;? extends StrategyMessage&gt;</code> value
     */
    CollectionPageResponse<? extends StrategyMessage> getStrategyMessages(String inStrategyName,
                                                                          Severity inSeverity,
                                                                          PageRequest inPageRequest);
    /**
     * Persist the given strategy message.
     *
     * @param inStrategyMessage a <code>StrategyMessage</code> value
     * @return a <code>StrategyMessage</code> value
     */
    StrategyMessage createStrategyMessage(StrategyMessage inStrategyMessage);
    /**
     * Delete the strategy message with the given unique identifier.
     *
     * @param inStrategyMessageId a <code>long</code> value
     */
    void deleteStrategyMessage(long inStrategyMessageId);
    /**
     * Delete all strategy messages for the given strategy instance.
     *
     * @param inStrategyInstanceName a <code>String</code> value
     */
    void deleteAllStrategyMessages(String inStrategyInstanceName);
    /**
     * Finds the strategy instance with the given name.
     *
     * @param inName a <code>String</code> value
     * @return an <code>Optional&lt;? extends StrategyInstance&gt;</code> value
     */
    Optional<? extends StrategyInstance> findByName(String inName);
    /**
     * Load a new strategy instances.
     *
     * @param inStrategyInstance an <code>StrategyInstance</code> value
     * @return a <code>StrategyStatus</code> value
     */
    StrategyStatus loadStrategyInstance(StrategyInstance inStrategyInstance);
    /**
     * Unload a strategy instance.
     *
     * @param inStrategyInstanceName a <code>String</code> value
     */
    void unloadStrategyInstance(String inStrategyInstanceName);
    /**
     * Start a strategy instance.
     *
     * @param inStrategyInstanceName a <code>String</code> value
     */
    void startStrategyInstance(String inStrategyInstanceName);
    /**
     * Stop a strategy instance.
     *
     * @param inStrategyInstanceName a <code>String</code> value
     */
    void stopStrategyInstance(String inStrategyInstanceName);
    /**
     * Get the incoming strategy directory.
     *
     * @return a <code>Path</code> value
     */
    Path getIncomingStrategyDirectory();
    /**
     * Get the strategy temporary strategy directory.
     *
     * @return a <code>Path</code> value
     */
    Path getTemporaryStrategyDirectory();
    /**
     * Add the given strategy event listener.
     *
     * @param inListener a <code>StrategyEventListener</code> value
     */
    void addStrategyEventListener(StrategyEventListener inListener);
    /**
     * Remove the given strategy event listener. 
     *
     * @param inListener a <code>StrategyEventListener</code> value
     */
    void removeStrategyEventListener(StrategyEventListener inListener);
}
