//
// this file is automatically generated
// @Preserve
//
syntax = "proto3";
option java_generic_services = true;
option java_package = "org.marketcetera.strategy";
option java_outer_classname = "StrategyRpc";
import "rpc_base.proto";
import "rpc_paging.proto";
import "rpc_strategy_types.proto";

// request the loaded strategy instances
message ReadStrategyInstancesRequest {
    string sessionId = 1; // session id of the authenticated session
}

// return the loaded strategy instances
message ReadStrategyInstancesResponse {
    PageResponse pageResponse = 1;
    repeated StrategyInstance strategyInstances = 2;
}

// request a set of strategy messages
message ReadStrategyMessagesRequest {
    string sessionId = 1; // session id of the authenticated session
    string strategyName = 2; // optional strategy name to filter by
    StrategyMessageSeverity severity = 3; // optional severity to filter by
    PageRequest pageRequest = 4; // page request which indicates which page of data to return
}

// return the strategy messages
message ReadStrategyMessagesResponse {
    PageResponse pageResponse = 1;
    repeated StrategyMessage strategyMessages = 2;
}

// loads a new strategy instance
message LoadStrategyInstanceRequest {
    string sessionId = 1; // session id of the authenticated session
    StrategyInstance strategyInstance = 2;
}

// returns the load strategy instance response
message LoadStrategyInstanceResponse {
    StrategyStatus status = 1;
}

// unloads a new strategy instance
message UnloadStrategyInstanceRequest {
    string sessionId = 1; // session id of the authenticated session
    string name = 2;
}

// returns the unload strategy instance response
message UnloadStrategyInstanceResponse {
}

message FileUploadRequest {
  oneof request {
    FileUploadMetaData metadata = 1;
    UploadFile file = 2;
  }
}

message FileUploadResponse {
  string name = 1;
  FileUploadStatus status = 2;
}

// get the strategy instance with the given name
message FindStrategyInstanceByNameRequest {
    string sessionId = 1; // session id of the authenticated session
    string name = 2; // name of the strategy instance to find
}

// returns the find by name strategy instance response
message FindStrategyInstanceByNameResponse {
    StrategyInstance strategyInstance = 1;
}

message AddStrategyEventListenerRequest {
    string sessionId = 1;
    string listenerId = 2;
}

message StrategyEventListenerResponse {
    StrategyEvent event = 1;
}

message RemoveStrategyEventListenerRequest {
    string sessionId = 1;
    string listenerId = 2;
}

message RemoveStrategyEventListenerResponse {
}

// starts a new strategy instance
message StartStrategyInstanceRequest {
    string sessionId = 1; // session id of the authenticated session
    string name = 2;
}

// returns the start strategy instance response
message StartStrategyInstanceResponse {
}

// stops a new strategy instance
message StopStrategyInstanceRequest {
    string sessionId = 1; // session id of the authenticated session
    string name = 2;
}

// returns the stop strategy instance response
message StopStrategyInstanceResponse {
}

// create a strategy message
message CreateStrategyMessageRequest {
    string sessionId = 1; // session id of the authenticated session
    StrategyMessage strategyMessage = 2;
}

message CreateStrategyMessageResponse {
}

// delete a single strategy message
message DeleteStrategyMessageRequest {
    string sessionId = 1; // session id of the authenticated session
    int64 strategyMessageId = 2; // uniquely identifies the strategy message
}

message DeleteStrategyMessageResponse {
}

message DeleteAllStrategyMessagesRequest {
    string sessionId = 1; // session id of the authenticated session
    string strategyInstanceName = 2; // name of the strategy instance for which to delete strategy messages
}

message DeleteAllStrategyMessagesResponse {
}

// services for Strategy
service StrategyRpcService {
    rpc login(LoginRequest) returns (LoginResponse); // starts the session
    rpc logout(LogoutRequest) returns (LogoutResponse); // ends the session
    rpc heartbeat(HeartbeatRequest) returns (HeartbeatResponse); // keeps the session alive
    rpc getStrategyInstances(ReadStrategyInstancesRequest) returns (ReadStrategyInstancesResponse); // requests loaded strategy instances
    rpc getStrategyMessages(ReadStrategyMessagesRequest) returns (ReadStrategyMessagesResponse); // requests strategy messages
    rpc loadStrategyInstance(LoadStrategyInstanceRequest) returns (LoadStrategyInstanceResponse); // load a new strategy instances
    rpc unloadStrategyInstance(UnloadStrategyInstanceRequest) returns (UnloadStrategyInstanceResponse); // unload a strategy instance
    rpc findByName(FindStrategyInstanceByNameRequest) returns (FindStrategyInstanceByNameResponse); // finds the strategy instance with the given name
    rpc uploadFile(stream FileUploadRequest) returns(FileUploadResponse);
    rpc createStrategyMessage(CreateStrategyMessageRequest) returns(CreateStrategyMessageResponse); // sends a strategy message to the server
    rpc addStrategyEventListener(AddStrategyEventListenerRequest) returns (stream StrategyEventListenerResponse);
    rpc removeStrategyEventListener(RemoveStrategyEventListenerRequest) returns (RemoveStrategyEventListenerResponse);
    rpc startStrategyInstance(StartStrategyInstanceRequest) returns (StartStrategyInstanceResponse); // start a strategy instance
    rpc stopStrategyInstance(StopStrategyInstanceRequest) returns (StopStrategyInstanceResponse); // stop a strategy instance
    rpc deleteStrategyMessage(DeleteStrategyMessageRequest) returns (DeleteStrategyMessageResponse); // delete a strategy message
    rpc deleteAllStrategyMessages(DeleteAllStrategyMessagesRequest) returns (DeleteAllStrategyMessagesResponse); // delete all strategy messages for a strategy instance
}
