package org.marketcetera.server.security;

import java.util.HashMap;
import java.util.Map;

import org.marketcetera.server.service.UserManager;
import org.marketcetera.systemmodel.User;
import org.marketcetera.systemmodel.UserFactory;
import org.marketcetera.util.log.SLF4JLoggerProxy;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;

/* $License$ */

/**
 *
 *
 * @author <a href="mailto:colin@marketcetera.com">Colin DuPlantis</a>
 * @version $Id$
 * @since $Release$
 */
public class DatabaseInitializer
        implements InitializingBean
{
    /* (non-Javadoc)
     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()
     */
    @Override
    public void afterPropertiesSet()
            throws Exception
    {
        for(Map.Entry<String,String> entry : users.entrySet()) {
            User user = userFactory.create(entry.getKey(),
                                           "Autogenerated user: " + entry.getKey(),
                                           "password",
                                           true,
                                           null);
            try {
                userManager.write(user);
                // write the user /again/ because the default salt method uses the id of the user (doesn't exist until the record is created)
                user.setHashedPassword(passwordManager.encodePassword(entry.getKey(),
                                                                      user));
                userManager.write(user);
                SLF4JLoggerProxy.info(DatabaseInitializer.class,
                                      "Added user: {} all users are: {}",
                                      user,
                                      userManager.getUsers());
            } catch (Exception e) {
                SLF4JLoggerProxy.warn(DatabaseInitializer.class,
                                      e,
                                      "Could not add: {}",
                                      user);
            }
        }
        SLF4JLoggerProxy.info(DatabaseInitializer.class,
                              "All users are: {}",
                              userManager.getUsers());
    }
    /**
     * 
     *
     *
     * @param inUsers
     */
    public void setUsers(Map<String,String> inUsers)
    {
        users.clear();
        users.putAll(inUsers);
    }
    /**
     * 
     */
    private final Map<String,String> users = new HashMap<String,String>();
    /**
     * 
     */
    @Autowired
    private UserManager userManager;
    /**
     * 
     */
    @Autowired
    private PasswordManager passwordManager;
    /**
     * 
     */
    @Autowired
    private UserFactory userFactory;
}
